# Specify the virtual environment
dist: trusty
sudo: true


# Specify the project language and the compiler to test to
language: cpp
compiler: gcc


# Enable Slack notifications, disable e-mail
notifications:
    slack: gqcg:5PZ5ibXCwNU1b5ToWbHVIqnI
    email: false


# Install Miniconda and CMake
before_install:
  # Install Miniconda
  - if [[ "${TRAVIS_PYTHON_VERSION}" == "2.7" ]]; then
      wget wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p ${HOME}/miniconda
  - export PATH="${HOME}/miniconda/bin:${PATH}"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda

  # Install a recent version of CMake
  - conda install -c conda-forge cmake


# Install general dependencies
install:
  # Install Boost before Eigen
  - conda install -c conda-forge boost-cpp

  # Install Eigen
  - conda install -c conda-forge eigen

  # We need relatively recent boost libraries, and APT doesn't provide these.
  # since compiling Boost takes around 15 minutes on Travis, it is a good idea to cache it (see also below)
#  - |
#    if [ ! -d /tmp/boost/boost_1_65_1 ]; then
#       mkdir -p /tmp/boost && cd /tmp/boost
#       curl -OL "https://dl.bintray.com/boostorg/release/1.65.1/source/boost_1_65_1.tar.bz2"
#       sudo tar --bzip2 -xf boost_1_65_1.tar.bz2
#       cd boost_1_65_1
#       sudo ./bootstrap.sh --prefix=/usr/local/boost_1_65_1
#       sudo ./b2 install
#    else
#       cd /tmp/boost/boost_1_65_1
#       sudo ./b2 install
#    fi
#  - export BOOST_ROOT=/usr/local/boost_1_65_1


  # We can't install libint2 (2.2.0+) through APT.
  # Since compiling libint2 takes around 15 minutes on Travis, it is a good idea to cache it (see also below)
#  - |
#    if [ ! -d /tmp/libint/libint-2.3.1 ]; then
#       mkdir -p /tmp/libint && cd /tmp/libint
#       curl -OL "https://github.com/evaleev/libint/archive/v2.3.1.tar.gz"
#       tar -xvzf v2.3.1.tar.gz
#       cd libint-2.3.1
#       ./autogen.sh
#       mkdir build && cd build
#       ../configure CXXFLAGS=-I${BOOST_ROOT}/include
#       make export
#       tar -xvzf libint-2.3.1.tgz
#       cd libint-2.3.1
#       ./configure CXXFLAGS=-I${BOOST_ROOT}/include
#       make
#       sudo make install
#    else
#      cd /tmp/libint/libint-2.3.1/build/libint-2.3.1
#      sudo make install
#    fi

  # Finally, since libint often complains about reading the basis sets, specify a LIBINT_DATA_PATH to help libint find the files.
#  - export LIBINT_DATA_PATH=/usr/local/libint/2.3.1/share/libint/2.3.1/basis


  # Install the cpputil library
#  - mkdir /tmp/cpputil && cd /tmp/cpputil
#  - git clone https://github.com/GQCG/cpputil.git --branch master --single-branch
#  - cd cpputil
#  - mkdir build && cd build
#  - cmake .. && make && make test && sudo make install


  # Install the libint wrapper
#  - mkdir /tmp/libwint && cd /tmp/libwint
#  - git clone https://github.com/GQCG/libwint.git --branch master --single-branch
#  - cd libwint
#  - mkdir build && cd build
#  - cmake .. && make && make test && sudo make install


  # Install the hf library
#  - mkdir /tmp/hf && cd /tmp/hf
#  - git clone https://github.com/GQCG/hf.git --branch master --single-branch
#  - cd hf
#  - mkdir build && cd build
#  - cmake .. && make && make test && sudo make install


  # Install bmqc
#  - mkdir /tmp/bmqc && cd /tmp/bmqc
#  - git clone https://github.com/GQCG/bmqc.git --branch master --single-branch
#  - cd bmqc
#  - mkdir build && cd build
#  - cmake .. && make && make test && sudo make install


  # Install Spectra
#  - cd /usr/local/
#  - sudo git clone https://github.com/yixuan/spectra.git


  # Install the numopt library
#  - mkdir /tmp/numopt && cd /tmp/numopt
#  - git clone https://github.com/GQCG/numopt.git --branch master --single-branch
#  - cd numopt
#  - mkdir build && cd build
#  - cmake .. && make && make test && sudo make install



# Run the build script
script:
  - cd /home/travis/build/GQCG/gqcg
  - mkdir build && cd build
  - cmake ..
  - make && make test && sudo make install

cache:
  directories:
#    - /tmp/libint  # add the libint compilation to the cache
#    - /tmp/boost  # add the Boost compilation to the cache
