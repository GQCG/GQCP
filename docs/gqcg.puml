@startuml

namespace GQCP {

    class GQCP::Atom {
        __ public members __
            + size_t atomic_number
            + double x, y, z
            + {static} constexpr double tolerance_for_comparison = 1.0e-08
        == constructors ==
            **Atom** (size_t atomic_number, double x, double y, double z)
        __ operators __
            + bool **operator==**(const GQCP::Atom& other) const
            + bool **operator<(const GQCP::Atom& other) const
            + friend std::ostream& **operator<<**(std::ostream& os, const GQCP::Atom& atom)
        __ public methods __
            + bool **isEqualTo**(const GQCP::Atom& other, double tolerance=Atom::tolerance_for_comparison) const
            + bool **isSmallerThan**(const GQCP::Atom& other, double tolerance=Atom::tolerance_for_comparison) const
            + double **calculateDistance**(const GQCP::Atom& other) const
    }

    GQCP::Molecule *--> "vector of ..." GQCP::Atom
    class GQCP::Molecule {
        __ private members __
            - const std::vector<GQCP::Atom> atoms
            - const size_t N
        __ private methods __
            - {static} std::vector<GQCP::Atom> parseXYZFile(const std::string& xyz_filename)
        == constructors ==
            explicit **Molecule**(const std::string& xyz_filename)
            **Molecule**(const std::string& xyz_filename, int molecular_charge)
            explicit **Molecule**(const std::vector<GQCP::Atom>& atoms)
            **Molecule**(const std::vector<GQCP::Atom>& atoms, int molecular_charge)
        __ operators __
            + bool **operator==**(const GQCP::Molecule& other) const
            + friend std::ostream& **operator<<**(std::ostream& os, const GQCP::Molecule& molecule)
        __ public methods __
            + size_t **get_N**() const
            + size_t **numberOfAtoms**() const

            + bool **isEqualTo**(const GQCP::Molecule& other, double tolerance=GQCP::Atom::tolerance_for_comparison) const
            + size_t **calculateTotalNucleicCharge**() const
            + double **calculateInternuclearDistance**(size_t index1, size_t index2) const
            + double **calculateInternuclearRepulsionEnergy**() const
    }


    class GQCP::JacobiRotationParameters {
        __ private members __
            - size_t p
            - size_t q
            - double angle
        == constructors ==
            **JacobiRotationParameters**(size_t p, size_t q, double angle)
        __ getters __
            + size_t **get_p**() const
            + size_t **get_q**() const
            + size_t **get_angle**() const
    }


    abstract class Operator {
        __ private methods __
            - const size_t dim
        == constructor ==
            explicit **BaseOperator**(size_t dimension)
        __ public methods __
            + void **transform**(const Eigen::MatriXd& T)
            + void **rotate**(const Eigen::MatrixXd& U) = 0
            + void **rotate**(const GQCP::JacobiRotationParameters& jacobi_parameters) = 0
    }

    OneElectronOperator --|> Operator
    class OneElectronOperator {
        __ protected members __
            - Eigen::MatrixXd matrix
        __ public methods __
            - Eigen::MatrixXd **get_matrix_representation**() const
    }

    TwoElectronOperator --|> Operator
    class TwoElectronOperator {
        __ private members __
            - Eigen::Tensor<double, 4> tensor
        __ public methods __
            - Eigen::Tensor<double, 4> **get_matrix_representation**() const
    }

    class AOBasis {
        __ private members __
            - const std::vector<GQCP::Atom> atoms
            - const libint2::BasisSet basis_functions
            - const size_t number_of_basis_functions
        == constructors ==
            **AOBasis**(const GQCP::Molecule& molecule, std::string basis_set)
        __ public methods __
            size_t **get_number_of_basis_functions**() const
    }

    class LibintCommunicator {
        __ private constructor __
            - **LibintCommunicator**()
        == private destructor ==
            ~ **~LibintCommunicator**()
        __ public methods __
            + {static} LibintCommunicator& **get**()
            + **LibintCommunicator**(LibintCommunicator const& libint_communicator) = delete
            + void **operator=**(LibintCommunicator const& libint_communicator) = delete

            + std::vector<libint2::Atom> **interface**(const std::vector<GQCP::Atom>& atoms) const
            + OneElectronOperator **calculateOneElectronIntegrals**(libint2::Operator operator_type, const GQCP::AOBasis& ao_basis) const
            + TwoElectronOperator **calculateTwoElectronIntegrals**(libint2::Operator operator_type, const GQCP::AOBasis& ao_basis) const
    }


    class AddressingScheme {
        __ private members __
            - const size_t K
            - const size_t N
            - GQCP::Matrixu vertex_weights
        == constructors ==
            **AddressingScheme**(size_t K, size_t N)
        __ public methods __
            + GQCP::Matrixu **get_vertex_weights**() const
            + size_t **get_vertex_weights**(size_t p, size_t m) const
            + size_t **get_K**() const
            + size_t **get_N**() const
    }


    BaseHamiltonianParameters o--> AOBasis
    abstract class BaseHamiltonianParameters {
        __ private members __
            - std::shared_ptr<GQCP::AOBasis> ao_basis_sptr
    }


    HamiltonianParameters --|> BaseHamiltonianParameters
    class HamiltonianParameters {
        __ private members __
            - OneElectronOperator S
            - OneElectronOperator h
            - OneElectronOperator g
            - Eigen::MatrixXd C
        == constructors ==
            **HamiltonianParameters**(std::shared_ptr<GQCP::AOBasis> ao_basis_sptr, const GQCP::OneElectronOperator& S, const GQCP::OneElectronOperator& h, const GQCP::TwoElectronOperator& g, const Eigen::MatrixXd& C)
        __ public methods __
            + void **transform**(const Eigen::MatriXd& T)
            + void **rotate**(const Eigen::MatrixXd& U)
            + void **rotate**(const GQCP::JacobiRotationParameters& jacobi_parameters)
    }

    UnrestrictedHamiltonianParameters --|> BaseHamiltonianParameters
    class UnrestrictedHamiltonianParameters {
        __ private members __
            - OneElectronOperator S_alpha
            - OneElectronOperator S_beta
            - OneElectronOperator h_alpha
            - OneElectronOperator h_beta
            - TwoElectronOperator g_aaaa
            - TwoElectronOperator g_aabb
            - TwoElectronOperator g_bbaa
            - TwoElectronOperator g_bbbb
            - Eigen::MatrixXd C_alpha
            - Eigen::MatrixXd C_beta
        __ public methods __
            + void **transformAlpha**(const Eigen::MatrixXd& T_alpha)
            + void **transformBeta**(const Eigen::MatrixXd& T_alpha)
            + void **rotateAlpha**(const Eigen::MatrixXd& U_alpha)
            + void **rotateBeta**(const Eigen::MatrixXd& U_beta)
            + void **rotateAlpha**(const GQCP::JacobiRotationParameters& jacobi_parameters_alpha)
            + void **rotateBeta**(const GQCP::JacobiRotationParameters& jacobi_parameters_beta)
    }

    abstract class QCM {
        __public__
        +get_energy
        +get_wavefunction
        __private__
        -param

    }

    abstract AllNumoptSolverInterface

    GQCP.QCM ..> GQCP.Basis
}

namespace oo {
    abstract class OO {
        ==constructor==
         **OO**(QCM)
    }
    class OOjacobi {

    }
}


oo.OO o--> GQCP.QCM
oo.OO o--> GQCP.Basis
oo.OOjacobi --|> oo.OO

namespace ci {
    abstract class BaseCI
    class DOCI
    class FCI
    class OODOCI
    class SelectedCI
}

ci.BaseCI --|> GQCP.QCM
ci.OODOCI --|> oo.OO
ci.DOCI --|> ci.BaseCI
ci.FCI --|> ci.BaseCI
ci.SelectedCI --|> ci.BaseCI
ci.BaseCI o--> GQCP.AllNumoptSolverInterface

namespace rdm {
}
namespace constraints {
}

namespace hf {
}


@enduml

