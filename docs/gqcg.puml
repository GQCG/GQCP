@startuml

namespace gqcg {

    class GQCG::Atom {
        __ public members __
            + size_t atomic_number
            + double x, y, z
            + {static} constexpr double tolerance_for_comparison = 1.0e-08
        == constructors ==
            **Atom** (size_t atomic_number, double x, double y, double z)
        __ operators __
            + bool **operator==**(const GQCG::Atom& other) const
            + bool **operator<(const GQCG::Atom& other) const
            + friend std::ostream& **operator<<**(std::ostream& os, const GQCG::Atom& atom)
        __ public methods __
            + bool **isEqualTo**(const GQCG::Atom& other, double tolerance=Atom::tolerance_for_comparison) const
            + bool **isSmallerThan**(const GQCG::Atom& other, double tolerance=Atom::tolerance_for_comparison) const
            + double **calculateDistance**(const GQCG::Atom& other) const
    }

    GQCG::Molecule *--> "vector of ..." GQCG::Atom
    class GQCG::Molecule {
        __ private members __
            - const std::vector<GQCG::Atom> atoms
            - const size_t N
        __ private methods __
            - {static} std::vector<GQCG::Atom> parseXYZFile(const std::string& xyz_filename)
        == constructors ==
            explicit **Molecule**(const std::string& xyz_filename)
            **Molecule**(const std::string& xyz_filename, int molecular_charge)
            explicit **Molecule**(const std::vector<GQCG::Atom>& atoms)
            **Molecule**(const std::vector<GQCG::Atom>& atoms, int molecular_charge)
        __ operators __
            + bool **operator==**(const GQCG::Molecule& other) const
            + friend std::ostream& **operator<<**(std::ostream& os, const GQCG::Molecule& molecule)
        __ public methods __
            + size_t **get_N**() const
            + size_t **numberOfAtoms**() const

            + bool **isEqualTo**(const GQCG::Molecule& other, double tolerance=GQCG::Atom::tolerance_for_comparison) const
            + size_t **calculateTotalNucleicCharge**() const
            + double **calculateInternuclearDistance**(size_t index1, size_t index2) const
            + double **calculateInternuclearRepulsionEnergy**() const
    }


    class GQCG::JacobiRotationParameters {
        __ private members __
            - size_t p
            - size_t q
            - double angle
        == constructors ==
            **JacobiRotationParameters**(size_t p, size_t q, double angle)
        __ getters __
            + size_t **get_p**() const
            + size_t **get_q**() const
            + size_t **get_angle**() const
    }


    abstract class Operator {
        __ public methods __
            + void **transform**(const Eigen::MatriXd& T)
            + void **rotate**(const Eigen::MatrixXd& U) = 0
            + void **rotate**(const GQCG::JacobiRotationParameters& jacobi_parameters) = 0
    }

    OneElectronOperator --|> Operator
    class OneElectronOperator {
        __ protected members __
            - Eigen::MatrixXd matrix
        __ public methods __
            - Eigen::MatrixXd **get_matrix_representation**() const
    }

    TwoElectronOperator --|> Operator
    class TwoElectronOperator {
        __ private members __
            - Eigen::Tensor<double, 4> tensor
        __ public methods __
            - Eigen::Tensor<double, 4> **get_matrix_representation**() const
    }

    class AOBasis {
        __ private members __
            - const std::vector<GQCG::Atom> atoms
            - const libint2::BasisSet basis_functions
            - const size_t number_of_basis_functions
        == constructors ==
            **AOBasis**(const GQCG::Molecule& molecule, std::string basis_set)
        __ public methods __
            size_t **get_number_of_basis_functions**() const
    }

    class LibintCommunicator {
        __ private constructor __
            - **LibintCommunicator**()
        == private destructor ==
            ~ **~LibintCommunicator**()
        __ public methods __
            + {static} LibintCommunicator& **get**()
            + **LibintCommunicator**(LibintCommunicator const& libint_communicator) = delete
            + void **operator=**(LibintCommunicator const& libint_communicator) = delete

            + std::vector<libint2::Atom> **interface**(const std::vector<GQCG::Atom>& atoms) const
            + OneElectronOperator **calculateOneElectronIntegrals**(libint2::Operator operator_type, const GQCG::AOBasis& ao_basis) const
            + TwoElectronOperator **calculateTwoElectronIntegrals**(libint2::Operator operator_type, const GQCG::AOBasis& ao_basis) const
    }


    class Basis {
        // Change the Name to integral evaluation?
        // hamiltonian one particle evaluation?
        // up for debate
        == constructors ==
           **Basis**(IntegralCalculator, string basisSet, Molecule)
           **Basis**(h_matrix, g_tensor, s_matrix)
           **Basis**(filename)
        __public__
           +transform
   }

    abstract class QCM {
        __public__
        +get_energy
        +get_wavefunction
        __private__
        -param

    }

    abstract AllNumoptSolverInterface
    gqcg.Basis ..> gqcg.Molecule

    gqcg.QCM ..> gqcg.Basis



}

namespace oo {
    abstract class OO {
        ==constructor==
         **OO**(QCM)
    }
    class OOjacobi {

    }
}


oo.OO o--> gqcg.QCM
oo.OO o--> gqcg.Basis
oo.OOjacobi --|> oo.OO

namespace ci {
    abstract class BaseCI
    class DOCI
    class FCI
    class OODOCI
    class SelectedCI
}

ci.BaseCI --|> gqcg.QCM
ci.OODOCI --|> oo.OO
ci.DOCI --|> ci.BaseCI
ci.FCI --|> ci.BaseCI
ci.SelectedCI --|> ci.BaseCI
ci.BaseCI o--> gqcg.AllNumoptSolverInterface

namespace rdm {
}
namespace constraints {
}

namespace hf {
}


@enduml

