// This file is part of GQCG-GQCP.
//
// Copyright (C) 2017-2020  the GQCG developers
//
// GQCG-GQCP is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// GQCG-GQCP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with GQCG-GQCP.  If not, see <http://www.gnu.org/licenses/>.

#include "Mathematical/Algorithm/IterativeAlgorithm.hpp"
#include "QCMethod/CC/CCSD.hpp"
#include "QCMethod/CC/CCSDSolver.hpp"
#include "Utilities/complex.hpp"

#include <pybind11/pybind11.h>


namespace gqcpy {


// Provide some shortcuts for frequent namespaces.
namespace py = pybind11;
using namespace GQCP;


/**
 *  Add Python bindings for some APIs related to `QCMethod::CCSD`.
 * 
 *  @tparam Class               The type of the Pybind11 `class_` (generated by the compiler).
 *  
 *  @param py_class             The Pybind11 `class_` that should obtain APIs related to `QCMethod::CCSD`.
 */
template <typename Class>
void bindQCMethodCCSDInterface(Class& py_class) {

    // The C++ type corresponding to the Python class.
    using Type = typename Class::type;

    using Scalar = typename Type::Scalar;


    py_class
        .def_static(
            "optimize",
            [](IterativeAlgorithm<CCSDEnvironment<Scalar>>& solver, CCSDEnvironment<Scalar>& environment) {
                return Type().optimize(solver, environment);
            },
            py::arg("solver"),
            py::arg("environment"),
            "Optimize the CCSD wave function model.");
}


/**
 *  Register multiple templated `QCMethod::CCSD` to the gqcpy module and expose parts of their C++ interfaces to Python.
 * 
 *  @param module           The Pybind11 module in which the classes should be registered.
 */
void bindQCMethodCCSD(py::module& module) {

    // Real-valued Python bindings.
    py::class_<QCMethod::CCSD<double>> py_CCSD_d {module, "CCSD_d", "The (real-valued) CCSD quantum chemical method."};
    bindQCMethodCCSDInterface(py_CCSD_d);

    // Complex-valued Python bindings.
    py::class_<QCMethod::CCSD<complex>> py_CCSD_cd {module, "CCSD_cd", "The (complex-valued) CCSD quantum chemical method."};
    bindQCMethodCCSDInterface(py_CCSD_cd);
}


}  // namespace gqcpy
