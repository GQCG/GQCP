// This file is part of GQCG-GQCP.
//
// Copyright (C) 2017-2020  the GQCG developers
//
// GQCG-GQCP is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// GQCG-GQCP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with GQCG-GQCP.  If not, see <http://www.gnu.org/licenses/>.

#include "QCModel/HF/RHF.hpp"
#include "Utilities/complex.hpp"
#include "gqcpy/include/interfaces.hpp"

#include <pybind11/eigen.h>
#include <pybind11/pybind11.h>


namespace gqcpy {


// Provide some shortcuts for frequent namespaces.
namespace py = pybind11;
using namespace GQCP;


/**
 *  Add Python bindings for some APIs related to `QCModel::RHF` over `GTOShell`s.
 * 
 *  @tparam Class               The type of the Pybind11 `class_` (generated by the compiler).
 *  
 *  @param py_class             The Pybind11 `class_` that should obtain APIs related to `GSpinorBasis` over `GTOShell`s.
 */
template <typename Class>
void bindQCModelRHFInterface(Class& py_class) {

    // The C++ type corresponding to the Python class.
    using Type = typename Class::type;
    using Scalar = typename Type::Scalar;

    py_class

        /*
         *  MARK: Energy
         */

        .def(
            "spinOrbitalEnergiesBlocked",
            &QCModel::RHF<Scalar>::spinOrbitalEnergiesBlocked,
            "Return all the spin-orbital energies, with the alpha spin-orbital energies appearing before the beta spin-orbital energies.")

        .def(
            "spinOrbitalEnergiesInterleaved",
            &QCModel::RHF<Scalar>::spinOrbitalEnergiesInterleaved,
            "Return all the spin-orbital energies, with the alpha spin-orbital energies appearing before the beta spin-orbital energies.");


    // Expose the `HartreeFock` interface.
    bindQCModelHartreeFockInterface(py_class);
}


/**
 *  Register `QCModel_RHF_d` and  `QCModel_RHF_cd` to the gqcpy module and expose parts of their C++ interfaces to Python.
 * 
 *  @param module           The Pybind11 module in which the classes should be registered.
 */
void bindQCModelRHF(py::module& module) {

    // Define the Python class for `QCModel_RHF_d`.
    py::class_<QCModel::RHF<double>> py_QCModel_RHF_d {module, "QCModel_RHF_d", "The (real-valued) restricted Hartree-Fock wave function model."};
    bindQCModelRHFInterface(py_QCModel_RHF_d);

    py_QCModel_RHF_d
        .def(
            "orbitalSpace",
            [](const QCModel::RHF<double>& rhf_parameters) {
                return rhf_parameters.orbitalSpace();
            },
            "Return the implicit (i.e. with ascending and contiguous orbital indices) occupied-virtual orbital space that corresponds to these RHF model parameters.")

        .def_static(
            "calculateOrbitalHessianForImaginaryResponse",
            [](const RSQHamiltonian<double>& sq_hamiltonian, const OrbitalSpace& orbital_space) {
                return QCModel::RHF<double>::calculateOrbitalHessianForImaginaryResponse(sq_hamiltonian, orbital_space).asMatrix();
            },
            py::arg("sq_hamiltonian"),
            py::arg("orbital_space"),
            "Calculate the RHF orbital Hessian (H_RI -i H_II), which can be used as a response force constant when solving the CP(R)HF equations for a purely imaginary response.")

        .def(
            "calculateMagneticFieldResponseForce",
            [](const QCModel::RHF<double>& rhf_parameters, const VectorRSQOneElectronOperator<complex>& L_op) {
                return rhf_parameters.calculateMagneticFieldResponseForce(L_op);
            },
            py::arg("L_op"),
            "Calculate the RHF response force for the perturbation due to a magnetic field.")

        .def(
            "calculateGaugeOriginTranslationResponseForce",
            [](const QCModel::RHF<double>& rhf_parameters, const VectorRSQOneElectronOperator<complex>& p_op) {
                return rhf_parameters.calculateGaugeOriginTranslationResponseForce(p_op);
            },
            py::arg("p_op"),
            "Calculate the RHF response force for the perturbation due to a gauge origin translation of the magnetic field.");


    // Define the Python class for `QCModel_RHF_cd`.
    py::class_<QCModel::RHF<complex>> py_QCModel_RHF_cd {module, "QCModel_RHF_cd", "The (complex-valued) restricted Hartree-Fock wave function model."};
    bindQCModelRHFInterface(py_QCModel_RHF_cd);

    py_QCModel_RHF_cd
        .def_static(
            "calculateIpsocentricMagneticInducibility",
            &QCModel::RHF<complex>::calculateIpsocentricMagneticInducibility,
            py::arg("grid"),
            py::arg("orbital_space"),
            py::arg("x_B"),
            py::arg("x_g"),
            py::arg("j_op"),
            "Calculate the magnetic inducibility on the given grid using the ipsocentric CSGT method.");
}


}  // namespace gqcpy
