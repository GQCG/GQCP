import unittest
import numpy as np

# Force the local gqcpy to be imported
import sys
sys.path.insert(0, '../')

import gqcpy

class FukuiDysonAnalysisQCM(unittest.TestCase):

    def setUp(self):
        """ Iniates variables to be used by tests """
        N = gqcpy.Nucleus(7, 0, 0, 0)
        N_ = gqcpy.Nucleus(7, 0, 0, 2.0)
        N2 = gqcpy.Molecule([N,N_]) # The N2 molecule with an intramolecular distance of 2.0 bohr

        self.fukui_dyson_module = gqcpy.FukuiDysonAnalysis(N2, "STO-3G", False)

        # Data generated with C++ code
        self.fukui_vectors = np.array( [[-3.90081e-12, -1.88233e-12, 1.80074e-12, 1.0, 0.00050323, 6.06555e-12, 1.20176e-16, -1.2831e-16, -1.95382e-14, -9.30859e-05],
                                        [1.93106e-16, -1.38296e-16, 0.284513, -6.32751e-12, 5.53831e-13, 0.958667, -2.99568e-12, -3.84061e-12, -0.00304944, 5.69174e-16],
                                        [-5.08191e-10, -2.45602e-10, -9.58738e-14, -0.000498687, 0.999047, -5.52071e-13, -3.97609e-16, 7.24845e-17, -1.41307e-14, 0.0436534],
                                        [4.06792e-16, -1.51936e-15, 0.244734, -3.77678e-16, -2.83286e-14, -0.0757071, -1.00172e-09, -1.27848e-09, -0.96663, -8.45397e-14],
                                        [5.88133e-13, -1.80161e-13, -6.59547e-10, 8.92497e-17, -3.91941e-16, 1.95372e-10, -0.975501, -0.219995, 1.11959e-09, 5.13496e-16],
                                        [-1.7251e-13, -5.91134e-13, 5.37944e-10, 1.50904e-16, 1.41749e-16, -1.59337e-10, -0.219995, 0.975501, -9.13558e-10, -6.75954e-15],
                                        [-2.05605e-09, -9.93642e-10, -2.56316e-14, -0.000114965, 0.0436534, -1.76018e-14, 9.97698e-16, -6.74001e-15, 8.09755e-14, -0.999047],
                                        [0.981124, -0.193382, -9.65397e-16, 3.02839e-12, 5.30346e-10, 2.44952e-16, 5.84906e-13, 1.88222e-13, 2.25155e-17, -1.80366e-09],
                                        [-0.193382, -0.981124, -1.88084e-15, -2.27418e-12, -3.98832e-10, 2.31798e-16, 1.96592e-13, -5.84423e-13, 1.15057e-15, 1.35637e-09],
                                        [-8.10393e-16, 1.54037e-15, -0.926907, 4.68461e-16, 5.8956e-14, 0.274273, 3.01041e-10, 3.83945e-10, -0.256159, 8.05236e-16]] )

        self.fukui_naturals = np.array( [-0.0211872, -0.0211872, -0.00468778, 7.21391e-07, 0.000172942, 0.000415478, 0.0201302, 0.0201302, 0.0661446, 0.940068] )
        
        self.fukui_matrix = np.array(  [[7.2958e-07, 1.36108e-17, -3.7334e-06, -1.0001e-15, -1.83658e-18, -2.46021e-18, 8.74274e-05, 2.31256e-13, -1.73839e-13, 8.84664e-15],
                                        [1.36108e-17, 2.99111e-06, 2.91637e-17, -0.000161593, 8.07492e-13, -6.58822e-13, -5.32804e-16, -1.24812e-19, -2.51889e-18, 0.00139716],
                                        [-3.7334e-06, 2.91637e-17, 0.00196403, -2.44333e-15, 2.84367e-17, -2.74277e-16, -0.0409905, -6.43677e-11, 4.84052e-11, -1.96821e-16],
                                        [-1.0001e-15, -0.000161593, -2.44333e-15, 0.0615254, -4.55005e-11, 3.71288e-11, 7.42499e-14, -3.44799e-17, -9.23061e-17, 0.0174329],
                                        [-1.83658e-18, 8.07492e-13, 2.84367e-17, -4.55005e-11, 0.0201302, -1.00073e-16, -4.71592e-16, -2.52878e-14, -2.61278e-15, -2.94252e-11],
                                        [-2.46021e-18, -6.58822e-13, -2.74277e-16, 3.71288e-11, -1.00073e-16, 0.0201302, 6.2123e-15, 2.26731e-15, -2.53448e-14, 2.40045e-11],
                                        [8.74274e-05, -5.32804e-16, -0.0409905, 7.42499e-14, -4.71592e-16, 6.2123e-15, 0.938277, 1.73262e-09, -1.30295e-09, -2.24123e-15],
                                        [2.31256e-13, -1.24812e-19, -6.43677e-11, -3.44799e-17, -2.52878e-14, 2.26731e-15, 1.73262e-09, -0.0211872, 6.92642e-17, 1.13608e-17],
                                        [-1.73839e-13, -2.51889e-18, 4.84052e-11, -9.23061e-17, -2.61278e-15, -2.53448e-14, -1.30295e-09, 6.92642e-17, -0.0211872, 5.62835e-18],
                                        [8.84664e-15, 0.00139716, -1.96821e-16, 0.0174329, -2.94252e-11, 2.40045e-11, -2.24123e-15, 1.13608e-17, 5.62835e-18, 0.000343936]] )

        self.dyson_coefficients = np.array([0.000107992, -6.84089e-16,   -0.0429685,  8.87166e-14, -5.11158e-16,  6.55616e-15,     0.966887,  1.75086e-09, -1.31669e-09,  4.19693e-15])             

        self.canonical_matrix = np.array( [[-0.702934, -0.702905, 0.17869, -0.16949, 2.62816e-10, -2.14411e-10, -0.0679084, -5.62636e-11, 4.23119e-11, 0.126671],
                                            [-0.0128248, -0.0283332, -0.47681, 0.736256, -1.46102e-09, 1.19193e-09, 0.416694, 5.76108e-10, -4.3325e-10, -1.33877],
                                            [-2.38738e-12, -8.34819e-13, -3.23249e-10, -7.69184e-10, -0.619573, 0.00186534, -1.50764e-09, 0.84611, 0.0308981, 2.54816e-10],
                                            [1.93575e-12, 6.76862e-13, 2.62095e-10, 6.23667e-10, -0.00186534, -0.619573, 1.22242e-09, -0.0308981, 0.84611, -2.06609e-10],
                                            [-0.00255726, -0.0105619, -0.251109, -0.276868, -1.79861e-10, 1.46729e-10, -0.603904, -1.2051e-09, 9.0627e-10, -1.27418],
                                            [-0.702934, 0.702905, 0.17869, 0.16949, -2.62816e-10, 2.1441e-10, -0.0679084, -5.62637e-11, 4.23121e-11, -0.126671],
                                            [-0.0128248, 0.0283332, -0.47681, -0.736256, 1.46102e-09, -1.19192e-09, 0.416694, 5.76108e-10, -4.33251e-10, 1.33877],
                                            [2.38738e-12, -8.3483e-13, 3.23249e-10, -7.69184e-10, -0.619573, 0.00186534, 1.50763e-09, -0.84611, -0.0308981, 2.54816e-10],
                                            [-1.93572e-12, 6.76895e-13, -2.62095e-10, 6.23667e-10, -0.00186534, -0.619573, -1.22241e-09, 0.0308981, -0.84611, -2.06609e-10],
                                            [0.00255726, -0.0105619, 0.251109, -0.276868, -1.79862e-10, 1.46738e-10, 0.603904, 1.2051e-09, -9.0627e-10, -1.27418]])                   

    def tearDown(self):
        pass

    def test_analysis(self):
        """ Compare the various analysis parameters with a reference value """
        self.assertTrue(np.allclose(self.fukui_dyson_module.get_fukui_naturals(),  self.fukui_naturals))
        self.assertTrue(np.allclose(self.fukui_dyson_module.get_fukui_matrix(),  self.fukui_matrix))
        self.assertTrue(np.allclose(self.fukui_dyson_module.get_dyson_coefficients(),  self.dyson_coefficients))
        self.assertTrue(np.allclose(self.fukui_dyson_module.get_fukui_vectors(),  self.fukui_vectors))
        self.assertTrue(np.allclose(self.fukui_dyson_module.get_canonical_matrix(),  self.canonical_matrix))

    
if __name__ == '__main__':
    unittest.main()
