import unittest
import numpy as np

# Force the local gqcpy to be imported
import sys
sys.path.insert(0, '../')

import gqcpy

class FukuiDysonAnalysisQCM(unittest.TestCase):

    def setUp(self):
        """ Iniates variables to be used by tests """
        C = gqcpy.Nucleus(6, 0, 0, 0)
        O = gqcpy.Nucleus(8, 0, 0, 2.0)
        CO = gqcpy.Molecule([C,O]) # The CO molecule with an intramolecular distance of 2.0 bohr

        self.fukui_dyson_module = gqcpy.FukuiDysonAnalysis(CO, "STO-3G", True)

        # Data generated with C++ code
        self.fukui_vectors = np.array( [[1.76411e-16, -4.0385e-17, -0.00675874, 0.984553, -0.174859, -0.00530657, -0.00224561, -2.24958e-18, 3.4392e-17, -8.06473e-05],
                                        [2.81824e-18, -1.32314e-16, 0.0982476, 0.172154, 0.958948, 0.197791, 0.0448179, -9.45597e-17, -1.18736e-16, -1.99441e-05],
                                        [1.52087e-16, -7.1742e-16, -0.212875, 0.0312646, 0.213387, -0.952424, -0.0159541, -6.05326e-16, 1.06488e-18, -0.0284131],
                                        [1.93392e-15, 5.39479e-16, -0.538734, 0.00629064, 0.062364, 0.146822, -0.825479, 1.72697e-16, -2.0364e-15, 0.0535198],
                                        [0.587536, 0.038571, 1.25407e-15, -1.05755e-16, -2.43078e-16, -2.47012e-16, 2.45373e-15, 0.0507621, -0.806683, -7.50445e-16],
                                        [0.038571, -0.587536, -2.58967e-16, -6.56517e-17, -2.09819e-16, 8.66163e-16, -6.25586e-17, -0.806683, -0.0507621, -6.64938e-16],
                                        [1.10647e-17, -3.55742e-16, 0.072747, 0.000616915, 0.00147489, -0.0457818, 0.00908843, -5.89761e-16, -8.1448e-16, 0.996256],
                                        [-0.808269, -0.00383457, -1.00727e-15, 1.69181e-16, 5.26769e-17, 2.00215e-16, 1.99763e-16, 0.00119732, -0.588799, -3.96022e-16],
                                        [0.00383457, -0.808269, -5.56548e-17, -4.09058e-17, -4.66406e-17, 1.89655e-16, -3.20585e-16, 0.588799, 0.00119732, 7.86266e-17],
                                        [-5.83354e-16, -8.84718e-17, 0.80589, -0.000322427, -0.0204508, -0.173457, -0.562346, -2.75544e-16, -7.79106e-16, -0.0616569]])

        self.fukui_naturals = np.array( [ -0.0922262, -0.0922262, -0.0200727, -8.3093e-08, 4.79009e-05, 0.00230966, 0.0304803,   0.101474,   0.101474,   0.96874] )
        
        self.fukui_matrix = np.array(  [[6.9217e-07, -2.07553e-07, -1.56847e-05, -2.30902e-05, -1.21763e-17, -2.79661e-18, -6.80379e-05, 1.09586e-17, -3.19674e-18, 0.000154937],
                                        [-2.07553e-07, 1.87354e-06, -2.67285e-05, 3.6809e-06, 7.65698e-19, 3.02499e-19, -0.000171144, -1.3555e-18, 1.02846e-18, -0.00243648],
                                        [-1.56847e-05, -2.67285e-05, 0.00197751, -0.00369604, 2.33276e-17, 2.63996e-17, -0.0270147, 3.10499e-17, -7.1432e-17, 0.00579546],
                                        [-2.30902e-05, 3.6809e-06, -0.00369604, 0.0177688, -2.85568e-17, -1.70714e-17, 0.0521952, 2.25932e-16, 5.97109e-17, 0.0196083],
                                        [-1.21763e-17, 7.65698e-19, 2.33276e-17, -2.85568e-17, 0.0343208, 3.86008e-16, -6.60741e-16, 0.0920142, 0.00560235, 7.73572e-17],
                                        [-2.79661e-18, 3.02499e-19, 2.63996e-17, -1.70714e-17, 3.86008e-16, 0.0343208, -6.08265e-16, 0.00560235, -0.0920142, 6.85419e-17],
                                        [-6.80379e-05, -0.000171144, -0.0270147, 0.0521952, -6.60741e-16, -6.08265e-16, 0.961401, -3.30741e-16, 1.48162e-17, -0.0608201],
                                        [1.09586e-17, -1.3555e-18, 3.10499e-17, 2.25932e-16, 0.0920142, 0.00560235, -3.30741e-16, -0.0250732, -2.50014e-16, 4.05889e-17],
                                        [-3.19674e-18, 1.02846e-18, -7.1432e-17, 5.97109e-17, 0.00560235, -0.0920142, 1.48162e-17, -2.50014e-16, -0.0250732, -1.90456e-17],
                                        [0.000154937, -0.00243648, 0.00579546, 0.0196083, 7.73572e-17, 6.85419e-17, -0.0608201, 4.05889e-17, -1.90456e-17, 0.000354721]] )

        self.dyson_coefficients = np.array([5.44798e-05,  0.000234997, 0.0235473, -0.0329366,  6.50986e-16,  6.82277e-16, -0.962945, 2.47127e-16, -9.06821e-17, 0.0154036])             

        self.canonical_matrix = np.array( [[-0.000246401, -0.993495, -0.139017, 0.153081, -1.74576e-16, -5.77704e-17, 0.173299, -1.65542e-16, 1.0943e-17, -0.11591],
                                            [0.0105915, -0.0266119, 0.222448, -0.454621, 6.54184e-16, 9.3937e-17, -0.809524, 1.19896e-15, -1.85378e-16, 1.14166],
                                            [-4.61384e-17, -6.86349e-20, -1.06302e-16, -1.89651e-16, -0.0492627, -0.441769, -1.19919e-16, 0.161481, -0.930315, -2.26091e-16],
                                            [2.27148e-16, 2.63004e-18, 1.32328e-16, -8.41154e-18, 0.441769, -0.0492627, 1.77813e-16, -0.930315, -0.161481, 8.40774e-16],
                                            [0.00842408, -0.00756999, 0.169779, -0.0770328, -1.40058e-15, -1.59193e-16, 0.565172, 1.01534e-15, -9.55983e-17, 1.33523],
                                            [-0.994002, 0.00067974, -0.222832, -0.132067, 7.57747e-17, 8.55931e-17, -0.011343, -3.36214e-17, 1.30534e-17, 0.1346],
                                            [-0.029891, 0.00702845, 0.752866, 0.652653, 3.61627e-16, -1.17189e-16, 0.00761087, -1.13893e-15, 1.71182e-16, -1.28941],
                                            [-2.88386e-18, 1.486e-19, -8.13974e-17, -2.68892e-16, -0.0861762, -0.772795, -2.79989e-16, -0.119041, 0.685813, 8.1885e-17],
                                            [8.66264e-18, -7.21049e-19, 1.08128e-16, 7.36154e-17, 0.772795, -0.0861762, 1.23785e-15, 0.685813, 0.119041, -2.6542e-16],
                                            [0.0081189, 0.000319936, -0.250489, 0.678488, 1.82204e-16, -3.7612e-16, -0.392138, 8.07478e-16, -2.56409e-16, 1.01763]])                   

    def tearDown(self):
        pass

    def test_analysis(self):
        """ Compare the various analysis parameters with a reference value """
        self.assertTrue(np.allclose(self.fukui_dyson_module.get_fukui_naturals(),  self.fukui_naturals))
        self.assertTrue(np.allclose(self.fukui_dyson_module.get_fukui_matrix(),  self.fukui_matrix))
        self.assertTrue(np.allclose(self.fukui_dyson_module.get_dyson_coefficients(),  self.dyson_coefficients))
        self.assertTrue(np.allclose(self.fukui_dyson_module.get_fukui_vectors(),  self.fukui_vectors))
        self.assertTrue(np.allclose(self.fukui_dyson_module.get_canonical_matrix(),  self.canonical_matrix))

    
if __name__ == '__main__':
    unittest.main()
