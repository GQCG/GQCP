// This file is part of GQCG-gqcp.
// 
// Copyright (C) 2017-2019  the GQCG developers
// 
// GQCG-gqcp is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// GQCG-gqcp is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with GQCG-gqcp.  If not, see <http://www.gnu.org/licenses/>.
// 
#ifndef GQCP_MOLECULE_HPP
#define GQCP_MOLECULE_HPP

#include "Molecule/Nucleus.hpp"


#include <stdlib.h>
#include <string>
#include <vector>



namespace GQCP {



/**
 *  A class that represents a collection of nuclei (with coordinates in bohr) with a number of electrons
 */
class Molecule {
private:
    std::vector<Nucleus> nuclei;  // coordinates in bohr
    size_t N;  // number of electrons


public:
    // CONSTRUCTORS

    /**
     *  @param nuclei       the nuclei that make up the molecule, with coordinates in bohr
     *  @param charge       the charge of the molecule:
     *                          +1 -> cation (one electron less than the neutral molecule)
     *                           0 -> neutral molecule
     *                          -1 -> anion (one electron more than the neutral molecule)
     */
    Molecule(const std::vector<Nucleus>& nuclei, int charge=0);


    // NAMED CONSTRUCTORS

    /**
     *  Construct a molecule based on the content of a given .xyz-file. In an .xyz-file, the molecular coordinates are in Angstrom
     *
     *  @param xyz_filename     the .xyz-file that contains the molecular coordinates in Angstrom
     *  @param charge       the charge of the molecule:
     *                          +1 -> cation (one electron less than the neutral molecule)
     *                           0 -> neutral molecule
     *                          -1 -> anion (one electron more than the neutral molecule)
     */
    static Molecule Readxyz(const std::string& xyz_filename, int charge=0);

    /**
     *  @param n            the number of H nuclei
     *  @param spacing      the internuclear spacing in bohr
     *  @param charge       the total charge
     *
     *  @return a H-chain with equal internuclear spacing
     */
    static Molecule HChain(size_t n, double spacing, int charge=0);

    /**
     *  @param n        the number of H2-molecules
     *  @param a        the internuclear distance in bohr
     *  @param b        the intermolecular distance in bohr
     *  @param charge   the total charge
     *
     *  @return a charged H2-chain
     */
    static Molecule H2Chain(size_t n, double a, double b, int charge=0);


    // OPERATORS
    /**
     *  @param other        the other molecule
     *
     *  @return if this molecule is equal to the other, within the default Nucleus::tolerance_for_comparison for the coordinates of the nuclei
     */
    bool operator==(const Molecule& other) const;

    /**
     *  @param os           the output stream which the molecule should be concatenated to
     *  @param molecule     the molecule that should be concatenated to the output stream
     *
     *  @return the updated output stream
     */
    friend std::ostream& operator<<(std::ostream& os, const Molecule& molecule);


    // GETTERS
    size_t get_N() const { return this->N; }
    const std::vector<Nucleus>& get_nuclei() const { return this->nuclei; }
    size_t numberOfAtoms() const { return this->nuclei.size(); }


    // PUBLIC METHODS
    /**
     *  @param other        the other molecule
     *  @param tolerance    the tolerance for the coordinates of the nuclei
     *
     *  @return if this is equal to the other, within the given tolerance
     */
    bool isEqualTo(const Molecule& other, double tolerance=Nucleus::tolerance_for_comparison) const;

    /**
     *  @return the sum of all the charges of the nuclei
     */
    size_t calculateTotalNucleicCharge() const;

    /**
     *  @param index1   the index of the first nucleus
     *  @param index2   the index of the second nucleus
     *
     *  @return the distance between the two nuclei at index1 and index2 in bohr
     */
    double calculateInternuclearDistance(size_t index1, size_t index2) const;

    /**
     *  @return the internuclear repulsion energy due to the nuclear framework
     */
    double calculateInternuclearRepulsionEnergy() const;

    /**
     *  @return the electrical dipole moment vector generated by the nuclear framework
     */
    Vector<double, 3> calculateNuclearDipoleMoment() const;
};



}  // namespace GQCP


#endif  // GQCP_MOLECULE_HPP
