#ifndef Matrix_hpp
#define Matrix_hpp


#include <Eigen/Dense>


namespace GQCP {


// TODO: should we use GQCP::Dynamic?


/**
 *  An extension of the Eigen::Matrix class, with extra operations
 *
 *  We have decided to inherit from Eigen::Matrix, because we will use different hierarchies: see also: https://eigen.tuxfamily.org/dox-devel/TopicCustomizing_InheritingMatrix.html
 */
template <typename _Scalar, int _Rows, int _Cols>
class Matrix : public Eigen::Matrix<_Scalar, _Rows, _Cols> {
public:

    using Scalar = _Scalar;
    enum {
        Rows = _Rows,
        Cols = _Cols
    };

    using Base = Eigen::Matrix<Scalar, Rows, Cols>;


public:

    /*
     *  CONSTRUCTORS
     */

    /**
     *  Default constructor
     */
    Matrix() : Base() {}


    /**
     *  Constructor from Eigen expressions
     *
     *  @tparam OtherDerived        the type of the Eigen expression (normally generated by the compiler)
     *  @param other                the Eigen expression
     */
    template <typename OtherDerived>
    Matrix(const Eigen::MatrixBase<OtherDerived>& other) :
        Base(other)
    {}
};


template <typename Scalar>
using MatrixX = Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic>;


}  // namespace GQCP



#endif  /* Matrix_hpp */
