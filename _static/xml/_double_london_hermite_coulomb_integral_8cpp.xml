<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="_double_london_hermite_coulomb_integral_8cpp" kind="file" language="C++">
    <compoundname>DoubleLondonHermiteCoulombIntegral.cpp</compoundname>
    <includes refid="_double_london_hermite_coulomb_integral_8hpp" local="yes">Basis/Integrals/Primitive/DoubleLondonHermiteCoulombIntegral.hpp</includes>
    <includes refid="_boys_function_8hpp" local="yes">Mathematical/Functions/BoysFunction.hpp</includes>
    <incdepgraph>
      <node id="2">
        <label>Basis/Integrals/Primitive/DoubleLondonHermiteCoulombIntegral.hpp</label>
        <link refid="_double_london_hermite_coulomb_integral_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Mathematical/Functions/BoysFunction.hpp</label>
        <link refid="_boys_function_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Mathematical/Functions/CartesianDirection.hpp</label>
        <link refid="_cartesian_direction_8hpp"/>
      </node>
      <node id="3">
        <label>Mathematical/Representation/Matrix.hpp</label>
        <link refid="_matrix_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Utilities/Eigen.hpp</label>
        <link refid="_eigen_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Utilities/aliases.hpp</label>
        <link refid="aliases_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Utilities/complex.hpp</label>
        <link refid="complex_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Utilities/type_traits.hpp</label>
        <link refid="type__traits_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/DoubleLondonHermiteCoulombIntegral.cpp</label>
        <link refid="_double_london_hermite_coulomb_integral_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Eigen/Dense</label>
      </node>
      <node id="11">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="16">
        <label>complex</label>
      </node>
      <node id="18">
        <label>cstddef</label>
      </node>
      <node id="10">
        <label>cstdlib</label>
      </node>
      <node id="12">
        <label>fstream</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="9">
        <label>type_traits</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_g_q_c_p">GQCP</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>GQCG-GQCP.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2017-2020<sp/><sp/>the<sp/>GQCG<sp/>developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GQCG-GQCP<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GQCG-GQCP<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>GQCG-GQCP.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_double_london_hermite_coulomb_integral_8hpp" kindref="compound">Basis/Integrals/Primitive/DoubleLondonHermiteCoulombIntegral.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_boys_function_8hpp" kindref="compound">Mathematical/Functions/BoysFunction.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_g_q_c_p" kindref="compound">GQCP</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/>MARK:<sp/>Constructors</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="class_g_q_c_p_1_1_double_london_hermite_coulomb_integral_1a448b824c760087328053bd923577bb66" kindref="member">DoubleLondonHermiteCoulombIntegral::DoubleLondonHermiteCoulombIntegral</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;double,<sp/>3&gt;&amp;<sp/>k1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;double,<sp/>3&gt;&amp;<sp/>P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;double,<sp/>3&gt;&amp;<sp/>k2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;double,<sp/>3&gt;&amp;<sp/>Q)<sp/>:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>{p},</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>{q},</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>k1<sp/>{k1},</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>k2<sp/>{k2},</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>P<sp/>{P},</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>Q<sp/>{Q}<sp/>{}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>MARK:<sp/>London<sp/>Hermite<sp/>Coulomb<sp/>integral<sp/>implementation</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="namespace_g_q_c_p_1a1ffc21109e62d09d3485c62e03677dfd" kindref="member">complex</ref><sp/>DoubleLondonHermiteCoulombIntegral::operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tau,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mu,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nu)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_g_q_c_p_1_1literals" kindref="compound">GQCP::literals</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>some<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Vector&lt;complex, 3&gt;</ref><sp/>P_<sp/>=<sp/>this-&gt;P<sp/>-<sp/>(1.0_ii<sp/>/<sp/>(2<sp/>*<sp/>this-&gt;p))<sp/>*<sp/>this-&gt;k1;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>left<sp/>modified<sp/>overlap<sp/>distribution<sp/>center.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Vector&lt;complex, 3&gt;</ref><sp/>Q_<sp/>=<sp/>this-&gt;Q<sp/>-<sp/>(1.0_ii<sp/>/<sp/>(2<sp/>*<sp/>this-&gt;q))<sp/>*<sp/>this-&gt;k2;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>right<sp/>modified<sp/>overlap<sp/>distribution<sp/>center.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Vector&lt;complex, 3&gt;</ref><sp/>R_P_Q_<sp/>=<sp/>P_<sp/>-<sp/>Q_;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>any<sp/>of<sp/>the<sp/>degrees<sp/>is<sp/>smaller<sp/>than<sp/>0,<sp/>the<sp/>London<sp/>Hermite<sp/>Coulomb<sp/>integral<sp/>should<sp/>vanish.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t<sp/>&lt;<sp/>0)<sp/>||<sp/>(u<sp/>&lt;<sp/>0)<sp/>||<sp/>(v<sp/>&lt;<sp/>0)<sp/>||<sp/>(tau<sp/>&lt;<sp/>0)<sp/>||<sp/>(mu<sp/>&lt;<sp/>0)<sp/>||<sp/>(nu<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Provide<sp/>the<sp/>base<sp/>case<sp/>for<sp/>(t<sp/>==<sp/>u<sp/>==<sp/>v<sp/>==<sp/>tau<sp/>==<sp/>mu<sp/>==<sp/>nu<sp/>==<sp/>0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(u<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(v<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(tau<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(mu<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(nu<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_g_q_c_p_1ac6f590924cfbbf11847a4ce174fe6e4fa834333af336cb600f3164028970f7ac6" kindref="member">alpha</ref><sp/>=<sp/>this-&gt;p<sp/>*<sp/>this-&gt;q<sp/>/<sp/>(this-&gt;p<sp/>+<sp/>this-&gt;q);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_g_q_c_p_1a1ffc21109e62d09d3485c62e03677dfd" kindref="member">complex</ref><sp/>R2_P_Q_<sp/>=<sp/>R_P_Q_.array().square().sum();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pow(-2.0<sp/>*<sp/>alpha,<sp/>n)<sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exp(-1.0_ii<sp/>*<sp/>this-&gt;k1.dot(this-&gt;P)<sp/>-<sp/>1.0_ii<sp/>*<sp/>this-&gt;k2.dot(this-&gt;Q))<sp/>*</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_boys_function" kindref="compound">BoysFunction</ref>()(n,<sp/><ref refid="namespace_g_q_c_p_1ac6f590924cfbbf11847a4ce174fe6e4fa834333af336cb600f3164028970f7ac6" kindref="member">alpha</ref><sp/>*<sp/>R2_P_Q_);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurrence<sp/>for<sp/>nu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(u<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(v<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(tau<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(mu<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1.0_ii<sp/>*<sp/>this-&gt;k2(CartesianDirection::z)<sp/>*<sp/>this-&gt;operator()(n,<sp/>t,<sp/>u,<sp/>v,<sp/>tau,<sp/>mu,<sp/>nu<sp/>-<sp/>1)<sp/>-</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_P_Q_(CartesianDirection::z)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t,<sp/>u,<sp/>v,<sp/>tau,<sp/>mu,<sp/>nu<sp/>-<sp/>1)<sp/>-</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v)<sp/>*<sp/>this-&gt;</highlight><highlight class="keyword">operator</highlight><highlight class="normal">()(n<sp/>+<sp/>1,<sp/>t,<sp/>u,<sp/>v<sp/>-<sp/>1,<sp/>tau,<sp/>mu,<sp/>nu<sp/>-<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nu<sp/>-<sp/>1)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t,<sp/>u,<sp/>v,<sp/>tau,<sp/>mu,<sp/>nu<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurrence<sp/>for<sp/>mu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(u<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(v<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(tau<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1.0_ii<sp/>*<sp/>this-&gt;k2(CartesianDirection::y)<sp/>*<sp/>this-&gt;operator()(n,<sp/>t,<sp/>u,<sp/>v,<sp/>tau,<sp/>mu<sp/>-<sp/>1,<sp/>nu)<sp/>-</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_P_Q_(CartesianDirection::y)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t,<sp/>u,<sp/>v,<sp/>tau,<sp/>mu<sp/>-<sp/>1,<sp/>nu)<sp/>-</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(u)<sp/>*<sp/>this-&gt;</highlight><highlight class="keyword">operator</highlight><highlight class="normal">()(n<sp/>+<sp/>1,<sp/>t,<sp/>u<sp/>-<sp/>1,<sp/>v,<sp/>tau,<sp/>mu<sp/>-<sp/>1,<sp/>nu)<sp/>+</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mu<sp/>-<sp/>1)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t,<sp/>u,<sp/>v,<sp/>tau,<sp/>mu<sp/>-<sp/>2,<sp/>nu);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurrence<sp/>for<sp/>tau.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(u<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(v<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1.0_ii<sp/>*<sp/>this-&gt;k2(CartesianDirection::x)<sp/>*<sp/>this-&gt;operator()(n,<sp/>t,<sp/>u,<sp/>v,<sp/>tau<sp/>-<sp/>1,<sp/>mu,<sp/>nu)<sp/>-</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_P_Q_(CartesianDirection::x)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t,<sp/>u,<sp/>v,<sp/>tau<sp/>-<sp/>1,<sp/>mu,<sp/>nu)<sp/>-</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t)<sp/>*<sp/>this-&gt;</highlight><highlight class="keyword">operator</highlight><highlight class="normal">()(n<sp/>+<sp/>1,<sp/>t<sp/>-<sp/>1,<sp/>u,<sp/>v,<sp/>tau<sp/>-<sp/>1,<sp/>mu,<sp/>nu)<sp/>+</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tau<sp/>-<sp/>1)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t,<sp/>u,<sp/>v,<sp/>tau<sp/>-<sp/>2,<sp/>mu,<sp/>nu);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurrence<sp/>for<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(u<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1.0_ii<sp/>*<sp/>this-&gt;k1(CartesianDirection::z)<sp/>*<sp/>this-&gt;operator()(n,<sp/>t,<sp/>u,<sp/>v<sp/>-<sp/>1,<sp/>tau,<sp/>mu,<sp/>nu)<sp/>+</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_P_Q_(CartesianDirection::z)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t,<sp/>u,<sp/>v<sp/>-<sp/>1,<sp/>tau,<sp/>mu,<sp/>nu)<sp/>+</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v<sp/>-<sp/>1)<sp/>*<sp/>this-&gt;</highlight><highlight class="keyword">operator</highlight><highlight class="normal">()(n<sp/>+<sp/>1,<sp/>t,<sp/>u,<sp/>v<sp/>-<sp/>2,<sp/>tau,<sp/>mu,<sp/>nu)<sp/>-</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nu)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t,<sp/>u,<sp/>v<sp/>-<sp/>1,<sp/>tau,<sp/>mu,<sp/>nu<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurrence<sp/>for<sp/>u.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1.0_ii<sp/>*<sp/>this-&gt;k1(CartesianDirection::y)<sp/>*<sp/>this-&gt;operator()(n,<sp/>t,<sp/>u<sp/>-<sp/>1,<sp/>v,<sp/>tau,<sp/>mu,<sp/>nu)<sp/>+</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_P_Q_(CartesianDirection::y)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t,<sp/>u<sp/>-<sp/>1,<sp/>v,<sp/>tau,<sp/>mu,<sp/>nu)<sp/>+</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(u<sp/>-<sp/>1)<sp/>*<sp/>this-&gt;</highlight><highlight class="keyword">operator</highlight><highlight class="normal">()(n<sp/>+<sp/>1,<sp/>t,<sp/>u<sp/>-<sp/>2,<sp/>v,<sp/>tau,<sp/>mu,<sp/>nu)<sp/>-</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mu)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t,<sp/>u<sp/>-<sp/>1,<sp/>v,<sp/>tau,<sp/>mu<sp/>-<sp/>1,<sp/>nu);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurrence<sp/>for<sp/>t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1.0_ii<sp/>*<sp/>this-&gt;k1(CartesianDirection::x)<sp/>*<sp/>this-&gt;operator()(n,<sp/>t<sp/>-<sp/>1,<sp/>u,<sp/>v,<sp/>tau,<sp/>mu,<sp/>nu)<sp/>+</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_P_Q_(CartesianDirection::x)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t<sp/>-<sp/>1,<sp/>u,<sp/>v,<sp/>tau,<sp/>mu,<sp/>nu)<sp/>+</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t<sp/>-<sp/>1)<sp/>*<sp/>this-&gt;</highlight><highlight class="keyword">operator</highlight><highlight class="normal">()(n<sp/>+<sp/>1,<sp/>t<sp/>-<sp/>2,<sp/>u,<sp/>v,<sp/>tau,<sp/>mu,<sp/>nu)<sp/>-</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tau)<sp/>*<sp/>this-&gt;operator()(n<sp/>+<sp/>1,<sp/>t<sp/>-<sp/>1,<sp/>u,<sp/>v,<sp/>tau<sp/>-<sp/>1,<sp/>mu,<sp/>nu);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>GQCP</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/DoubleLondonHermiteCoulombIntegral.cpp"/>
  </compounddef>
</doxygen>
