<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_g_q_c_p_1_1_square_matrix" kind="class" language="C++" prot="public">
    <compoundname>GQCP::SquareMatrix</compoundname>
    <basecompoundref refid="class_g_q_c_p_1_1_matrix" prot="public" virt="non-virtual">GQCP::Matrix&lt; _Scalar &gt;</basecompoundref>
    <includes refid="_square_matrix_8hpp" local="no">SquareMatrix.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename _Scalar</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_square_matrix_1aaeabfd4080a075f9d6dec0e4487cf3b3" prot="public" static="no">
        <type>_Scalar</type>
        <definition>using GQCP::SquareMatrix&lt; _Scalar &gt;::Scalar =  _Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <qualifiedname>GQCP::SquareMatrix::Scalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="42" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix" kindref="compound">SquareMatrix</ref>&lt; <ref refid="class_g_q_c_p_1_1_square_matrix_1aaeabfd4080a075f9d6dec0e4487cf3b3" kindref="member">Scalar</ref> &gt;</type>
        <definition>using GQCP::SquareMatrix&lt; _Scalar &gt;::Self =  SquareMatrix&lt;Scalar&gt;</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <qualifiedname>GQCP::SquareMatrix::Self</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="45" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1aeb77a54f205d882662841c0aaab2dbc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::SquareMatrix&lt; _Scalar &gt;::SquareMatrix</definition>
        <argsstring>()</argsstring>
        <name>SquareMatrix</name>
        <qualifiedname>GQCP::SquareMatrix::SquareMatrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="56" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="56" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1a3a3e9592b9d14e30e923ebd49f177177" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::SquareMatrix&lt; _Scalar &gt;::SquareMatrix</definition>
        <argsstring>(const size_t dim)</argsstring>
        <name>SquareMatrix</name>
        <qualifiedname>GQCP::SquareMatrix::SquareMatrix</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a square matrix given a dimension.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the square matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="65" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="65" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1a71c12ab57ae3a136b19c67270a138c02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::SquareMatrix&lt; _Scalar &gt;::SquareMatrix</definition>
        <argsstring>(const size_t rows, const size_t cols)</argsstring>
        <name>SquareMatrix</name>
        <qualifiedname>GQCP::SquareMatrix::SquareMatrix</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A default constructor for Pybind11&apos;s Eigen-related casting.</para>
<para><simplesect kind="note"><para>This method is only here to avoid compile-time errors with Pybind11 and should never be called directly! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="74" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="74" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1a0ccee967e25408559c5b06c2e8d1b2fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::SquareMatrix&lt; _Scalar &gt;::SquareMatrix</definition>
        <argsstring>(const MatrixX&lt; Scalar &gt; &amp;M)</argsstring>
        <name>SquareMatrix</name>
        <qualifiedname>GQCP::SquareMatrix::SquareMatrix</qualifiedname>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1a1682f7552bb345204c32a5cc7c464dc6" kindref="member">MatrixX</ref>&lt; <ref refid="class_g_q_c_p_1_1_square_matrix_1aaeabfd4080a075f9d6dec0e4487cf3b3" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="class_g_q_c_p_1_1_square_matrix" kindref="compound">SquareMatrix</ref> from a <ref refid="namespace_g_q_c_p_1a1682f7552bb345204c32a5cc7c464dc6" kindref="member">GQCP::MatrixX</ref> and check the given matrix is square.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix that should be square. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="83" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1aade211ea90d7a106a08db23939e20ecc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DerivedExpression</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>GQCP::SquareMatrix&lt; _Scalar &gt;::SquareMatrix</definition>
        <argsstring>(const Eigen::MatrixBase&lt; DerivedExpression &gt; &amp;expression)</argsstring>
        <name>SquareMatrix</name>
        <qualifiedname>GQCP::SquareMatrix::SquareMatrix</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; DerivedExpression &gt; &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="class_g_q_c_p_1_1_square_matrix" kindref="compound">SquareMatrix</ref> from <ref refid="namespace_eigen" kindref="compound">Eigen</ref> expressions.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DerivedExpression</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the Eigen::Matrix expression, which is normally generated by the compiler.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="namespace_eigen" kindref="compound">Eigen</ref> expression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="101" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1a37d881f47fe4a016e5549e3ac22e7aea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::SquareMatrix&lt; _Scalar &gt;::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <qualifiedname>GQCP::SquareMatrix::dimension</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dimension of this square matrix, i.e. the number of rows or columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="301" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1a0b63025d8fd5ed7c7cfdb6da82a1f68d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GQCP::SquareMatrix&lt; _Scalar &gt;::isSelfAdjoint</definition>
        <argsstring>(const double threshold=1.0e-08) const</argsstring>
        <name>isSelfAdjoint</name>
        <qualifiedname>GQCP::SquareMatrix::isSelfAdjoint</qualifiedname>
        <param>
          <type>const double</type>
          <declname>threshold</declname>
          <defval>1.0e-08</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If this square matrix is self-adjoint. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="307" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1a957455e43a3f0991500024376713cfec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GQCP::SquareMatrix&lt; _Scalar &gt;::isHermitian</definition>
        <argsstring>(const double threshold=1.0e-08) const</argsstring>
        <name>isHermitian</name>
        <qualifiedname>GQCP::SquareMatrix::isHermitian</qualifiedname>
        <param>
          <type>const double</type>
          <declname>threshold</declname>
          <defval>1.0e-08</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If this square matrix is self-adjoint. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="313" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1afeb6926506aceed33af8ad57560bd67d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GQCP::SquareMatrix&lt; _Scalar &gt;::isAntiHermitian</definition>
        <argsstring>(const double threshold=1.0e-08) const</argsstring>
        <name>isAntiHermitian</name>
        <qualifiedname>GQCP::SquareMatrix::isAntiHermitian</qualifiedname>
        <param>
          <type>const double</type>
          <declname>threshold</declname>
          <defval>1.0e-08</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If this square matrix is anti-Hermitian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="319" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1a323cfd30a36adbf412f6f02d8a009cd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GQCP::SquareMatrix&lt; _Scalar &gt;::isSymmetric</definition>
        <argsstring>(const double threshold=1.0e-08) const</argsstring>
        <name>isSymmetric</name>
        <qualifiedname>GQCP::SquareMatrix::isSymmetric</qualifiedname>
        <param>
          <type>const double</type>
          <declname>threshold</declname>
          <defval>1.0e-08</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If this square matrix is symmetric. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="325" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1ab58bd710203f7eea5af1bedd94c86410" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::array&lt; <ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref>, 2 &gt;</type>
        <definition>std::array&lt; Self, 2 &gt; GQCP::SquareMatrix&lt; _Scalar &gt;::noPivotLUDecompose</definition>
        <argsstring>() const</argsstring>
        <name>noPivotLUDecompose</name>
        <qualifiedname>GQCP::SquareMatrix::noPivotLUDecompose</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a non-pivoted LU decomposition in an array, with L at position 0 and U on position 1 of the array.</para>
</simplesect>
<simplesect kind="note"><para>Pivoting is required to ensure that the decomposition is stable. Eigen3 provides partial and full pivot modules, so when the pivot or permutation of a matrix is not of interest we strongly recommend using Eigen3 instead </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="337" column="16" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="337" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1af7a97f3e26ac36e76ed47d27443cf8dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_square_matrix_1aaeabfd4080a075f9d6dec0e4487cf3b3" kindref="member">Scalar</ref> &gt;</type>
        <definition>VectorX&lt; Scalar &gt; GQCP::SquareMatrix&lt; _Scalar &gt;::pairWiseStrictReduced</definition>
        <argsstring>() const</argsstring>
        <name>pairWiseStrictReduced</name>
        <qualifiedname>GQCP::SquareMatrix::pairWiseStrictReduced</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a pair-wise strict reduced form of this square matrix. The elements of the matrix are put into the vector such that v(m) = M(i,j)</para>
</simplesect>
in which m is calculated from i and j in a column-major way, with the restriction that i&gt;j</para>
<para>Note that this is equal to extracting to strict lower triangular matrix as a vector in column major form. Example: <verbatim>    5
    1   5       -&gt; (1, 2, 3)
    2   3   5
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="403" column="13" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="403" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1ad2771d96e3cff714f68dbdb5c7420021" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GQCP::SquareMatrix&lt; _Scalar &gt;::calculatePermanentCombinatorial</definition>
        <argsstring>() const</argsstring>
        <name>calculatePermanentCombinatorial</name>
        <qualifiedname>GQCP::SquareMatrix::calculatePermanentCombinatorial</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the permanent using a combinatorial algorithm </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="428" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="428" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1af4bae3858d82278f0a0ada4382b8c9f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GQCP::SquareMatrix&lt; _Scalar &gt;::calculatePermanentRyser</definition>
        <argsstring>() const</argsstring>
        <name>calculatePermanentRyser</name>
        <qualifiedname>GQCP::SquareMatrix::calculatePermanentRyser</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the permanent of the given square matrix using the Ryser algorithm</para>
</simplesect>
Note that this algorithm does not work for dimensions larger than 64: see <ulink url="https://www.codeproject.com/Articles/21282/%2FArticles%2F21282%2FCompute-Permanent-of-a-Matrix-with-Ryser-s-Algorit">https://www.codeproject.com/Articles/21282/%2FArticles%2F21282%2FCompute-Permanent-of-a-Matrix-with-Ryser-s-Algorit</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="450" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="450" bodyend="484"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1af916a1d7dab54e720134c9445f32b2ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref></type>
        <definition>static Self GQCP::SquareMatrix&lt; _Scalar &gt;::FromStrictTriangle</definition>
        <argsstring>(const VectorX&lt; Scalar &gt; &amp;v)</argsstring>
        <name>FromStrictTriangle</name>
        <qualifiedname>GQCP::SquareMatrix::FromStrictTriangle</qualifiedname>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_square_matrix_1aaeabfd4080a075f9d6dec0e4487cf3b3" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the strict (not including the diagonal) lower/upper triangle of the matrix in column major form</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a square matrix in which the lower triangle is filled in with its given vector representation; all other elements are set to zero </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="115" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="115" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1aa6a5cf30d688d7b21a2605b4a46d2ca9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref></type>
        <definition>static Self GQCP::SquareMatrix&lt; _Scalar &gt;::Identity</definition>
        <argsstring>(const size_t dim)</argsstring>
        <name>Identity</name>
        <qualifiedname>GQCP::SquareMatrix::Identity</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an identity square matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the square matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An identity square matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="143" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1a0762291135e1043da5582add757a5240" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref></type>
        <definition>static Self GQCP::SquareMatrix&lt; _Scalar &gt;::PartitionMatrix</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;indices, const size_t M)</argsstring>
        <name>PartitionMatrix</name>
        <qualifiedname>GQCP::SquareMatrix::PartitionMatrix</qualifiedname>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>the indices of the diagonal which will be set to 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>the dimension of the resulting matrix</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a &apos;partition&apos; matrix, which is a diagonal matrix, whose diagonal elements are either 0 or 1, as specified by the given indices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="152" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="152" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1afce67055c3293379cc196854bb235e75" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref></type>
        <definition>static Self GQCP::SquareMatrix&lt; _Scalar &gt;::PartitionMatrix</definition>
        <argsstring>(const size_t start, const size_t range, const size_t M)</argsstring>
        <name>PartitionMatrix</name>
        <qualifiedname>GQCP::SquareMatrix::PartitionMatrix</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>range</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>starting index of the partition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>range overwhich the partition indices stretch </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>the dimension of the resulting matrix</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a &apos;partition&apos; matrix, which is a diagonal matrix, whose diagonal elements are either 0 or 1, as specified by the given indices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="175" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="175" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1a57533e5025634786577ccc29e183c04c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref></type>
        <definition>static Self GQCP::SquareMatrix&lt; _Scalar &gt;::Random</definition>
        <argsstring>(const size_t dim)</argsstring>
        <name>Random</name>
        <qualifiedname>GQCP::SquareMatrix::Random</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a random square matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the resulting matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A random square matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="191" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1af9a12d2f0b3447800c1743b503233cab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref></type>
        <definition>static Self GQCP::SquareMatrix&lt; _Scalar &gt;::RandomSymmetric</definition>
        <argsstring>(const size_t dim)</argsstring>
        <name>RandomSymmetric</name>
        <qualifiedname>GQCP::SquareMatrix::RandomSymmetric</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a random symmetrix matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the resulting matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A random symmetric matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="201" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="201" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1a7b4e7cb4f0a489ff6595054f133f1861" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref></type>
        <definition>static Self GQCP::SquareMatrix&lt; _Scalar &gt;::RandomUnitary</definition>
        <argsstring>(const size_t dim)</argsstring>
        <name>RandomUnitary</name>
        <qualifiedname>GQCP::SquareMatrix::RandomUnitary</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a random unitary matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the resulting matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A random unitary matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="216" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="216" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1af0b4efec0dffa9a02baf6143c47ee3ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref></type>
        <definition>static Self GQCP::SquareMatrix&lt; _Scalar &gt;::SymmetricFromUpperTriangle</definition>
        <argsstring>(const VectorX&lt; Scalar &gt; &amp;v)</argsstring>
        <name>SymmetricFromUpperTriangle</name>
        <qualifiedname>GQCP::SquareMatrix::SymmetricFromUpperTriangle</qualifiedname>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_square_matrix_1aaeabfd4080a075f9d6dec0e4487cf3b3" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper triangle (including the diagonal) of a matrix</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the full, symmetric matrix corresponding to the given upper triangle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="231" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="231" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1aca7230511fb5f4b03f9125c943fbff3c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref></type>
        <definition>static Self GQCP::SquareMatrix&lt; _Scalar &gt;::SymmetricFromUpperTriangleWithoutDiagonal</definition>
        <argsstring>(const VectorX&lt; Scalar &gt; &amp;v)</argsstring>
        <name>SymmetricFromUpperTriangleWithoutDiagonal</name>
        <qualifiedname>GQCP::SquareMatrix::SymmetricFromUpperTriangleWithoutDiagonal</qualifiedname>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_square_matrix_1aaeabfd4080a075f9d6dec0e4487cf3b3" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper triangle (NOT including the diagonal) of a matrix</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the full, symmetric matrix corresponding to the given upper triangle, without the diagonal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="260" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="260" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_square_matrix_1ae3551bb3ac15b2560846f7a5956d1d90" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" kindref="member">Self</ref></type>
        <definition>static Self GQCP::SquareMatrix&lt; _Scalar &gt;::Zero</definition>
        <argsstring>(const size_t dim)</argsstring>
        <name>Zero</name>
        <qualifiedname>GQCP::SquareMatrix::Zero</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a zero square matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the square matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An zero square matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="291" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="291" bodyend="291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A square matrix. It is an extension of the <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref> class, allowing for dynamic-size square matrices.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>Eigen::Matrix&lt; double, Dynamic, Dynamic &gt;</label>
      </node>
      <node id="1">
        <label>GQCP::SquareMatrix&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_square_matrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>MatrixX&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_matrix"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>Eigen::Matrix&lt; double, Dynamic, Dynamic &gt;</label>
      </node>
      <node id="1">
        <label>GQCP::SquareMatrix&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_square_matrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>MatrixX&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_matrix"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" line="38" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/SquareMatrix.hpp" bodystart="39" bodyend="485"/>
    <listofallmembers>
      <member refid="class_g_q_c_p_1_1_matrix_1a263d67116c8a2b1fc1ef66c221c3c68e" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>areEqualEigenvaluesAs</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1aee293d22d945960b87ac42b0b36fe9ec" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>Base</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1aaca842a9b055761acb9dee3664fc2364" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>calculateMinor</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1ad2771d96e3cff714f68dbdb5c7420021" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>calculatePermanentCombinatorial</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1af4bae3858d82278f0a0ada4382b8c9f9" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>calculatePermanentRyser</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1ab2b55a62636aba92729ecdf6a195200e" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>Cols</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a37d881f47fe4a016e5549e3ac22e7aea" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>dimension</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a7b96fac86d7b5837836f62773ed468e3" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>Eigen</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a2ee85f9bb1fec215eadcc74e4f5e8c4b" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>Eigen</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a8d4e7b8addc8c2b642764dc46008ef2b" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>FromColumnMajorVector</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1af0644fc812c96e86091aa3a8423499b4" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>FromFile</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1aeec20581bb8d13c9bd64da048c344efa" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>FromFile</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1ad97207a34ff3ef414513a2d06cf018a5" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>FromRowMajorVector</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1af916a1d7dab54e720134c9445f32b2ea" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>FromStrictTriangle</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a6f25b30541f92ecb04069cc8ea4a22f4" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>hasEqualSetsOfEigenvectorsAs</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1aa6a5cf30d688d7b21a2605b4a46d2ca9" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>Identity</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1afeb6926506aceed33af8ad57560bd67d" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>isAntiHermitian</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a4d04c95cebb9c212c9410f0a3e49b390" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>isEqualEigenvectorAs</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a957455e43a3f0991500024376713cfec" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>isHermitian</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a643652b7fcd93870c6eeee96b106a7bc" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>isPositiveSemiDefinite</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a0b63025d8fd5ed7c7cfdb6da82a1f68d" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>isSelfAdjoint</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a323cfd30a36adbf412f6f02d8a009cd3" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>isSymmetric</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1ab58bd710203f7eea5af1bedd94c86410" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>noPivotLUDecompose</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a1f09036eef26b17fa3be4c02b05baaf0" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>operator()</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a4d3ff109b4d67d252b5f1835a343bed0" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>operator()</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a0b3667b65a37c37dd66e70803977ed29" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>pairWiseReduced</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1af7a97f3e26ac36e76ed47d27443cf8dc" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>pairWiseStrictReduced</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a0762291135e1043da5582add757a5240" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>PartitionMatrix</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1afce67055c3293379cc196854bb235e75" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>PartitionMatrix</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a7002247f1fc40ab5a12d11620641f86e" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>print</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a57533e5025634786577ccc29e183c04c" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>Random</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1af9a12d2f0b3447800c1743b503233cab" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>RandomSymmetric</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a7b4e7cb4f0a489ff6595054f133f1861" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>RandomUnitary</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1abef9f57236063712c2db15f9c85d03a8" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>removeColumn</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a1f7cadaa478ca049d032e3efcd68a251" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>removeColumns</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a78dabf4d5db685de94ba0620ee1acb07" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>removeRow</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a5583011d897d7571b1dedef5007301e1" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>removeRows</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a6ecf8ac009c539043cf3a9c49cd7c684" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>Rows</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1aaeabfd4080a075f9d6dec0e4487cf3b3" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>Scalar</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a3539bd6c04613bfc02561c6ae1bfff9f" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>Self</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1aeb77a54f205d882662841c0aaab2dbc1" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>SquareMatrix</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a3a3e9592b9d14e30e923ebd49f177177" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>SquareMatrix</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a71c12ab57ae3a136b19c67270a138c02" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>SquareMatrix</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1a0ccee967e25408559c5b06c2e8d1b2fd" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>SquareMatrix</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1aade211ea90d7a106a08db23939e20ecc" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>SquareMatrix</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1af0b4efec0dffa9a02baf6143c47ee3ed" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>SymmetricFromUpperTriangle</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1aca7230511fb5f4b03f9125c943fbff3c" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>SymmetricFromUpperTriangleWithoutDiagonal</name></member>
      <member refid="class_g_q_c_p_1_1_square_matrix_1ae3551bb3ac15b2560846f7a5956d1d90" prot="public" virt="non-virtual"><scope>GQCP::SquareMatrix</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
