<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_g_q_c_p_1_1_matrix" kind="class" language="C++" prot="public">
    <compoundname>GQCP::Matrix</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Eigen::Matrix&lt; double, Dynamic, Dynamic &gt;</basecompoundref>
    <derivedcompoundref refid="class_g_q_c_p_1_1_square_matrix" prot="public" virt="non-virtual">GQCP::SquareMatrix&lt; _Scalar &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_g_q_c_p_1_1_square_matrix" prot="public" virt="non-virtual">GQCP::SquareMatrix&lt; double &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_g_q_c_p_1_1_square_matrix" prot="public" virt="non-virtual">GQCP::SquareMatrix&lt; Scalar &gt;</derivedcompoundref>
    <includes refid="_matrix_8hpp" local="no">Matrix.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename _Scalar</type>
        <defval>double</defval>
      </param>
      <param>
        <type>int</type>
        <declname>_Rows</declname>
        <defname>_Rows</defname>
        <defval><ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref></defval>
      </param>
      <param>
        <type>int</type>
        <declname>_Cols</declname>
        <defname>_Cols</defname>
        <defval><ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" prot="public" static="no">
        <type>_Scalar</type>
        <definition>using GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::Scalar =  _Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="49" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_matrix_1a6d1e1e6a379620ae791c3ab385580e40" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; <ref refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_matrix_1a6ecf8ac009c539043cf3a9c49cd7c684" kindref="member">Rows</ref>, <ref refid="class_g_q_c_p_1_1_matrix_1ab2b55a62636aba92729ecdf6a195200e" kindref="member">Cols</ref> &gt;</type>
        <definition>using GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::Self =  Matrix&lt;Scalar, Rows, Cols&gt;</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="53" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_matrix_1aee293d22d945960b87ac42b0b36fe9ec" prot="public" static="no">
        <type>Eigen::Matrix&lt; <ref refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_matrix_1a6ecf8ac009c539043cf3a9c49cd7c684" kindref="member">Rows</ref>, <ref refid="class_g_q_c_p_1_1_matrix_1ab2b55a62636aba92729ecdf6a195200e" kindref="member">Cols</ref> &gt;</type>
        <definition>using GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::Base =  Eigen::Matrix&lt;Scalar, Rows, Cols&gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="54" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_g_q_c_p_1_1_matrix_1a6ecf8ac009c539043cf3a9c49cd7c684" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::Rows</definition>
        <argsstring></argsstring>
        <name>Rows</name>
        <initializer>= _Rows</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="50" column="27" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_g_q_c_p_1_1_matrix_1ab2b55a62636aba92729ecdf6a195200e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::Cols</definition>
        <argsstring></argsstring>
        <name>Cols</name>
        <initializer>= _Cols</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="51" column="27" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_g_q_c_p_1_1_matrix_1af82daae42137d5ee10fa6c03a75605f4" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::is_vector</definition>
        <argsstring></argsstring>
        <name>is_vector</name>
        <initializer>= (<ref refid="class_g_q_c_p_1_1_matrix_1ab2b55a62636aba92729ecdf6a195200e" kindref="member">Cols</ref> == 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="58" column="27" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_g_q_c_p_1_1_matrix_1a61fe91392f3ea29d11eb0e631df144ac" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::is_matrix</definition>
        <argsstring></argsstring>
        <name>is_matrix</name>
        <initializer>= (<ref refid="class_g_q_c_p_1_1_matrix_1ab2b55a62636aba92729ecdf6a195200e" kindref="member">Cols</ref> &gt;= 2) || (<ref refid="class_g_q_c_p_1_1_matrix_1ab2b55a62636aba92729ecdf6a195200e" kindref="member">Cols</ref> == <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="59" column="27" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a6153bff8107862438160220961ed89ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_matrix_1a6d1e1e6a379620ae791c3ab385580e40" kindref="member">Self</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt;(<ref refid="class_g_q_c_p_1_1_matrix_1ab2b55a62636aba92729ecdf6a195200e" kindref="member">Cols</ref>==<ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>) &amp;&amp;(<ref refid="class_g_q_c_p_1_1_matrix_1a6ecf8ac009c539043cf3a9c49cd7c684" kindref="member">Rows</ref>==<ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>), Z &gt;</type>
        <definition>static enable_if_t&lt;(Cols == Dynamic) &amp;&amp; (Rows == Dynamic), Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::FromColumnMajorVector</definition>
        <argsstring>(const Matrix&lt; Scalar, Dynamic, 1 &gt; &amp;v, const size_t rows, const size_t cols)</argsstring>
        <name>FromColumnMajorVector</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; <ref refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" kindref="member">Scalar</ref>, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 1 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a given column-major vector to a matrix with the given number of rows</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector that is supposed to be in a column-major ordering </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows the resulting matrix should have </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns the resulting matrix should have </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="82" column="24" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1ae98c3bb26e7fed523adaf0a32533ac65" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_matrix_1a6d1e1e6a379620ae791c3ab385580e40" kindref="member">Self</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; Self::is_vector, Z &gt;</type>
        <definition>static enable_if_t&lt;Self::is_vector, Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::FromFile</definition>
        <argsstring>(const std::string &amp;filename, size_t rows)</argsstring>
        <name>FromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a vector by reading in a file</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file to be read in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of expected rows </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="95" column="24" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="95" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a4eb0f430ff61453545937182a00e3375" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_matrix_1a6d1e1e6a379620ae791c3ab385580e40" kindref="member">Self</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; Self::is_matrix, Z &gt;</type>
        <definition>static enable_if_t&lt;Self::is_matrix, Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::FromFile</definition>
        <argsstring>(const std::string &amp;filename, size_t rows, size_t cols)</argsstring>
        <name>FromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a matrix by reading in a file</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file to be read in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of expected rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of expected columns </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="138" column="24" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="138" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a8e56d9f13a050d49f57cfeeabfb48e3a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_matrix_1a6d1e1e6a379620ae791c3ab385580e40" kindref="member">Self</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt;(<ref refid="class_g_q_c_p_1_1_matrix_1ab2b55a62636aba92729ecdf6a195200e" kindref="member">Cols</ref>==<ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>) &amp;&amp;(<ref refid="class_g_q_c_p_1_1_matrix_1a6ecf8ac009c539043cf3a9c49cd7c684" kindref="member">Rows</ref>==<ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>), Z &gt;</type>
        <definition>static enable_if_t&lt;(Cols == Dynamic) &amp;&amp; (Rows == Dynamic), Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::FromRowMajorVector</definition>
        <argsstring>(const Matrix&lt; Scalar, Dynamic, 1 &gt; &amp;v, const size_t rows, const size_t cols)</argsstring>
        <name>FromRowMajorVector</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; <ref refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" kindref="member">Scalar</ref>, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 1 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a given row-major vector to a matrix with the given number of rows</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector that is supposed to be in a column-major ordering </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows the resulting matrix should have </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns the resulting matrix should have </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="247" column="24" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="247" bodyend="261"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a931ab808381a0ad8eedbc5f2f123651d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval>bool</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; Self::is_vector, Z &gt;</type>
        <definition>enable_if_t&lt;Self::is_vector, Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::areEqualEigenvaluesAs</definition>
        <argsstring>(const Matrix&lt; Scalar, Dynamic, 1 &gt; &amp;other, double tolerance=1.0e-12) const</argsstring>
        <name>areEqualEigenvaluesAs</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; <ref refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" kindref="member">Scalar</ref>, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 1 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>1.0e-12</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if two sets of eigenvalues are equal within a given tolerance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eigenvalues1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first set of eigenvalues. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eigenvalues2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second set of eigenvalues. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>The tolerance for comparison.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If two sets of eigenvalues are equal within a given tolerance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="182" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a5611f1d276314cdc5ba20df00a01dfe9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval>bool</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; Self::is_vector, Z &gt;</type>
        <definition>enable_if_t&lt;Self::is_vector, Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::isEqualEigenvectorAs</definition>
        <argsstring>(const Matrix&lt; Scalar, Dynamic, 1 &gt; &amp;other, double tolerance=1.0e-12) const</argsstring>
        <name>isEqualEigenvectorAs</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; <ref refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" kindref="member">Scalar</ref>, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 1 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>1.0e-12</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if two eigenvectors are equal, within a given tolerance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eigenvector1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first eigenvector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eigenvector2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second eigenvector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>The tolerance for comparison.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If two eigenvectors are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="197" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a576cfb262eb965a0b49f4e679cf076c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval>bool</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; Self::is_matrix, Z &gt;</type>
        <definition>enable_if_t&lt;Self::is_matrix, Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::hasEqualSetsOfEigenvectorsAs</definition>
        <argsstring>(const Matrix&lt; Scalar, Dynamic, Dynamic &gt; &amp;other, double tolerance=1.0e-12) const</argsstring>
        <name>hasEqualSetsOfEigenvectorsAs</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; <ref refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" kindref="member">Scalar</ref>, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>1.0e-12</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if two sets of eigenvectors are equal within a given tolerance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eigenvectors1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first set of eigenvectors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eigenvectors2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second set of eigenvectors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>The tolerance for comparison.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If two sets of eigenvectors are equal within a given tolerance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="214" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="214" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a3caff939907e085c41fe8f49b6f73e8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" kindref="member">Scalar</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; Self::is_vector &amp;&amp;(<ref refid="class_g_q_c_p_1_1_matrix_1a6ecf8ac009c539043cf3a9c49cd7c684" kindref="member">Rows</ref>==3), Z &gt;</type>
        <definition>enable_if_t&lt;Self::is_vector &amp;&amp; (Rows == 3), Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::operator()</definition>
        <argsstring>(const CartesianDirection direction) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1ac4c016a1668ae66892e5b4d8846613e8" kindref="member">CartesianDirection</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>the Cartesian direction (x, y, or z)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value in the vector that corresponds to the given direction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="274" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a3079a6b39d8762808e23b1c09c86459e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" kindref="member">Scalar</ref>&amp;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; Self::is_vector &amp;&amp;(<ref refid="class_g_q_c_p_1_1_matrix_1a6ecf8ac009c539043cf3a9c49cd7c684" kindref="member">Rows</ref>==3), Z &gt;</type>
        <definition>enable_if_t&lt;Self::is_vector &amp;&amp; (Rows == 3), Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::operator()</definition>
        <argsstring>(const CartesianDirection direction)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1ac4c016a1668ae66892e5b4d8846613e8" kindref="member">CartesianDirection</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>the Cartesian direction (x, y, or z)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a modifiable value in the vector that corresponds to the given direction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="286" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="286" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a947bdbdcb3639ef34328379d6ac44efc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_matrix_1a6d1e1e6a379620ae791c3ab385580e40" kindref="member">Self</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; Self::is_matrix, Z &gt;</type>
        <definition>enable_if_t&lt;Self::is_matrix, Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::calculateMinor</definition>
        <argsstring>(size_t i, size_t j) const</argsstring>
        <name>calculateMinor</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index (starting from 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index (starting from 0)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the i-j minor (i.e. delete the i-th row and j-th column) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="307" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="307" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a4ab539a046eb6f9b53409d6e891a0d41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_g_q_c_p_1_1_matrix_1aee293d22d945960b87ac42b0b36fe9ec" kindref="member">Base</ref> &amp;</type>
        <definition>const Base&amp; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::Eigen</definition>
        <argsstring>() const</argsstring>
        <name>Eigen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>This as a const <ref refid="namespace_eigen" kindref="compound">Eigen</ref> base. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="320" column="16" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a0e55d5edef5e39cb143c75574f8d2ce3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_matrix_1aee293d22d945960b87ac42b0b36fe9ec" kindref="member">Base</ref> &amp;</type>
        <definition>Base&amp; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::Eigen</definition>
        <argsstring>()</argsstring>
        <name>Eigen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>This as a non-const <ref refid="namespace_eigen" kindref="compound">Eigen</ref> base. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="325" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a643652b7fcd93870c6eeee96b106a7bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::isPositiveSemiDefinite</definition>
        <argsstring>(const double threshold=-1.0e-5) const</argsstring>
        <name>isPositiveSemiDefinite</name>
        <param>
          <type>const double</type>
          <declname>threshold</declname>
          <defval>-1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The threshold on which the lowest eigenvalue is judged.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean that states whether or not the matrix is positive semi-definite, i.e. has no strictly negative eigenvalues. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="332" column="16" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="332" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1aacdf6a9b11a624ae51b4e69b1380d623" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt;<ref refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_matrix_1a6ecf8ac009c539043cf3a9c49cd7c684" kindref="member">Rows</ref>, 1&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; Self::is_matrix, Z &gt;</type>
        <definition>enable_if_t&lt;Self::is_matrix, Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::pairWiseReduced</definition>
        <argsstring>(const size_t start_i=0, size_t start_j=0) const</argsstring>
        <name>pairWiseReduced</name>
        <param>
          <type>const size_t</type>
          <declname>start_i</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>start_j</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index at which the rows should start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_j</parametername>
</parameternamelist>
<parameterdescription>
<para>the index at which the columns should start</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this matrix as a vector in a column-major storage, i.e. a pair-wise reduced form of this matrix. The elements of the matrix are put into the vector such that v(m) = M(i,j)</para>
</simplesect>
in which m is calculated from i and j in a column-major way </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="362" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="362" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a2d1866393b114f7cc8af355efca26ecc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; Self::is_matrix, Z &gt;</type>
        <definition>enable_if_t&lt;Self::is_matrix, Z&gt; GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::print</definition>
        <argsstring>(std::ostream &amp;output_stream=std::cout) const</argsstring>
        <name>print</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output_stream</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print the contents of a this to an output filestream</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output_stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the stream used for outputting </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="387" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="387" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1abef9f57236063712c2db15f9c85d03a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::removeColumn</definition>
        <argsstring>(const size_t i)</argsstring>
        <name>removeColumn</name>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove the i-th column of this matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the column that should be removed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Implementation adapted from (<ulink url="https://stackoverflow.com/a/46303314">https://stackoverflow.com/a/46303314</ulink>), while waiting for <ref refid="namespace_eigen" kindref="compound">Eigen</ref>&apos;s 3.4 release. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="404" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="404" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a1f7cadaa478ca049d032e3efcd68a251" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::removeColumns</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;column_indices)</argsstring>
        <name>removeColumns</name>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove the columns at the given indices.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>the indices of the columns that should be removed, in ascending order </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="423" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="423" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a78dabf4d5db685de94ba0620ee1acb07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::removeRow</definition>
        <argsstring>(const size_t i)</argsstring>
        <name>removeRow</name>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove the i-th row of this matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the row that should be removed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Implementation adapted from (<ulink url="https://stackoverflow.com/a/46303314">https://stackoverflow.com/a/46303314</ulink>), while waiting for <ref refid="namespace_eigen" kindref="compound">Eigen</ref>&apos;s 3.4 release. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="440" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="440" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_matrix_1a5583011d897d7571b1dedef5007301e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;::removeRows</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;row_indices)</argsstring>
        <name>removeRows</name>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>row_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove the rows at the given indices.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>the indices of the columns that should be removed, in ascending order </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="459" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="459" bodyend="466"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An extension of the Eigen::Matrix class, with extra operations</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>the scalar representation type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Rows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows (int or Dynamic) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns (int or Dynamic)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
We have decided to inherit from Eigen::Matrix, because we will use different hierarchies: see also: <ulink url="https://eigen.tuxfamily.org/dox-devel/TopicCustomizing_InheritingMatrix.html">https://eigen.tuxfamily.org/dox-devel/TopicCustomizing_InheritingMatrix.html</ulink> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8">
        <label>Simple1DM&lt; _Scalar, Orbital1DM&lt; _Scalar &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple1_d_m"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>GQCP::HoppingMatrix&lt; Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_hopping_matrix"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>Simple1DM&lt; _Scalar, SpinDensity1DM&lt; _Scalar &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple1_d_m"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>GQCP::HoppingMatrix&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_hopping_matrix"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>SquareMatrix&lt; Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_square_matrix"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>Simple1DM&lt; _Scalar, G1DM&lt; _Scalar &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple1_d_m"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>GQCP::Orbital1DM&lt; double &gt;</label>
        <link refid="class_g_q_c_p_1_1_orbital1_d_m"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>GQCP::SpinResolved1DMComponent&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_spin_resolved1_d_m_component"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>GQCP::G1DM&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_g1_d_m"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>SquareMatrix&lt; double &gt;</label>
        <link refid="class_g_q_c_p_1_1_square_matrix"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;</label>
        <link refid="class_g_q_c_p_1_1_matrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>GQCP::Simple1DM&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple1_d_m"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>Simple1DM&lt; _Scalar, SpinResolved1DMComponent&lt; _Scalar &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple1_d_m"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>GQCP::Simple1DM&lt; double, Orbital1DM&lt; double &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple1_d_m"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Eigen::Matrix&lt; double, Dynamic, Dynamic &gt;</label>
      </node>
      <node id="9">
        <label>GQCP::Orbital1DM&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_orbital1_d_m"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>GQCP::SquareMatrix&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_square_matrix"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>GQCP::SpinDensity1DM&lt; _Scalar &gt;</label>
        <link refid="class_g_q_c_p_1_1_spin_density1_d_m"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>GQCP::Matrix&lt; _Scalar, _Rows, _Cols &gt;</label>
        <link refid="class_g_q_c_p_1_1_matrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Eigen::Matrix&lt; double, Dynamic, Dynamic &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="45" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="46" bodyend="467"/>
    <listofallmembers>
      <member refid="class_g_q_c_p_1_1_matrix_1a931ab808381a0ad8eedbc5f2f123651d" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>areEqualEigenvaluesAs</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1aee293d22d945960b87ac42b0b36fe9ec" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>Base</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a947bdbdcb3639ef34328379d6ac44efc" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>calculateMinor</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1ab2b55a62636aba92729ecdf6a195200e" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>Cols</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a4ab539a046eb6f9b53409d6e891a0d41" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>Eigen</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a0e55d5edef5e39cb143c75574f8d2ce3" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>Eigen</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a6153bff8107862438160220961ed89ce" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>FromColumnMajorVector</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1ae98c3bb26e7fed523adaf0a32533ac65" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>FromFile</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a4eb0f430ff61453545937182a00e3375" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>FromFile</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a8e56d9f13a050d49f57cfeeabfb48e3a" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>FromRowMajorVector</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a576cfb262eb965a0b49f4e679cf076c3" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>hasEqualSetsOfEigenvectorsAs</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a61fe91392f3ea29d11eb0e631df144ac" prot="private" virt="non-virtual"><scope>GQCP::Matrix</scope><name>is_matrix</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1af82daae42137d5ee10fa6c03a75605f4" prot="private" virt="non-virtual"><scope>GQCP::Matrix</scope><name>is_vector</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a5611f1d276314cdc5ba20df00a01dfe9" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>isEqualEigenvectorAs</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a643652b7fcd93870c6eeee96b106a7bc" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>isPositiveSemiDefinite</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a3caff939907e085c41fe8f49b6f73e8b" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>operator()</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a3079a6b39d8762808e23b1c09c86459e" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>operator()</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1aacdf6a9b11a624ae51b4e69b1380d623" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>pairWiseReduced</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a2d1866393b114f7cc8af355efca26ecc" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>print</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1abef9f57236063712c2db15f9c85d03a8" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>removeColumn</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a1f7cadaa478ca049d032e3efcd68a251" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>removeColumns</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a78dabf4d5db685de94ba0620ee1acb07" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>removeRow</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a5583011d897d7571b1dedef5007301e1" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>removeRows</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a6ecf8ac009c539043cf3a9c49cd7c684" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>Rows</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a820960c1c3ad2c124d6be1ccd0eec021" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>Scalar</name></member>
      <member refid="class_g_q_c_p_1_1_matrix_1a6d1e1e6a379620ae791c3ab385580e40" prot="public" virt="non-virtual"><scope>GQCP::Matrix</scope><name>Self</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
