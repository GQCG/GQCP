<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_evaluable_linear_combination_8hpp" kind="file" language="C++">
    <compoundname>EvaluableLinearCombination.hpp</compoundname>
    <includes refid="_function_8hpp" local="yes">Mathematical/Functions/Function.hpp</includes>
    <includes refid="_vector_space_arithmetic_8hpp" local="yes">Mathematical/Functions/VectorSpaceArithmetic.hpp</includes>
    <includes refid="aliases_8hpp" local="yes">Utilities/aliases.hpp</includes>
    <includes local="no">boost/format.hpp</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">Eigen/Dense</includes>
    <includedby refid="gqcp_8hpp" local="yes">/__w/GQCP/GQCP/gqcp/include/gqcp.hpp</includedby>
    <includedby refid="_g_t_o_shell_8hpp" local="yes">/__w/GQCP/GQCP/gqcp/include/Basis/ScalarBasis/GTOShell.hpp</includedby>
    <includedby refid="_current_density_matrix_element_8hpp" local="yes">/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/CurrentDensityMatrixElement.hpp</includedby>
    <includedby refid="_spinor_8hpp" local="yes">/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/Spinor.hpp</includedby>
    <includedby refid="_cartesian_g_t_o_8hpp" local="yes">/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/CartesianGTO.hpp</includedby>
    <includedby refid="_evaluable_simple_s_q_one_electron_operator_8hpp" local="yes">/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableSimpleSQOneElectronOperator.hpp</includedby>
    <incdepgraph>
      <node id="10">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="7">
        <label>boost/format.hpp</label>
      </node>
      <node id="2">
        <label>Mathematical/Functions/Function.hpp</label>
        <link refid="_function_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Utilities/CRTP.hpp</label>
        <link refid="_c_r_t_p_8hpp"/>
      </node>
      <node id="1">
        <label>/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp</label>
        <link refid="_evaluable_linear_combination_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Eigen/Dense</label>
      </node>
      <node id="4">
        <label>Utilities/type_traits.hpp</label>
        <link refid="type__traits_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="3">
        <label>Utilities/aliases.hpp</label>
        <link refid="aliases_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>type_traits</label>
      </node>
      <node id="8">
        <label>Mathematical/Functions/VectorSpaceArithmetic.hpp</label>
        <link refid="_vector_space_arithmetic_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="72">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/USpinOrbitalBasisComponent.hpp</label>
        <link refid="_u_spin_orbital_basis_component_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/RHF/RHFFockMatrixCalculation.hpp</label>
        <link refid="_r_h_f_fock_matrix_calculation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/RHF/RHF.hpp</label>
        <link refid="_q_c_method_2_h_f_2_r_h_f_2_r_h_f_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/UHF/UHFFockMatrixDiagonalization.hpp</label>
        <link refid="_u_h_f_fock_matrix_diagonalization_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>/__w/GQCP/GQCP/gqcp/src/QCMethod/OrbitalOptimization/Localization/ERNewtonLocalizer.cpp</label>
        <link refid="_e_r_newton_localizer_8cpp"/>
      </node>
      <node id="30">
        <label>/__w/GQCP/GQCP/gqcp/src/QCModel/Geminals/APIGGeminalCoefficients.cpp</label>
        <link refid="_a_p_i_g_geminal_coefficients_8cpp"/>
      </node>
      <node id="106">
        <label>/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableGSQOneElectronOperator.hpp</label>
        <link refid="_evaluable_g_s_q_one_electron_operator_8hpp"/>
      </node>
      <node id="67">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Primitive/PrimitiveNuclearAttractionIntegralEngine.hpp</label>
        <link refid="_primitive_nuclear_attraction_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/Geminals/AP1roGJacobiOrbitalOptimizer.hpp</label>
        <link refid="_a_p1ro_g_jacobi_orbital_optimizer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/UHF/UHFErrorCalculation.hpp</label>
        <link refid="_u_h_f_error_calculation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/UHF/UHFFockMatrixDIIS.hpp</label>
        <link refid="_u_h_f_fock_matrix_d_i_i_s_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibintTwoElectronIntegralEngine.hpp</label>
        <link refid="_libint_two_electron_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/CartesianGTO.hpp</label>
        <link refid="_cartesian_g_t_o_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/UHF/UHF.hpp</label>
        <link refid="_q_c_method_2_h_f_2_u_h_f_2_u_h_f_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp</label>
        <link refid="_libcint_interfacer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/RHF/RHFSCFSolver.hpp</label>
        <link refid="_r_h_f_s_c_f_solver_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp</label>
        <link refid="_g_spinor_basis_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Primitive/FunctionalTwoElectronPrimitiveIntegralEngine.hpp</label>
        <link refid="_functional_two_electron_primitive_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableRSQOneElectronOperator.hpp</label>
        <link refid="_evaluable_r_s_q_one_electron_operator_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp</label>
        <link refid="_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>/__w/GQCP/GQCP/gqcp/src/QCMethod/OrbitalOptimization/JacobiOrbitalOptimizer.cpp</label>
        <link refid="_jacobi_orbital_optimizer_8cpp"/>
      </node>
      <node id="82">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/RHF/RHFDensityMatrixDamper.hpp</label>
        <link refid="_r_h_f_density_matrix_damper_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/SimpleSpinOrbitalBasis.hpp</label>
        <link refid="_simple_spin_orbital_basis_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/TwoElectronIntegralEngine.hpp</label>
        <link refid="_two_electron_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/OrbitalOptimization/Localization/ERNewtonLocalizer.hpp</label>
        <link refid="_e_r_newton_localizer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>/__w/GQCP/GQCP/gqcp/src/Basis/ScalarBasis/GTOShell.cpp</label>
        <link refid="_g_t_o_shell_8cpp"/>
      </node>
      <node id="6">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralCalculator.hpp</label>
        <link refid="_integral_calculator_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>/__w/GQCP/GQCP/gqcp/include/QCModel/HF/RHF.hpp</label>
        <link refid="_q_c_model_2_h_f_2_r_h_f_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Transformations/transform.hpp</label>
        <link refid="transform_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/RHF/RHFDensityMatrixCalculation.hpp</label>
        <link refid="_r_h_f_density_matrix_calculation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>/__w/GQCP/GQCP/gqcp/src/Mathematical/Functions/CartesianGTO.cpp</label>
        <link refid="_cartesian_g_t_o_8cpp"/>
      </node>
      <node id="70">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/ScalarBasis/ScalarBasis.hpp</label>
        <link refid="_scalar_basis_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>/__w/GQCP/GQCP/gqcp/src/QCModel/Geminals/vAP1roG.cpp</label>
        <link refid="v_a_p1ro_g_8cpp"/>
      </node>
      <node id="84">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/RHF/RHFErrorCalculation.hpp</label>
        <link refid="_r_h_f_error_calculation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/Geminals/AP1roGLagrangianNewtonOrbitalOptimizer.hpp</label>
        <link refid="_a_p1ro_g_lagrangian_newton_orbital_optimizer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>/__w/GQCP/GQCP/gqcp/src/Basis/ScalarBasis/LondonGTOShell.cpp</label>
        <link refid="_london_g_t_o_shell_8cpp"/>
      </node>
      <node id="56">
        <label>/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Interfaces/LibintInterfacer.cpp</label>
        <link refid="_libint_interfacer_8cpp"/>
      </node>
      <node id="65">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Primitive/PrimitiveElectronicQuadrupoleIntegralEngine.hpp</label>
        <link refid="_primitive_electronic_quadrupole_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Primitive/PrimitiveElectronicDipoleIntegralEngine.hpp</label>
        <link refid="_primitive_electronic_dipole_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp</label>
        <link refid="_evaluable_linear_combination_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp</label>
        <link refid="_r_spin_orbital_basis_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/UHF/UHFFockMatrixCalculation.hpp</label>
        <link refid="_u_h_f_fock_matrix_calculation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/UHF/UHFSCFSolver.hpp</label>
        <link refid="_u_h_f_s_c_f_solver_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>/__w/GQCP/GQCP/gqcp/src/QCMethod/OrbitalOptimization/Localization/ERJacobiLocalizer.cpp</label>
        <link refid="_e_r_jacobi_localizer_8cpp"/>
      </node>
      <node id="25">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/Geminals/vAP1roG.hpp</label>
        <link refid="_q_c_method_2_geminals_2v_a_p1ro_g_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/UHF/UHFElectronicEnergyCalculation.hpp</label>
        <link refid="_u_h_f_electronic_energy_calculation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>/__w/GQCP/GQCP/gqcp/include/QCModel/HF/UHF.hpp</label>
        <link refid="_q_c_model_2_h_f_2_u_h_f_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>/__w/GQCP/GQCP/gqcp/src/QCMethod/Geminals/AP1roGLagrangianNewtonOrbitalOptimizer.cpp</label>
        <link refid="_a_p1ro_g_lagrangian_newton_orbital_optimizer_8cpp"/>
      </node>
      <node id="43">
        <label>/__w/GQCP/GQCP/gqcp/src/QCMethod/OrbitalOptimization/QCMethodNewtonOrbitalOptimizer.cpp</label>
        <link refid="_q_c_method_newton_orbital_optimizer_8cpp"/>
      </node>
      <node id="28">
        <label>/__w/GQCP/GQCP/gqcp/src/QCModel/Geminals/AP1roGGeminalCoefficients.cpp</label>
        <link refid="_a_p1ro_g_geminal_coefficients_8cpp"/>
      </node>
      <node id="102">
        <label>/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/LondonCartesianGTO.hpp</label>
        <link refid="_london_cartesian_g_t_o_8hpp"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/__w/GQCP/GQCP/gqcp/include/gqcp.hpp</label>
        <link refid="gqcp_8hpp"/>
      </node>
      <node id="68">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Primitive/PrimitiveOverlapIntegralEngine.hpp</label>
        <link refid="_primitive_overlap_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>/__w/GQCP/GQCP/gqcp/src/QCMethod/OrbitalOptimization/BaseOrbitalOptimizer.cpp</label>
        <link refid="_base_orbital_optimizer_8cpp"/>
      </node>
      <node id="87">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/UHF/UHFSCFEnvironment.hpp</label>
        <link refid="_u_h_f_s_c_f_environment_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/Geminals/PSEnvironment.hpp</label>
        <link refid="_p_s_environment_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Primitive/PrimitiveLinearMomentumIntegralEngine.hpp</label>
        <link refid="_primitive_linear_momentum_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Primitive/PrimitiveCanonicalKineticEnergyIntegralEngine.hpp</label>
        <link refid="_primitive_canonical_kinetic_energy_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>/__w/GQCP/GQCP/gqcp/include/QCModel/Geminals/AP1roG.hpp</label>
        <link refid="_q_c_model_2_geminals_2_a_p1ro_g_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibintOneElectronIntegralBuffer.hpp</label>
        <link refid="_libint_one_electron_integral_buffer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Primitive/PrimitiveCoulombRepulsionIntegralEngine.hpp</label>
        <link refid="_primitive_coulomb_repulsion_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/OrbitalOptimization/JacobiOrbitalOptimizer.hpp</label>
        <link refid="_jacobi_orbital_optimizer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>/__w/GQCP/GQCP/gqcp/src/Processing/Properties/RHFElectricalResponseSolver.cpp</label>
        <link refid="_r_h_f_electrical_response_solver_8cpp"/>
      </node>
      <node id="9">
        <label>/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp</label>
        <link refid="_linear_expansion_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintOneElectronIntegralEngine.hpp</label>
        <link refid="_libcint_one_electron_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>/__w/GQCP/GQCP/gqcp/src/QCModel/Geminals/AP1roG.cpp</label>
        <link refid="_a_p1ro_g_8cpp"/>
      </node>
      <node id="99">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/CurrentDensityMatrixElement.hpp</label>
        <link refid="_current_density_matrix_element_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/OrbitalOptimization/BaseOrbitalOptimizer.hpp</label>
        <link refid="_base_orbital_optimizer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>/__w/GQCP/GQCP/gqcp/src/Processing/Properties/vAP1roGElectricalResponseSolver.cpp</label>
        <link refid="v_a_p1ro_g_electrical_response_solver_8cpp"/>
      </node>
      <node id="31">
        <label>/__w/GQCP/GQCP/gqcp/include/QCModel/Geminals/GeminalCoefficientsInterface.hpp</label>
        <link refid="_geminal_coefficients_interface_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Interfaces/LibcintInterfacer.cpp</label>
        <link refid="_libcint_interfacer_8cpp"/>
      </node>
      <node id="73">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/ScalarBasis/LondonGTOShell.hpp</label>
        <link refid="_london_g_t_o_shell_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/__w/GQCP/GQCP/gqcp/include/Processing/Properties/DysonOrbital.hpp</label>
        <link refid="_dyson_orbital_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>/__w/GQCP/GQCP/gqcp/src/Mathematical/Functions/LondonCartesianGTO.cpp</label>
        <link refid="_london_cartesian_g_t_o_8cpp"/>
      </node>
      <node id="33">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/USpinOrbitalBasis.hpp</label>
        <link refid="_u_spin_orbital_basis_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>/__w/GQCP/GQCP/gqcp/src/QCModel/Geminals/GeminalCoefficientsInterface.cpp</label>
        <link refid="_geminal_coefficients_interface_8cpp"/>
      </node>
      <node id="105">
        <label>/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableSimpleSQOneElectronOperator.hpp</label>
        <link refid="_evaluable_simple_s_q_one_electron_operator_8hpp"/>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>/__w/GQCP/GQCP/gqcp/src/QCMethod/Geminals/AP1roGJacobiOrbitalOptimizer.cpp</label>
        <link refid="_a_p1ro_g_jacobi_orbital_optimizer_8cpp"/>
      </node>
      <node id="96">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/RMP2/RMP2.hpp</label>
        <link refid="_r_m_p2_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperatorComponent.hpp</label>
        <link refid="_evaluable_u_s_q_one_electron_operator_component_8hpp"/>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>/__w/GQCP/GQCP/gqcp/include/QCModel/Geminals/vAP1roG.hpp</label>
        <link refid="_q_c_model_2_geminals_2v_a_p1ro_g_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>/__w/GQCP/GQCP/gqcp/include/Processing/Properties/vAP1roGElectricalResponseSolver.hpp</label>
        <link refid="v_a_p1ro_g_electrical_response_solver_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibintInterfacer.hpp</label>
        <link refid="_libint_interfacer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintTwoElectronIntegralEngine.hpp</label>
        <link refid="_libcint_two_electron_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/RHF/DiagonalRHFFockMatrixObjective.hpp</label>
        <link refid="_diagonal_r_h_f_fock_matrix_objective_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/RHF/RHFFockMatrixDIIS.hpp</label>
        <link refid="_r_h_f_fock_matrix_d_i_i_s_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/__w/GQCP/GQCP/gqcp/include/Processing/Properties/properties.hpp</label>
        <link refid="properties_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/CI/CI.hpp</label>
        <link refid="_c_i_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/__w/GQCP/GQCP/gqcp/src/Processing/Properties/properties.cpp</label>
        <link refid="properties_8cpp"/>
      </node>
      <node id="59">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Primitive/FunctionalOneElectronPrimitiveIntegralEngine.hpp</label>
        <link refid="_functional_one_electron_primitive_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Primitive/PrimitiveAngularMomentumIntegralEngine.hpp</label>
        <link refid="_primitive_angular_momentum_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/OrbitalOptimization/Localization/ERJacobiLocalizer.hpp</label>
        <link refid="_e_r_jacobi_localizer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/ScalarBasis/ShellSet.hpp</label>
        <link refid="_shell_set_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/__w/GQCP/GQCP/gqcp/include/QCModel/Geminals/AP1roGGeminalCoefficients.hpp</label>
        <link refid="_a_p1ro_g_geminal_coefficients_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/ScalarBasis/GTOBasisSet.hpp</label>
        <link refid="_g_t_o_basis_set_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/OneElectronIntegralEngine.hpp</label>
        <link refid="_one_electron_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/RHF/RHFElectronicEnergyCalculation.hpp</label>
        <link refid="_r_h_f_electronic_energy_calculation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibintOneElectronIntegralEngine.hpp</label>
        <link refid="_libint_one_electron_integral_engine_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp</label>
        <link refid="_integral_engine_8cpp"/>
      </node>
      <node id="3">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/ScalarBasis/GTOShell.hpp</label>
        <link refid="_g_t_o_shell_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/OrbitalOptimization/QCMethodNewtonOrbitalOptimizer.hpp</label>
        <link refid="_q_c_method_newton_orbital_optimizer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>/__w/GQCP/GQCP/gqcp/include/QCModel/Geminals/APIGGeminalCoefficients.hpp</label>
        <link refid="_a_p_i_g_geminal_coefficients_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>/__w/GQCP/GQCP/gqcp/src/QCMethod/OrbitalOptimization/NewtonOrbitalOptimizer.cpp</label>
        <link refid="_newton_orbital_optimizer_8cpp"/>
      </node>
      <node id="41">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/OrbitalOptimization/NewtonOrbitalOptimizer.hpp</label>
        <link refid="_newton_orbital_optimizer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/HF/UHF/UHFDensityMatrixCalculation.hpp</label>
        <link refid="_u_h_f_density_matrix_calculation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/Spinor.hpp</label>
        <link refid="_spinor_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>/__w/GQCP/GQCP/gqcp/src/Basis/ScalarBasis/GTOBasisSet.cpp</label>
        <link refid="_g_t_o_basis_set_8cpp"/>
      </node>
      <node id="109">
        <label>/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperator.hpp</label>
        <link refid="_evaluable_u_s_q_one_electron_operator_8hpp"/>
      </node>
      <node id="20">
        <label>/__w/GQCP/GQCP/gqcp/include/QCMethod/Geminals/AP1roG.hpp</label>
        <link refid="_q_c_method_2_geminals_2_a_p1ro_g_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_g_q_c_p_1_1_evaluable_linear_combination" prot="public">GQCP::EvaluableLinearCombination</innerclass>
    <innerclass refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4" prot="public">Eigen::NumTraits&lt; GQCP::EvaluableLinearCombination&lt; Coefficient, FunctionType &gt; &gt;</innerclass>
    <innerclass refid="struct_eigen_1_1_scalar_binary_op_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coeff48761ced5368c95f2a826daa428cd26" prot="public">Eigen::ScalarBinaryOpTraits&lt; GQCP::EvaluableLinearCombination&lt; Coefficient, FunctionType &gt;, Coefficient, Eigen::internal::scalar_product_op&lt; GQCP::EvaluableLinearCombination&lt; Coefficient, FunctionType &gt;, Coefficient &gt; &gt;</innerclass>
    <innerclass refid="struct_eigen_1_1_scalar_binary_op_traits_3_01_coefficient_00_01_g_q_c_p_1_1_evaluable_linear_combf529400b11b6eb385709cf8e9d0cb16" prot="public">Eigen::ScalarBinaryOpTraits&lt; Coefficient, GQCP::EvaluableLinearCombination&lt; Coefficient, FunctionType &gt;, Eigen::internal::scalar_product_op&lt; Coefficient, GQCP::EvaluableLinearCombination&lt; Coefficient, FunctionType &gt; &gt; &gt;</innerclass>
    <innernamespace refid="namespace_g_q_c_p">GQCP</innernamespace>
    <innernamespace refid="namespace_eigen">Eigen</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>GQCG-GQCP.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2017-2020<sp/><sp/>the<sp/>GQCG<sp/>developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GQCG-GQCP<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GQCG-GQCP<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>GQCG-GQCP.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_function_8hpp" kindref="compound">Mathematical/Functions/Function.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_vector_space_arithmetic_8hpp" kindref="compound">Mathematical/Functions/VectorSpaceArithmetic.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="aliases_8hpp" kindref="compound">Utilities/aliases.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/format.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_g_q_c_p" kindref="compound">GQCP</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Coefficient,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_FunctionType&gt;</highlight></codeline>
<codeline lineno="43" refid="class_g_q_c_p_1_1_evaluable_linear_combination" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_function" kindref="compound">Function</ref>&lt;sum_t&lt;_Coefficient,<sp/>typename<sp/>_FunctionType::OutputType&gt;,<sp/>typename<sp/>_FunctionType::InputType&gt;,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_vector_space_arithmetic" kindref="compound">VectorSpaceArithmetic</ref>&lt;EvaluableLinearCombination&lt;_Coefficient,<sp/>_FunctionType&gt;,<sp/>_Coefficient&gt;<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>of<sp/>a<sp/>coefficient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref><sp/>=<sp/>_Coefficient;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>of<sp/>the<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref><sp/>=<sp/>_FunctionType;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>type<sp/>of<sp/>the<sp/>`operator()`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6b9cf06ae3c935c0d6b1c1b7d28110d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6b9cf06ae3c935c0d6b1c1b7d28110d2" kindref="member">OutputType</ref><sp/>=<sp/><ref refid="namespace_g_q_c_p_1ad8362e85425df3608c553719ea712652" kindref="member">sum_t&lt;Coefficient, typename FunctionType::OutputType&gt;</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>input<sp/>type<sp/>of<sp/>the<sp/>`operator()`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4c6f34edfb5e99f458713b17f83ee1b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4c6f34edfb5e99f458713b17f83ee1b8" kindref="member">InputType</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FunctionType::InputType;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static_assert(std::is_base_of&lt;Function&lt;OutputType,<sp/>InputType&gt;,<sp/>FunctionType&gt;::value,<sp/>&quot;EvaluableLinearCombination:<sp/>FunctionType<sp/>must<sp/>derive<sp/>from<sp/>`Function`.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>of<sp/>&apos;this&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4ca4e4e246d918d6a2b67e8cbc9381c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">Self</ref><sp/>=<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination&lt;Coefficient, FunctionType&gt;</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>coefficients<sp/>of<sp/>the<sp/>linear<sp/>combination.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1aefcf4dde90ef185404be60ac8444f02b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Coefficient&gt;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1aefcf4dde90ef185404be60ac8444f02b" kindref="member">m_coefficients</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>functions<sp/>of<sp/>the<sp/>linear<sp/>combination.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a0d23b4233a94a97d3db521801608b72e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;FunctionType&gt;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a0d23b4233a94a97d3db521801608b72e" kindref="member">m_functions</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>MARK:<sp/>Constructors</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a0529edb4777e200fb6240d838f34ebb5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a0529edb4777e200fb6240d838f34ebb5" kindref="member">EvaluableLinearCombination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Coefficient&gt;&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" kindref="member">coefficients</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FunctionType&gt;&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" kindref="member">functions</ref>)<sp/>:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1aefcf4dde90ef185404be60ac8444f02b" kindref="member">m_coefficients</ref><sp/>{<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" kindref="member">coefficients</ref>},</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a0d23b4233a94a97d3db521801608b72e" kindref="member">m_functions</ref><sp/>{<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" kindref="member">functions</ref>}<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" kindref="member">coefficients</ref>.size()<sp/>!=<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" kindref="member">functions</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;EvaluableLinearCombination(const<sp/>std::vector&lt;Coefficient&gt;&amp;,<sp/>const<sp/>std::vector&lt;FunctionType&gt;&amp;):<sp/>The<sp/>number<sp/>of<sp/>coefficients<sp/>and<sp/>functions<sp/>do<sp/>not<sp/>match.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a61234d87c74c9932c7bee6be4375701c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a61234d87c74c9932c7bee6be4375701c" kindref="member">EvaluableLinearCombination</ref>()<sp/>:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>(std::vector&lt;<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref>&gt;<sp/>{},<sp/>std::vector&lt;FunctionType&gt;<sp/>{})<sp/>{}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a01043ac2576fddd5dd42de1a7cf43d34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a01043ac2576fddd5dd42de1a7cf43d34" kindref="member">EvaluableLinearCombination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" kindref="member">coefficient</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref>&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">)<sp/>:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>(std::vector&lt;<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref>&gt;<sp/>{<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" kindref="member">coefficient</ref>},<sp/>std::vector&lt;FunctionType&gt;<sp/>{</highlight><highlight class="keyword">function</highlight><highlight class="normal">})<sp/>{}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ad8d1bbd7cf2085dd8f7198eb5f544382" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ad8d1bbd7cf2085dd8f7198eb5f544382" kindref="member">EvaluableLinearCombination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref>&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">)<sp/>:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>(<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref><sp/>{1.0},<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a7828486f63995ac4a08056071b7d5bba" kindref="member">function</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a2030546be9a5b3f205bc1c71bec4354f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a2030546be9a5b3f205bc1c71bec4354f" kindref="member">EvaluableLinearCombination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zero)<sp/>:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zero<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;EvaluableLinearCombination(const<sp/>int):<sp/>Can&apos;t<sp/>convert<sp/>a<sp/>non-zero<sp/>integer<sp/>to<sp/>a<sp/>&apos;zero&apos;<sp/>instance.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>MARK:<sp/>Vector<sp/>space<sp/>arithmetic</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ac0265148fa60434f4d32af7b176b028e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">Self</ref>&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ac0265148fa60434f4d32af7b176b028e" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">Self</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ad3141b0c9149295e77aa768e134a415f" kindref="member">append</ref>(rhs.<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1aefcf4dde90ef185404be60ac8444f02b" kindref="member">m_coefficients</ref>,<sp/>rhs.<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a0d23b4233a94a97d3db521801608b72e" kindref="member">m_functions</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae65974d7a658eaa2bc78e5b26f02f255" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">Self</ref>&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae65974d7a658eaa2bc78e5b26f02f255" kindref="member">operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref>&amp;<sp/>a)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(a)<sp/>&lt;<sp/>1.0e-16)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>multiplication<sp/>by<sp/>zero<sp/>returns<sp/>a<sp/>&apos;zero<sp/>vector&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;m_coefficients<sp/>=<sp/>std::vector&lt;Coefficient&gt;<sp/>{};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;m_functions<sp/>=<sp/>std::vector&lt;FunctionType&gt;<sp/>{};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_g_q_c_p_1afed89df1a3e5cf5d125edc3e66e81f06" kindref="member">std::transform</ref>(this-&gt;m_coefficients.begin(),<sp/>this-&gt;m_coefficients.end(),</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;m_coefficients.begin(),<sp/>[a](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref>&amp;<sp/>C)<sp/>{<sp/>return<sp/>C<sp/>*<sp/>a;<sp/>});</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>MARK:<sp/>General<sp/>information</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a35ba5217282e8340992f5bedba5141ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a35ba5217282e8340992f5bedba5141ff" kindref="member">description</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a35ba5217282e8340992f5bedba5141ff" kindref="member">description</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1af69af51a2d4f1912f4d980f6cb28d266" kindref="member">length</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Provide<sp/>the<sp/>coefficient<sp/>and<sp/>the<sp/>function&apos;s<sp/>description.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a35ba5217282e8340992f5bedba5141ff" kindref="member">description</ref><sp/>+=<sp/>(boost::format(</highlight><highlight class="stringliteral">&quot;(%|.3f|)<sp/>%s&quot;</highlight><highlight class="normal">)<sp/>%<sp/>this-&gt;<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" kindref="member">coefficient</ref>(i)<sp/>%<sp/>this-&gt;</highlight><highlight class="keyword">function</highlight><highlight class="normal">(i).<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a35ba5217282e8340992f5bedba5141ff" kindref="member">description</ref>()).str();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>&apos;+&apos;<sp/>when<sp/>we&apos;re<sp/>not<sp/>at<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>this-&gt;<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1af69af51a2d4f1912f4d980f6cb28d266" kindref="member">length</ref>()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a35ba5217282e8340992f5bedba5141ff" kindref="member">description</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a35ba5217282e8340992f5bedba5141ff" kindref="member">description</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1af69af51a2d4f1912f4d980f6cb28d266" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1af69af51a2d4f1912f4d980f6cb28d266" kindref="member">length</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;m_coefficients.size();<sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>MARK:<sp/>Access</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref>&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" kindref="member">coefficient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;m_coefficients[i];<sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Coefficient&gt;&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" kindref="member">coefficients</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1aefcf4dde90ef185404be60ac8444f02b" kindref="member">m_coefficients</ref>;<sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a7828486f63995ac4a08056071b7d5bba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref>&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;m_functions[i];<sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FunctionType&gt;&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" kindref="member">functions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a0d23b4233a94a97d3db521801608b72e" kindref="member">m_functions</ref>;<sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>MARK:<sp/>Conforming<sp/>to<sp/>`Function`</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a5c09be16f8ced29d9243f6da9877fffe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6b9cf06ae3c935c0d6b1c1b7d28110d2" kindref="member">OutputType</ref><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a5c09be16f8ced29d9243f6da9877fffe" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4c6f34edfb5e99f458713b17f83ee1b8" kindref="member">InputType</ref>&amp;<sp/>in)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluate<sp/>every<sp/>function<sp/>of<sp/>the<sp/>linear<sp/>combination.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6b9cf06ae3c935c0d6b1c1b7d28110d2" kindref="member">OutputType</ref><sp/>out<sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>initialization<sp/>of<sp/>the<sp/>`OutputType`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>this-&gt;<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1af69af51a2d4f1912f4d980f6cb28d266" kindref="member">length</ref>();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>this-&gt;m_coefficients[i]<sp/>*<sp/>this-&gt;m_functions[i].operator()(in);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>MARK:<sp/>Comparison<sp/>operators</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1aca009eb05e42ec82f9621d11a3a931bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1aca009eb05e42ec82f9621d11a3a931bf" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">Self</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;m_coefficients<sp/>==<sp/>other.<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1aefcf4dde90ef185404be60ac8444f02b" kindref="member">m_coefficients</ref>)<sp/>&amp;&amp;<sp/>(this-&gt;m_functions<sp/>==<sp/>other.<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a0d23b4233a94a97d3db521801608b72e" kindref="member">m_functions</ref>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>MARK:<sp/>Appending</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ad3141b0c9149295e77aa768e134a415f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ad3141b0c9149295e77aa768e134a415f" kindref="member">append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref>&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" kindref="member">coefficient</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref>&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;m_coefficients.push_back(<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" kindref="member">coefficient</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;m_functions.push_back(</highlight><highlight class="keyword">function</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a5fa37456db5398996bdfe66db554cf02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a5fa37456db5398996bdfe66db554cf02" kindref="member">appendWithThreshold</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref>&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" kindref="member">coefficient</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref>&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>1.0e-16)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>enlarge<sp/>the<sp/>linear<sp/>combination<sp/>for<sp/>sufficiently<sp/>large<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" kindref="member">coefficient</ref>)<sp/>&lt;<sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ad3141b0c9149295e77aa768e134a415f" kindref="member">append</ref>(coefficient,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a5c7bcb1c402887a0feab4e464c891a93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a5c7bcb1c402887a0feab4e464c891a93" kindref="member">append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Coefficient&gt;&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" kindref="member">coefficients</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FunctionType&gt;&amp;<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" kindref="member">functions</ref>)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" kindref="member">coefficients</ref>.size()<sp/>!=<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" kindref="member">functions</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;EvaluableLinearCombination::append(const<sp/>std::vector&lt;Coefficient&gt;&amp;,<sp/>const<sp/>std::vector&lt;FunctionType&gt;&amp;):<sp/>The<sp/>number<sp/>of<sp/>coefficients<sp/>and<sp/>functions<sp/>do<sp/>not<sp/>match.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;m_coefficients.insert(this-&gt;m_coefficients.end(),<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" kindref="member">coefficients</ref>.begin(),<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" kindref="member">coefficients</ref>.end());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;m_functions.insert(this-&gt;m_functions.end(),<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" kindref="member">functions</ref>.begin(),<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" kindref="member">functions</ref>.end());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal">};</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>GQCP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/><sp/>Make<sp/>GQCP::EvaluableLinearCombination&lt;FunctionType&gt;<sp/>an<sp/>Eigen<sp/>scalar<sp/>type.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="namespace_eigen" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_eigen" kindref="compound">Eigen</ref><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Coefficient,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FunctionType&gt;</highlight></codeline>
<codeline lineno="333" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NumTraits&lt;<ref refid="namespace_g_q_c_p" kindref="compound">GQCP</ref>::EvaluableLinearCombination&lt;Coefficient,<sp/>FunctionType&gt;&gt;:</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>NumTraits&lt;double&gt;<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>permits<sp/>to<sp/>get<sp/>the<sp/>epsilon,<sp/>dummy_precision,<sp/>lowest,<sp/>highest<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4_1add70e2489b29fb9fa93e3d5853e97692" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">Real</ref><sp/>=<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">GQCP::EvaluableLinearCombination&lt;Coefficient, FunctionType&gt;</ref>;</highlight></codeline>
<codeline lineno="337" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4_1af5fc8eeeae8398d9e5446789f6d2dbb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">NonInteger</ref><sp/>=<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">GQCP::EvaluableLinearCombination&lt;Coefficient, FunctionType&gt;</ref>;</highlight></codeline>
<codeline lineno="338" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4_1af091ce7b1a93d1ad1ebff07dd997bb70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">Nested</ref><sp/>=<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">GQCP::EvaluableLinearCombination&lt;Coefficient, FunctionType&gt;</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="341" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4_1a60334943fdad0b964be53b95945abbd0a6a2729769ce2fff77eb111857f90aca1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_g_q_c_p_1a3ce6a14846d6795ad08dda8abbf505bc" kindref="member">IsComplex</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="342" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4_1a60334943fdad0b964be53b95945abbd0a8fb54f83837fe45ce23beb7185b83435" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsInteger<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="343" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4_1a60334943fdad0b964be53b95945abbd0a838e1919edb2cf393781f468e27b487d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsSigned<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="344" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4_1a60334943fdad0b964be53b95945abbd0acae0eb795440bb6a9f26486f8b935558" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RequireInitialization<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="345" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4_1a60334943fdad0b964be53b95945abbd0a866b8bec3062d299b0268bc30a6addf7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadCost<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="346" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4_1a60334943fdad0b964be53b95945abbd0ad0c796900cb4e0f04032a96777eb8d35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddCost<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MulCost<sp/>=<sp/>1000<sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>put<sp/>something<sp/>big</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="struct_eigen_1_1_num_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coefficient_00_01_function_type_01_4_01_4_1a60334943fdad0b964be53b95945abbd0a5309a708d13b8db09fb8d01e68c08bf0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="349"><highlight class="normal">};</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>scalar<sp/>product<sp/>of<sp/>a<sp/>EvaluableLinearCombination&lt;Coefficient,<sp/>FunctionType&gt;<sp/>with<sp/>its<sp/>own<sp/>Coefficient<sp/>(both<sp/>sides).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Coefficient,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FunctionType&gt;</highlight></codeline>
<codeline lineno="355" refid="struct_eigen_1_1_scalar_binary_op_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coeff48761ced5368c95f2a826daa428cd26" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ScalarBinaryOpTraits&lt;<ref refid="namespace_g_q_c_p" kindref="compound">GQCP</ref>::EvaluableLinearCombination&lt;Coefficient,<sp/>FunctionType&gt;,<sp/>Coefficient,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::internal::scalar_product_op&lt;GQCP::EvaluableLinearCombination&lt;Coefficient,<sp/>FunctionType&gt;,<sp/>Coefficient&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="struct_eigen_1_1_scalar_binary_op_traits_3_01_g_q_c_p_1_1_evaluable_linear_combination_3_01_coeff48761ced5368c95f2a826daa428cd26_1a5a53a262e6141d1c07b136d51b8c763b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">ReturnType</ref><sp/>=<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">GQCP::EvaluableLinearCombination&lt;Coefficient, FunctionType&gt;</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">};</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Coefficient,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FunctionType&gt;</highlight></codeline>
<codeline lineno="362" refid="struct_eigen_1_1_scalar_binary_op_traits_3_01_coefficient_00_01_g_q_c_p_1_1_evaluable_linear_combf529400b11b6eb385709cf8e9d0cb16" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ScalarBinaryOpTraits&lt;Coefficient,<sp/><ref refid="namespace_g_q_c_p" kindref="compound">GQCP</ref>::EvaluableLinearCombination&lt;Coefficient,<sp/>FunctionType&gt;,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::internal::scalar_product_op&lt;Coefficient,<sp/>GQCP::EvaluableLinearCombination&lt;Coefficient,<sp/>FunctionType&gt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="struct_eigen_1_1_scalar_binary_op_traits_3_01_coefficient_00_01_g_q_c_p_1_1_evaluable_linear_combf529400b11b6eb385709cf8e9d0cb16_1a8d4b874ebd276d16e69ebc13a40919c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">ReturnType</ref><sp/>=<sp/><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">GQCP::EvaluableLinearCombination&lt;Coefficient, FunctionType&gt;</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">};</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Eigen</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp"/>
  </compounddef>
</doxygen>
