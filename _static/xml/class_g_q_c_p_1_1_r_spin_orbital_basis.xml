<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_g_q_c_p_1_1_r_spin_orbital_basis" kind="class" language="C++" prot="public">
    <compoundname>GQCP::RSpinOrbitalBasis</compoundname>
    <basecompoundref refid="class_g_q_c_p_1_1_simple_spin_orbital_basis" prot="public" virt="non-virtual">GQCP::SimpleSpinOrbitalBasis&lt; _ExpansionScalar, _Shell, RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</basecompoundref>
    <includes refid="_r_spin_orbital_basis_8hpp" local="no">RSpinOrbitalBasis.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename _ExpansionScalar</type>
      </param>
      <param>
        <type>typename _Shell</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" prot="public" static="no">
        <type>_ExpansionScalar</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::ExpansionScalar =  _ExpansionScalar</definition>
        <argsstring></argsstring>
        <name>ExpansionScalar</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::ExpansionScalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="65" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" prot="public" static="no">
        <type>_Shell</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::Shell =  _Shell</definition>
        <argsstring></argsstring>
        <name>Shell</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::Shell</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="68" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1aad32b0cc0dce8be836799d61e50cf500" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_simple_spinor_basis" kindref="compound">SimpleSpinorBasis</ref>&lt; _ExpansionScalar, <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis" kindref="compound">RSpinOrbitalBasis</ref>&lt; _ExpansionScalar, _Shell &gt; &gt;</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::BaseSpinorBasis =  SimpleSpinorBasis&lt;_ExpansionScalar, RSpinOrbitalBasis&lt;_ExpansionScalar, _Shell&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>BaseSpinorBasis</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::BaseSpinorBasis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="71" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a75c80392015198d949774257c5d1d84d" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_r_transformation" kindref="compound">RTransformation</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" kindref="member">ExpansionScalar</ref> &gt;</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::Transformation =  RTransformation&lt;ExpansionScalar&gt;</definition>
        <argsstring></argsstring>
        <name>Transformation</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::Transformation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="74" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1af95118cd66ddd598ec1c6b350e46c5c7" prot="public" static="no">
        <type>typename Shell::Primitive</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::Primitive =  typename Shell::Primitive</definition>
        <argsstring></argsstring>
        <name>Primitive</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::Primitive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="77" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1af80a4fe5fd969824042cc98025acb72e" prot="public" static="no">
        <type>typename Shell::BasisFunction</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::BasisFunction =  typename Shell::BasisFunction</definition>
        <argsstring></argsstring>
        <name>BasisFunction</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::BasisFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="80" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a955bb69cf128b0f8a942c7e727895f95" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" kindref="member">ExpansionScalar</ref>, <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1af80a4fe5fd969824042cc98025acb72e" kindref="member">BasisFunction</ref> &gt;</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::SpatialOrbital =  EvaluableLinearCombination&lt;ExpansionScalar, BasisFunction&gt;</definition>
        <argsstring></argsstring>
        <name>SpatialOrbital</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::SpatialOrbital</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="83" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a9f1c0c128d144924eb668f0464be3c85" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_function_product" kindref="compound">FunctionProduct</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a955bb69cf128b0f8a942c7e727895f95" kindref="member">SpatialOrbital</ref> &gt;</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::DensityDistribution =  FunctionProduct&lt;SpatialOrbital&gt;</definition>
        <argsstring></argsstring>
        <name>DensityDistribution</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::DensityDistribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="86" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a8f2e0fb8cc6b8813f12e64ca893272a9" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>&lt; double, <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1af95118cd66ddd598ec1c6b350e46c5c7" kindref="member">Primitive</ref> &gt;</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::PrimitiveDerivative =  EvaluableLinearCombination&lt;double, Primitive&gt;</definition>
        <argsstring></argsstring>
        <name>PrimitiveDerivative</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::PrimitiveDerivative</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="89" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a3921c7e49063e3206e1ae758934e6ebd" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>&lt; double, <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a8f2e0fb8cc6b8813f12e64ca893272a9" kindref="member">PrimitiveDerivative</ref> &gt;</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::BasisFunctionDerivative =  EvaluableLinearCombination&lt;double, PrimitiveDerivative&gt;</definition>
        <argsstring></argsstring>
        <name>BasisFunctionDerivative</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::BasisFunctionDerivative</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="92" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1ad9e21173bbfeb27450f602cd9df351ab" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" kindref="member">ExpansionScalar</ref>, <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a3921c7e49063e3206e1ae758934e6ebd" kindref="member">BasisFunctionDerivative</ref> &gt;</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::SpatialOrbitalDerivative =  EvaluableLinearCombination&lt;ExpansionScalar, BasisFunctionDerivative&gt;</definition>
        <argsstring></argsstring>
        <name>SpatialOrbitalDerivative</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::SpatialOrbitalDerivative</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="95" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1ab985c6702814ab6a01f5fd9aaaac9289" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>&lt; <ref refid="namespace_g_q_c_p_1a1ffc21109e62d09d3485c62e03677dfd" kindref="member">complex</ref>, <ref refid="class_g_q_c_p_1_1_function_product" kindref="compound">FunctionProduct</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a955bb69cf128b0f8a942c7e727895f95" kindref="member">SpatialOrbital</ref>, <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1ad9e21173bbfeb27450f602cd9df351ab" kindref="member">SpatialOrbitalDerivative</ref> &gt; &gt;</type>
        <definition>using GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::CurrentDensityDistribution =  EvaluableLinearCombination&lt;complex, FunctionProduct&lt;SpatialOrbital, SpatialOrbitalDerivative&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>CurrentDensityDistribution</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::CurrentDensityDistribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="98" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1acc337f6e3f3dddd0be78dacc69d3599c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::numberOfSpatialOrbitals</definition>
        <argsstring>() const</argsstring>
        <name>numberOfSpatialOrbitals</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::numberOfSpatialOrbitals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of different spatial orbitals that are used in this restricted spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="117" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5bcee2b4b1b0e35dadde44a46984e029" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::numberOfSpinors</definition>
        <argsstring>() const</argsstring>
        <name>numberOfSpinors</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::numberOfSpinors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of spinors that are described by this restricted spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="122" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a89c30d78567b003c9020c6b31520eaa8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::numberOfSpinOrbitals</definition>
        <argsstring>() const</argsstring>
        <name>numberOfSpinOrbitals</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::numberOfSpinOrbitals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of spin-orbitals that are described by this restricted spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="127" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1adb8c8faab71ae2ce959f46f884baf6cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FQOneElectronOperator</type>
          </param>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const FQOneElectronOperator &amp;fq_one_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, GTOShell &gt;::value, RSQOneElectronOperator&lt; product_t&lt; typename FQOneElectronOperator::Scalar, ExpansionScalar &gt;, typename FQOneElectronOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const FQOneElectronOperator &amp;</type>
          <declname>fq_one_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize a first-quantized one-electron operator in this restricted spin-orbital basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_one_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The first-quantized one-electron operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FQOneElectronOperator</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the first-quantized one-electron operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized operator corresponding to the given first-quantized operator, i.e. expressed in/projected onto this spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="144" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="144" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a4f731a958204947130cd26a1ba52a4ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const CoulombRepulsionOperator &amp;fq_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, GTOShell &gt;::value, RSQTwoElectronOperator&lt; product_t&lt; CoulombRepulsionOperator::Scalar, ExpansionScalar &gt;, CoulombRepulsionOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_coulomb_repulsion_operator" kindref="compound">CoulombRepulsionOperator</ref> &amp;</type>
          <declname>fq_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the Coulomb operator in this restricted spin-orbital basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The first-quantized Coulomb operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized operator corresponding to the Coulomb operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="165" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="165" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1ad67c23c41e322a8023eb63de83428721" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const AngularMomentumOperator &amp;fq_one_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, GTOShell &gt;::value, RSQOneElectronOperator&lt; product_t&lt; AngularMomentumOperator::Scalar, ExpansionScalar &gt;, typename AngularMomentumOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_angular_momentum_operator" kindref="compound">AngularMomentumOperator</ref> &amp;</type>
          <declname>fq_one_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the angular momentum operator in this restricted spin-orbital basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_one_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The first-quantized angular momentum operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized angular momentum operator, i.e. expressed in/projected onto this spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="201" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="201" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a8bdb6873b5b7a7e2c587012335f5a124" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const LinearMomentumOperator &amp;fq_one_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, GTOShell &gt;::value, RSQOneElectronOperator&lt; product_t&lt; LinearMomentumOperator::Scalar, ExpansionScalar &gt;, typename LinearMomentumOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_momentum_operator" kindref="compound">LinearMomentumOperator</ref> &amp;</type>
          <declname>fq_one_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the linear momentum operator in this restricted spin-orbital basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_one_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The first-quantized linear momentum operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized linear momentum operator, i.e. expressed in/projected onto this spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="228" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="228" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1ae6d845224e8c28894d5b4aac4d2b612d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_g_q_c_p_1aa905a7b11e34c0d61b45484aa8b30755" kindref="member">ScalarEvaluableRSQOneElectronOperator</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a9f1c0c128d144924eb668f0464be3c85" kindref="member">DensityDistribution</ref> &gt;</type>
        <definition>ScalarEvaluableRSQOneElectronOperator&lt; DensityDistribution &gt; GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const ElectronicDensityOperator &amp;fq_density_op) const</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_electronic_density_operator" kindref="compound">ElectronicDensityOperator</ref> &amp;</type>
          <declname>fq_density_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the (one-electron) electronic density operator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_density_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The first-quantized density operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized density operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="254" column="43" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="254" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1ac0c3395db104ea051cc78ab0550dd6fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_g_q_c_p_1a5f07594b8253c17135822016460301b8" kindref="member">VectorEvaluableRSQOneElectronOperator</ref>&lt; <ref refid="class_g_q_c_p_1_1_current_density_matrix_element" kindref="compound">CurrentDensityMatrixElement</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" kindref="member">ExpansionScalar</ref>, <ref refid="class_g_q_c_p_1_1_cartesian_g_t_o" kindref="compound">CartesianGTO</ref> &gt; &gt;</type>
        <definition>VectorEvaluableRSQOneElectronOperator&lt; CurrentDensityMatrixElement&lt; ExpansionScalar, CartesianGTO &gt; &gt; GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const CurrentDensityOperator &amp;fq_current_density_op) const</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_current_density_operator" kindref="compound">CurrentDensityOperator</ref> &amp;</type>
          <declname>fq_current_density_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the (one-electron) current density operator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_current_density_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The first-quantized current density operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized current density operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="278" column="43" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="278" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1ade491d9577f21f1022d228c54004175a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FQOneElectronOperator</type>
          </param>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const FQOneElectronOperator &amp;fq_one_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, RSQOneElectronOperator&lt; product_t&lt; typename FQOneElectronOperator::Scalar, ExpansionScalar &gt;, typename FQOneElectronOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const FQOneElectronOperator &amp;</type>
          <declname>fq_one_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize a spin-independent one-electron operator in this general spinor basis. Spin-independent one-electron operators are those whose two-component matrix operator form contains the same scalar operator in the top-left and bottom-right corner.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_one_op</parametername>
</parameternamelist>
<parameterdescription>
<para>A spin-independent first-quantized operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized representation of the given operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="316" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="316" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a4d5e4e5891927b0dc230ac53af9d8012" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const OrbitalZeemanOperator &amp;op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, RSQOneElectronOperator&lt; product_t&lt; OrbitalZeemanOperator::Scalar, ExpansionScalar &gt;, OrbitalZeemanOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_orbital_zeeman_operator" kindref="compound">OrbitalZeemanOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the orbital Zeeman operator in this restricted spin-orbital basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The (first-quantized) orbital Zeeman operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The orbital Zeeman operator expressed in this restricted spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="360" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="360" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a582c54e796742071a6d3131b38849fa3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const DiamagneticOperator &amp;op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, RSQOneElectronOperator&lt; product_t&lt; DiamagneticOperator::Scalar, ExpansionScalar &gt;, DiamagneticOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_diamagnetic_operator" kindref="compound">DiamagneticOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the diamagnetic operator in this restricted spin-orbital basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The (first-quantized) diamagnetic operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The diamagnetic operator expressed in this restricted spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="377" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="377" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1add796069bd9a10a0d35db3a1dd009730" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const CoulombRepulsionOperator &amp;fq_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, RSQTwoElectronOperator&lt; product_t&lt; CoulombRepulsionOperator::Scalar, ExpansionScalar &gt;, CoulombRepulsionOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_coulomb_repulsion_operator" kindref="compound">CoulombRepulsionOperator</ref> &amp;</type>
          <declname>fq_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the Coulomb operator in this restricted spin-orbital basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The first-quantized Coulomb operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized operator corresponding to the Coulomb operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="419" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="419" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a9f738a9f0f817276d7f7ad96858234aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, <ref refid="class_g_q_c_p_1_1_london_g_t_o_shell" kindref="compound">LondonGTOShell</ref> &gt;::value, <ref refid="namespace_g_q_c_p_1ab3ebca2a53b8e94ced149c725732035a" kindref="member">RSQHamiltonian</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" kindref="member">ExpansionScalar</ref> &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, RSQHamiltonian&lt; ExpansionScalar &gt; &gt; GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const FQMolecularMagneticHamiltonian &amp;fq_hamiltonian) const</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_f_q_molecular_magnetic_hamiltonian" kindref="compound">FQMolecularMagneticHamiltonian</ref> &amp;</type>
          <declname>fq_hamiltonian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the molecular magnetic Hamiltonian.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_hamiltonian</parametername>
</parameternamelist>
<parameterdescription>
<para>The molecular magnetic Hamiltonian.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized molecular magnetic Hamiltonian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="454" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="454" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a95f2b346f14a8113994c2e02326d4b6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_g_q_c_p_1ab3ebca2a53b8e94ced149c725732035a" kindref="member">RSQHamiltonian</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" kindref="member">ExpansionScalar</ref> &gt;</type>
        <definition>RSQHamiltonian&lt; ExpansionScalar &gt; GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const FQMolecularHamiltonian &amp;fq_hamiltonian) const</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_f_q_molecular_hamiltonian" kindref="compound">FQMolecularHamiltonian</ref> &amp;</type>
          <declname>fq_hamiltonian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the molecular Hamiltonian.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_hamiltonian</parametername>
</parameternamelist>
<parameterdescription>
<para>The molecular Hamiltonian.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized molecular Hamiltonian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="479" column="20" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="479" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a6d2074911c467ec8371e7d569eb828a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a955bb69cf128b0f8a942c7e727895f95" kindref="member">SpatialOrbital</ref> &gt;</type>
        <definition>std::vector&lt; SpatialOrbital &gt; GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::spatialOrbitals</definition>
        <argsstring>() const</argsstring>
        <name>spatialOrbitals</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::spatialOrbitals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The set of spatial orbitals that is associated to this spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="497" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="497" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a8ec105b375ae03b3e46b1fcabb5c6c29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_g_q_c_p_1a0b93cbbef69cd49e5de8027a7b945756" kindref="member">Vector</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1ad9e21173bbfeb27450f602cd9df351ab" kindref="member">SpatialOrbitalDerivative</ref>, 3 &gt; &gt;</type>
        <definition>std::vector&lt; Vector&lt; SpatialOrbitalDerivative, 3 &gt; &gt; GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::spatialOrbitalGradients</definition>
        <argsstring>() const</argsstring>
        <name>spatialOrbitalGradients</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::spatialOrbitalGradients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The gradients of each of the spatial orbitals that is associated to this spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="527" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="527" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a6b8b8cd530a28e8853e8b0a09a8187f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_g_q_c_p_1_1_spinor" kindref="compound">Spinor</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" kindref="member">ExpansionScalar</ref>, <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1af80a4fe5fd969824042cc98025acb72e" kindref="member">BasisFunction</ref> &gt; &gt;</type>
        <definition>std::vector&lt; Spinor&lt; ExpansionScalar, BasisFunction &gt; &gt; GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::spinOrbitals</definition>
        <argsstring>() const</argsstring>
        <name>spinOrbitals</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::spinOrbitals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The set of spin-orbitals that is associated to this spin-orbital basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="569" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="569" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5ea51bafdb5544802af9fe4f2c35d47b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_r_mulliken_domain" kindref="compound">RMullikenDomain</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" kindref="member">ExpansionScalar</ref> &gt;</type>
        <definition>RMullikenDomain&lt; ExpansionScalar &gt; GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::mullikenDomain</definition>
        <argsstring>(const std::function&lt; bool(const BasisFunction &amp;)&gt; &amp;selector) const</argsstring>
        <name>mullikenDomain</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::mullikenDomain</qualifiedname>
        <param>
          <type>const std::function&lt; bool(const <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1af80a4fe5fd969824042cc98025acb72e" kindref="member">BasisFunction</ref> &amp;)&gt; &amp;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Partition this set of restricted spin-orbitals according to the Mulliken partitioning scheme.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>selector</parametername>
</parameternamelist>
<parameterdescription>
<para>A function that returns true for basis functions that should be included the Mulliken domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="class_g_q_c_p_1_1_r_mulliken_domain" kindref="compound">RMullikenDomain</ref></computeroutput> for the AOs selected by the supplied selector function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="601" column="21" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="601" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_r_spin_orbital_basis_1a25e87075130021a9c032c8d7ef24275b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_r_mulliken_domain" kindref="compound">RMullikenDomain</ref>&lt; <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" kindref="member">ExpansionScalar</ref> &gt;</type>
        <definition>RMullikenDomain&lt; ExpansionScalar &gt; GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;::mullikenDomain</definition>
        <argsstring>(const std::function&lt; bool(const Shell &amp;)&gt; &amp;selector) const</argsstring>
        <name>mullikenDomain</name>
        <qualifiedname>GQCP::RSpinOrbitalBasis::mullikenDomain</qualifiedname>
        <param>
          <type>const std::function&lt; bool(const <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" kindref="member">Shell</ref> &amp;)&gt; &amp;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Partition this set of restricted spin-orbitals according to the Mulliken partitioning scheme.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>selector</parametername>
</parameternamelist>
<parameterdescription>
<para>A function that returns true for shells that should be included the Mulliken domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="class_g_q_c_p_1_1_r_mulliken_domain" kindref="compound">RMullikenDomain</ref></computeroutput> for the AOs selected by the supplied selector function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="615" column="21" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="615" bodyend="619"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A restricted spin-orbital basis, i.e. a spin-orbital basis where the alpha- and beta-spinors are equal.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_ExpansionScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type used to represent an expansion coefficient of the spin-orbitals in the underlying scalar orbitals: real or complex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Shell</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of shell the underlying scalar basis contains. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>GQCP::BasisTransformable&lt; _FinalSpinorBasis &gt;</label>
        <link refid="class_g_q_c_p_1_1_basis_transformable"/>
      </node>
      <node id="4">
        <label>GQCP::CRTP&lt; _FinalSpinorBasis &gt;</label>
        <link refid="class_g_q_c_p_1_1_c_r_t_p"/>
      </node>
      <node id="1">
        <label>GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;</label>
        <link refid="class_g_q_c_p_1_1_r_spin_orbital_basis"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>GQCP::SimpleSpinorBasis&lt; _ExpansionScalar, _FinalSpinorBasis &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple_spinor_basis"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>GQCP::JacobiRotatable&lt; _FinalSpinorBasis &gt;</label>
        <link refid="class_g_q_c_p_1_1_jacobi_rotatable"/>
      </node>
      <node id="2">
        <label>GQCP::SimpleSpinOrbitalBasis&lt; _ExpansionScalar, _Shell, RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple_spin_orbital_basis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>GQCP::BasisTransformable&lt; _FinalSpinorBasis &gt;</label>
        <link refid="class_g_q_c_p_1_1_basis_transformable"/>
      </node>
      <node id="7">
        <label>GQCP::BasisTransformableTraits&lt; FinalSpinorBasis &gt;</label>
        <link refid="struct_g_q_c_p_1_1_basis_transformable_traits"/>
      </node>
      <node id="4">
        <label>GQCP::CRTP&lt; _FinalSpinorBasis &gt;</label>
        <link refid="class_g_q_c_p_1_1_c_r_t_p"/>
      </node>
      <node id="1">
        <label>GQCP::RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt;</label>
        <link refid="class_g_q_c_p_1_1_r_spin_orbital_basis"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>GQCP::SimpleSpinorBasis&lt; _ExpansionScalar, _FinalSpinorBasis &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple_spinor_basis"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>#C</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>GQCP::JacobiRotatable&lt; _FinalSpinorBasis &gt;</label>
        <link refid="class_g_q_c_p_1_1_jacobi_rotatable"/>
      </node>
      <node id="8">
        <label>GQCP::ScalarBasis&lt; Shell &gt;</label>
        <link refid="class_g_q_c_p_1_1_scalar_basis"/>
      </node>
      <node id="2">
        <label>GQCP::SimpleSpinOrbitalBasis&lt; _ExpansionScalar, _Shell, RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple_spin_orbital_basis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>#scalar_basis</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="61" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="62" bodyend="620"/>
    <listofallmembers>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1aad32b0cc0dce8be836799d61e50cf500" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>BaseSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1af80a4fe5fd969824042cc98025acb72e" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>BasisFunction</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a3921c7e49063e3206e1ae758934e6ebd" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>BasisFunctionDerivative</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a9abca647ddeb9772b5c58fe7366204ac" prot="protected" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>C</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1ab985c6702814ab6a01f5fd9aaaac9289" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>CurrentDensityDistribution</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a9f1c0c128d144924eb668f0464be3c85" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>DensityDistribution</name></member>
      <member refid="class_g_q_c_p_1_1_c_r_t_p_1afbb2119ea002c348828c45726583d863" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>derived</name></member>
      <member refid="class_g_q_c_p_1_1_c_r_t_p_1a28a8bce1d2ca75d90ecf1295dd640f13" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>derived</name></member>
      <member refid="class_g_q_c_p_1_1_c_r_t_p_1ab72cbeb2fad6d811d4f6fcd2c962b55e" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>Derived</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spin_orbital_basis_1a1df9d7598f4fac0445ef10d7eff4ec74" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>DerivedSpinOrbitalBasis</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a6f28eee1bd0c2890b7fd3355913fb414" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>expansion</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a80cd4ad6ae5cbc165404fc7cb09e3ffe" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>ExpansionScalar</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1aa3b991f95864658a48cb6b7360dca2aa" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>FinalSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1aa00b804a0f522ee6b046e45d9e39a7b8" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>isOrthonormal</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1aa137ad5da7e46d3f6bfb30e1c8a4a71f" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>JacobiRotationType</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a7dcbcf5803cb8c3b4b65cb49ce3f5f69" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>lowdinOrthonormalization</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a53160b32246fe945f0fb7aa46d15c4e9" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>lowdinOrthonormalize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5ea51bafdb5544802af9fe4f2c35d47b" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>mullikenDomain</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a25e87075130021a9c032c8d7ef24275b" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>mullikenDomain</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1acc337f6e3f3dddd0be78dacc69d3599c" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>numberOfSpatialOrbitals</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a89c30d78567b003c9020c6b31520eaa8" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>numberOfSpinOrbitals</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5bcee2b4b1b0e35dadde44a46984e029" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>numberOfSpinors</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a42b2813a11f43e74c7fa60ee90a5ae0e" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>overlap</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1af95118cd66ddd598ec1c6b350e46c5c7" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>Primitive</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a8f2e0fb8cc6b8813f12e64ca893272a9" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>PrimitiveDerivative</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1adb8c8faab71ae2ce959f46f884baf6cc" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a4f731a958204947130cd26a1ba52a4ae" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1ad67c23c41e322a8023eb63de83428721" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a8bdb6873b5b7a7e2c587012335f5a124" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1ae6d845224e8c28894d5b4aac4d2b612d" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1ac0c3395db104ea051cc78ab0550dd6fe" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1ade491d9577f21f1022d228c54004175a" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a4d5e4e5891927b0dc230ac53af9d8012" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a582c54e796742071a6d3131b38849fa3" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1add796069bd9a10a0d35db3a1dd009730" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a9f738a9f0f817276d7f7ad96858234aa" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a95f2b346f14a8113994c2e02326d4b6f" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_basis_transformable_1a2e107bd3cf4d603c003c8cb9357d0094" prot="public" virt="non-virtual" ambiguityscope="BasisTransformable&lt; _FinalSpinorBasis &gt;::"><scope>GQCP::RSpinOrbitalBasis</scope><name>rotate</name></member>
      <member refid="class_g_q_c_p_1_1_jacobi_rotatable_1a11657b774fe75246bef1f7849f9aad72" prot="public" virt="non-virtual" ambiguityscope="JacobiRotatable&lt; _FinalSpinorBasis &gt;::"><scope>GQCP::RSpinOrbitalBasis</scope><name>rotate</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a35d1cde61d7596a61df2c39ddef578b1" prot="public" virt="virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>rotated</name></member>
      <member refid="class_g_q_c_p_1_1_basis_transformable_1ae0af50867dbd06193b64c2bcdd6b51ba" prot="public" virt="virtual" ambiguityscope="BasisTransformable&lt; _FinalSpinorBasis &gt;::"><scope>GQCP::RSpinOrbitalBasis</scope><name>rotated</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spin_orbital_basis_1ad82e9a3ee9b7b72cb07eea596b80db53" prot="protected" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>scalar_basis</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spin_orbital_basis_1ae4d021b1d29a7f7b6fb6763448f7a137" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>scalarBasis</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a5cc5b25be3944ebe7140b30a14dedbce" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>Shell</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1abbad8e4366b720933a378ea276bf9502" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>simpleDimension</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1af946e8de1e88562c95630a0aef5f6a77" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>SimpleSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spin_orbital_basis_1a3db0589ecea68031a220f82e5711d2de" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>SimpleSpinOrbitalBasis</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spin_orbital_basis_1af096f847c1c3c17d4c95c0bd7c0805c2" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>SimpleSpinOrbitalBasis</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spin_orbital_basis_1aefeac1ce6c38d836ad6d8bd3fb11212d" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>SimpleSpinOrbitalBasis</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spin_orbital_basis_1a3048576f622f5afc8abe21ccb8c1f227" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>SimpleSpinOrbitalBasis</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spin_orbital_basis_1af84c29a6ca7888ce375dd1381c1e9bc3" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>SimpleSpinOrbitalBasis</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a955bb69cf128b0f8a942c7e727895f95" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>SpatialOrbital</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1ad9e21173bbfeb27450f602cd9df351ab" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>SpatialOrbitalDerivative</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a8ec105b375ae03b3e46b1fcabb5c6c29" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>spatialOrbitalGradients</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a6d2074911c467ec8371e7d569eb828a9" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>spatialOrbitals</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a6b8b8cd530a28e8853e8b0a09a8187f8" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>spinOrbitals</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a62e6854ce1fb8ab009b0479586337f8e" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>SQOverlapOperator</name></member>
      <member refid="class_g_q_c_p_1_1_basis_transformable_1aa55d3cf1b186ac2ec926e97a7b6d645f" prot="public" virt="virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>transform</name></member>
      <member refid="class_g_q_c_p_1_1_r_spin_orbital_basis_1a75c80392015198d949774257c5d1d84d" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>Transformation</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1aa6d146421985b3aefc1b4a9ec4aa6c54" prot="public" virt="non-virtual"><scope>GQCP::RSpinOrbitalBasis</scope><name>transformed</name></member>
      <member refid="class_g_q_c_p_1_1_basis_transformable_1a3c511224fd132184fb2e01579754850d" prot="public" virt="pure-virtual" ambiguityscope="BasisTransformable&lt; _FinalSpinorBasis &gt;::"><scope>GQCP::RSpinOrbitalBasis</scope><name>transformed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
