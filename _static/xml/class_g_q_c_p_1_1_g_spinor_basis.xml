<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_g_q_c_p_1_1_g_spinor_basis" kind="class" language="C++" prot="public">
    <compoundname>GQCP::GSpinorBasis</compoundname>
    <basecompoundref refid="class_g_q_c_p_1_1_simple_spinor_basis" prot="public" virt="non-virtual">GQCP::SimpleSpinorBasis&lt; _ExpansionScalar, GSpinorBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</basecompoundref>
    <includes refid="_g_spinor_basis_8hpp" local="no">GSpinorBasis.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename _ExpansionScalar</type>
      </param>
      <param>
        <type>typename _Shell</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" prot="public" static="no">
        <type>_ExpansionScalar</type>
        <definition>using GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::ExpansionScalar =  _ExpansionScalar</definition>
        <argsstring></argsstring>
        <name>ExpansionScalar</name>
        <qualifiedname>GQCP::GSpinorBasis::ExpansionScalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="65" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" prot="public" static="no">
        <type>_Shell</type>
        <definition>using GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::Shell =  _Shell</definition>
        <argsstring></argsstring>
        <name>Shell</name>
        <qualifiedname>GQCP::GSpinorBasis::Shell</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="68" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_g_spinor_basis_1aad76bcfb2f9b07564621f91dd4c36bd4" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_simple_spinor_basis" kindref="compound">SimpleSpinorBasis</ref>&lt; _ExpansionScalar, <ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>&lt; _ExpansionScalar, _Shell &gt; &gt;</type>
        <definition>using GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::Base =  SimpleSpinorBasis&lt;_ExpansionScalar, GSpinorBasis&lt;_ExpansionScalar, _Shell&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <qualifiedname>GQCP::GSpinorBasis::Base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="71" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_g_spinor_basis_1ac3b826302d446a0d413ab4ff5797148e" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_g_transformation" kindref="compound">GTransformation</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref> &gt;</type>
        <definition>using GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::Transformation =  GTransformation&lt;ExpansionScalar&gt;</definition>
        <argsstring></argsstring>
        <name>Transformation</name>
        <qualifiedname>GQCP::GSpinorBasis::Transformation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="74" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_g_spinor_basis_1ac605d1a1c6a417c9dfe63329f0e894e4" prot="public" static="no">
        <type>typename Shell::Primitive</type>
        <definition>using GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::Primitive =  typename Shell::Primitive</definition>
        <argsstring></argsstring>
        <name>Primitive</name>
        <qualifiedname>GQCP::GSpinorBasis::Primitive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="77" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_g_spinor_basis_1a30600aed0df6ba06f37e8d0f267da733" prot="public" static="no">
        <type>typename Shell::BasisFunction</type>
        <definition>using GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::BasisFunction =  typename Shell::BasisFunction</definition>
        <argsstring></argsstring>
        <name>BasisFunction</name>
        <qualifiedname>GQCP::GSpinorBasis::BasisFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="80" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_g_q_c_p_1_1_g_spinor_basis_1a9b4dd7434df5fbe0e5a9557b6645d764" prot="private" static="no" mutable="no">
        <type><ref refid="class_g_q_c_p_1_1_spin_resolved" kindref="compound">SpinResolved</ref>&lt; <ref refid="class_g_q_c_p_1_1_scalar_basis" kindref="compound">ScalarBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &gt;</type>
        <definition>SpinResolved&lt;ScalarBasis&lt;Shell&gt; &gt; GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::scalar_bases</definition>
        <argsstring></argsstring>
        <name>scalar_bases</name>
        <qualifiedname>GQCP::GSpinorBasis::scalar_bases</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="85" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a96ac56ccbfef44192acacd8b606311c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::GSpinorBasis</definition>
        <argsstring>(const SpinResolved&lt; ScalarBasis&lt; Shell &gt; &gt; &amp;scalar_bases, const Transformation &amp;C)</argsstring>
        <name>GSpinorBasis</name>
        <qualifiedname>GQCP::GSpinorBasis::GSpinorBasis</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_spin_resolved" kindref="compound">SpinResolved</ref>&lt; <ref refid="class_g_q_c_p_1_1_scalar_basis" kindref="compound">ScalarBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &gt; &amp;</type>
          <declname>scalar_bases</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ac3b826302d446a0d413ab4ff5797148e" kindref="member">Transformation</ref> &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <computeroutput><ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref></computeroutput> from scalar bases that are not necessarily equal.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_bases</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar bases for the alpha and beta components of the spinors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformation that relates the current set of spinors with the atomic spinors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="99" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="99" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1af07dc3114327e1708026c89dad13e8ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::GSpinorBasis</definition>
        <argsstring>(const ScalarBasis&lt; Shell &gt; &amp;alpha_scalar_basis, const ScalarBasis&lt; Shell &gt; &amp;beta_scalar_basis, const Transformation &amp;C)</argsstring>
        <name>GSpinorBasis</name>
        <qualifiedname>GQCP::GSpinorBasis::GSpinorBasis</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_scalar_basis" kindref="compound">ScalarBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &amp;</type>
          <declname>alpha_scalar_basis</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_scalar_basis" kindref="compound">ScalarBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &amp;</type>
          <declname>beta_scalar_basis</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ac3b826302d446a0d413ab4ff5797148e" kindref="member">Transformation</ref> &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <computeroutput><ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref></computeroutput> from scalar bases that are not necessarily equal.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha_scalar_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar basis in which the alpha components of the spinors are expanded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta_scalar_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar basis in which the beta components of the spinors are expanded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformation that relates the current set of spinors with the atomic spinors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="119" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="119" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a831b047849c8af5734f56fde89e9b692" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::GSpinorBasis</definition>
        <argsstring>(const ScalarBasis&lt; Shell &gt; &amp;scalar_basis, const Transformation &amp;C)</argsstring>
        <name>GSpinorBasis</name>
        <qualifiedname>GQCP::GSpinorBasis::GSpinorBasis</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_scalar_basis" kindref="compound">ScalarBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &amp;</type>
          <declname>scalar_basis</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ac3b826302d446a0d413ab4ff5797148e" kindref="member">Transformation</ref> &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a generalized spinor basis in which both underlying scalar bases are equal. ^ <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar basis in which both the alpha and beta components are expanded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformation that relates the current set of spinors with the atomic spinors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="129" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="129" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1ad87001892202e25bed0b75b80c316c3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::GSpinorBasis</definition>
        <argsstring>(const ScalarBasis&lt; Shell &gt; &amp;alpha_scalar_basis, const ScalarBasis&lt; Shell &gt; &amp;beta_scalar_basis)</argsstring>
        <name>GSpinorBasis</name>
        <qualifiedname>GQCP::GSpinorBasis::GSpinorBasis</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_scalar_basis" kindref="compound">ScalarBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &amp;</type>
          <declname>alpha_scalar_basis</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_scalar_basis" kindref="compound">ScalarBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &amp;</type>
          <declname>beta_scalar_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a generalized spinor basis with two different underlying scalar basis, and a coefficient matrix being the identity. The resulting spinor basis corresponds to the atomic spinors (AOs).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha_scalar_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar basis in which the alpha components of the spinors are expanded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta_scalar_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar basis in which the beta components of the spinors are expanded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="139" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a7cdbaa05984076fa4ced02496734e0e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::GSpinorBasis</definition>
        <argsstring>(const ScalarBasis&lt; Shell &gt; &amp;scalar_basis)</argsstring>
        <name>GSpinorBasis</name>
        <qualifiedname>GQCP::GSpinorBasis::GSpinorBasis</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_scalar_basis" kindref="compound">ScalarBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &amp;</type>
          <declname>scalar_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a generalized spinor basis in which both underlying scalar bases are equal, and a coefficient matrix being the identity. The resulting spinor basis corresponds to the atomic spinors (AOs).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar basis in which both the alpha and beta components are expanded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="149" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="149" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1ae74073c7ae5fd36cb4c9ae9744415bd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::GSpinorBasis</definition>
        <argsstring>(const NuclearFramework &amp;nuclear_framework, const std::string &amp;basisset_name)</argsstring>
        <name>GSpinorBasis</name>
        <qualifiedname>GQCP::GSpinorBasis::GSpinorBasis</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_nuclear_framework" kindref="compound">NuclearFramework</ref> &amp;</type>
          <declname>nuclear_framework</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>basisset_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a generalized spinor basis with an underlying scalar basis (equal for both the alpha and beta components) that is made by placing shells corresponding to the basisset specification on every nucleus of the nuclear framework. The resulting spinor basis corresponds to the non-orthogonal atomic spinors (AOs).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nuclear_framework</parametername>
</parameternamelist>
<parameterdescription>
<para>The nuclear framework containing the nuclei on which the shells should be centered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>basisset_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the basisset, e.g. &quot;STO-3G&quot;.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The normalization factors of the spherical (or axis-aligned Cartesian) GTO primitives are embedded in the contraction coefficients of the underlying shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="161" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="161" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a7c5f3e3058f54379889c149ddad85bde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::GSpinorBasis</definition>
        <argsstring>(const Molecule &amp;molecule, const std::string &amp;basisset_name)</argsstring>
        <name>GSpinorBasis</name>
        <qualifiedname>GQCP::GSpinorBasis::GSpinorBasis</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_molecule" kindref="compound">Molecule</ref> &amp;</type>
          <declname>molecule</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>basisset_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a generalized spinor basis with an underlying scalar basis (equal for both the alpha and beta components) that is made by placing shells corresponding to the basisset specification on every nucleus of the molecule. The resulting spinor basis corresponds to the non-orthogonal atomic spinors (AOs).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>molecule</parametername>
</parameternamelist>
<parameterdescription>
<para>The molecule containing the nuclei on which the shells should be centered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>basisset_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the basisset, e.g. &quot;STO-3G&quot;.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The normalization factors of the spherical (or axis-aligned Cartesian) GTO primitives are embedded in the contraction coefficients of the underlying shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="173" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="173" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a922a8e4c39e0ac447e015c4ccc592931" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::GSpinorBasis</definition>
        <argsstring>(const Molecule &amp;molecule, const std::string &amp;basisset_name, const HomogeneousMagneticField &amp;B, typename std::enable_if&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value &gt;::type *=0)</argsstring>
        <name>GSpinorBasis</name>
        <qualifiedname>GQCP::GSpinorBasis::GSpinorBasis</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_molecule" kindref="compound">Molecule</ref> &amp;</type>
          <declname>molecule</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>basisset_name</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_homogeneous_magnetic_field" kindref="compound">HomogeneousMagneticField</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; Z, <ref refid="class_g_q_c_p_1_1_london_g_t_o_shell" kindref="compound">LondonGTOShell</ref> &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a generalized spinor basis with an underlying scalar basis (equal for both the alpha and beta components) that is made by placing shells corresponding to the basisset specification on every nucleus of the molecule. The resulting spinor basis corresponds to the non-orthogonal London atomic spinors (AOs).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>molecule</parametername>
</parameternamelist>
<parameterdescription>
<para>The molecule containing the nuclei on which the shells should be centered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>basisset_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the basisset, e.g. &quot;STO-3G&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The homogeneous magnetic field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The normalization factors of the spherical (or axis-aligned Cartesian) GTO primitives are embedded in the contraction coefficients of the underlying shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="187" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a2f38b86e3bf90218d22d7625f8fdd169" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::GSpinorBasis</definition>
        <argsstring>(const NuclearFramework &amp;nuclear_framework, const std::string &amp;basisset_name_alpha, const std::string &amp;basisset_name_beta)</argsstring>
        <name>GSpinorBasis</name>
        <qualifiedname>GQCP::GSpinorBasis::GSpinorBasis</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_nuclear_framework" kindref="compound">NuclearFramework</ref> &amp;</type>
          <declname>nuclear_framework</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>basisset_name_alpha</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>basisset_name_beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a generalized spinor basis with a underlying scalar bases made by placing shells corresponding to the basisset specifications on every nucleus of the nuclear framework. The resulting spinor basis corresponds to the non-orthogonal atomic spinors (AOs).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nuclear_framework</parametername>
</parameternamelist>
<parameterdescription>
<para>The nuclear framework containing the nuclei on which the shells should be centered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>basisset_name_alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the basisset, e.g. &quot;STO-3G&quot;, used for the expansion of the alpha component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>basisset_name_beta</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the basisset, e.g. &quot;STO-3G&quot;, used for the expansion of the beta component.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The normalization factors of the spherical (or axis-aligned Cartesian) GTO primitives are embedded in the contraction coefficients of the underlying shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="201" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a0b543fbfcf49f82f6869e8e5cf09819a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::GSpinorBasis</definition>
        <argsstring>(const Molecule &amp;molecule, const std::string &amp;basisset_name_alpha, const std::string &amp;basisset_name_beta)</argsstring>
        <name>GSpinorBasis</name>
        <qualifiedname>GQCP::GSpinorBasis::GSpinorBasis</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_molecule" kindref="compound">Molecule</ref> &amp;</type>
          <declname>molecule</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>basisset_name_alpha</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>basisset_name_beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a generalized spinor basis with a underlying scalar bases made by placing shells corresponding to the basisset specifications on every nucleus of the molecule. The resulting spinor basis corresponds to the non-orthogonal atomic spinors (AOs).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>molecule</parametername>
</parameternamelist>
<parameterdescription>
<para>The molecule containing the nuclei on which the shells should be centered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>basisset_name_alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the basisset, e.g. &quot;STO-3G&quot;, used for the expansion of the alpha component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>basisset_name_beta</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the basisset, e.g. &quot;STO-3G&quot;, used for the expansion of the beta component.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The normalization factors of the spherical (or axis-aligned Cartesian) GTO primitives are embedded in the contraction coefficients of the underlying shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="215" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a9062fb369d11c2ede60ae0dd34d9cbd8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::numberOfCoefficients</definition>
        <argsstring>(const Spin &amp;sigma) const</argsstring>
        <name>numberOfCoefficients</name>
        <qualifiedname>GQCP::GSpinorBasis::numberOfCoefficients</qualifiedname>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1ac6f590924cfbbf11847a4ce174fe6e4f" kindref="member">Spin</ref> &amp;</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Alpha or beta.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of coefficients that are used for the expansion of the requested spin-component of a spinor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="266" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1ad71c2691865d2ba1ee0d038b81ceb8a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::numberOfSpinors</definition>
        <argsstring>() const</argsstring>
        <name>numberOfSpinors</name>
        <qualifiedname>GQCP::GSpinorBasis::numberOfSpinors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of spinors that are described by this generalized spinor basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="276" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="276" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a3545f357983b7395d9626d9875ff62a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FQOneElectronOperator</type>
          </param>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const FQOneElectronOperator &amp;fq_one_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, GTOShell &gt;::value, GSQOneElectronOperator&lt; product_t&lt; typename FQOneElectronOperator::Scalar, ExpansionScalar &gt;, typename FQOneElectronOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const FQOneElectronOperator &amp;</type>
          <declname>fq_one_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize a scalar spin-independent one-electron operator in this general spinor basis. Spin-independent one-electron operators are those whose two-component matrix operator form contains the same scalar operator in the top-left and bottom-right corner.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_one_op</parametername>
</parameternamelist>
<parameterdescription>
<para>A spin-independent first-quantized operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized representation of the given operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="297" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="297" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a4b71a43e9b15543064ee8e6c6f205a56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const ElectronicSpinOperator &amp;fq_one_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, GTOShell &gt;::value, GSQOneElectronOperator&lt; product_t&lt; ElectronicSpinOperator::Scalar, ExpansionScalar &gt;, ElectronicSpinOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_electronic_spin_operator" kindref="compound">ElectronicSpinOperator</ref> &amp;</type>
          <declname>fq_one_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the electronic spin operator in this general spinor basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_one_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The (first-quantized) electronic spin operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The electronic spin operator expressed in this spinor basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="333" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="333" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1afa612dafddb17f11881b67b45fe14271" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const ElectronicSpin_zOperator &amp;fq_one_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, GTOShell &gt;::value, GSQOneElectronOperator&lt; product_t&lt; ElectronicSpin_zOperator::Scalar, ExpansionScalar &gt;, ElectronicSpin_zOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_electronic_spin__z_operator" kindref="compound">ElectronicSpin_zOperator</ref> &amp;</type>
          <declname>fq_one_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the electronic spin &quot;z&quot; operator in this general spinor basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_one_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The (first-quantized) electronic spin &quot;z&quot; operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The electronic spin &quot;z&quot; operator expressed in this spinor basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="386" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="386" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1ab194f96b8477ee3552387ff42ebe113f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const CoulombRepulsionOperator &amp;coulomb_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, GTOShell &gt;::value, GSQTwoElectronOperator&lt; product_t&lt; CoulombRepulsionOperator::Scalar, ExpansionScalar &gt;, CoulombRepulsionOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_coulomb_repulsion_operator" kindref="compound">CoulombRepulsionOperator</ref> &amp;</type>
          <declname>coulomb_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the Coulomb operator in this general spinor basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coulomb_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The first-quantized Coulomb operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized operator corresponding to the Coulomb operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="424" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="424" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a7cfac63f7b59c179dcd1ddd97a60f43f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FQOneElectronOperator</type>
          </param>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const FQOneElectronOperator &amp;fq_one_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, GSQOneElectronOperator&lt; product_t&lt; typename FQOneElectronOperator::Scalar, ExpansionScalar &gt;, typename FQOneElectronOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const FQOneElectronOperator &amp;</type>
          <declname>fq_one_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize a spin-independent one-electron operator in this general spinor basis. Spin-independent one-electron operators are those whose two-component matrix operator form contains the same scalar operator in the top-left and bottom-right corner.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_one_op</parametername>
</parameternamelist>
<parameterdescription>
<para>A spin-independent first-quantized operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized representation of the given operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="495" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="495" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1ab374832e9980b6b6917913c9cf9ed9f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const ElectronicSpinOperator &amp;fq_one_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, GSQOneElectronOperator&lt; product_t&lt; ElectronicSpinOperator::Scalar, ExpansionScalar &gt;, ElectronicSpinOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_electronic_spin_operator" kindref="compound">ElectronicSpinOperator</ref> &amp;</type>
          <declname>fq_one_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the electronic spin operator in this general spinor basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_one_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The (first-quantized) electronic spin operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The electronic spin operator expressed in this spinor basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="546" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="546" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1ac39d64f41ada5e3f4293774fbd8e9924" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const OrbitalZeemanOperator &amp;op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, GSQOneElectronOperator&lt; product_t&lt; OrbitalZeemanOperator::Scalar, ExpansionScalar &gt;, OrbitalZeemanOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_orbital_zeeman_operator" kindref="compound">OrbitalZeemanOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the orbital Zeeman operator in this general spinor basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The (first-quantized) orbital Zeeman operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The orbital Zeeman operator expressed in this spinor basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="600" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="600" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1aa28937e7f33c89f090c28a40a600596d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const DiamagneticOperator &amp;op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, GSQOneElectronOperator&lt; product_t&lt; DiamagneticOperator::Scalar, ExpansionScalar &gt;, DiamagneticOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_diamagnetic_operator" kindref="compound">DiamagneticOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the diamagnetic operator in this general spinor basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The (first-quantized) diamagnetic operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The diamagnetic operator expressed in this spinor basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="617" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="617" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a7acbad3ae2f272662b0ae361947d9ee3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const SpinZeemanOperator &amp;op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, GSQOneElectronOperator&lt; product_t&lt; SpinZeemanOperator::Scalar, ExpansionScalar &gt;, SpinZeemanOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_spin_zeeman_operator" kindref="compound">SpinZeemanOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the spin Zeeman operator in this general spinor basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The (first-quantized) spin Zeeman operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The diamagnetic operator expressed in this spinor basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="659" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="659" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1ae8b118b13e728b6fdf2db08a19457c7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const CoulombRepulsionOperator &amp;coulomb_op) const -&gt; enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, GSQTwoElectronOperator&lt; product_t&lt; CoulombRepulsionOperator::Scalar, ExpansionScalar &gt;, CoulombRepulsionOperator::Vectorizer &gt; &gt;</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_coulomb_repulsion_operator" kindref="compound">CoulombRepulsionOperator</ref> &amp;</type>
          <declname>coulomb_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the Coulomb operator in this general spinor basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coulomb_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The first-quantized Coulomb operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized operator corresponding to the Coulomb operator.</para>
</simplesect>
<simplesect kind="note"><para>For efficiency reasons (two-electron integrals over London orbitals are particularly slow to calculate), we assume that the alpha and beta scalar bases are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="678" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="678" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a11fe5ed21d1cf075f43c8bcbdfacca92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, <ref refid="class_g_q_c_p_1_1_london_g_t_o_shell" kindref="compound">LondonGTOShell</ref> &gt;::value, <ref refid="namespace_g_q_c_p_1a18949b2153b626c420238dab2a4e7185" kindref="member">GSQHamiltonian</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref> &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, GSQHamiltonian&lt; ExpansionScalar &gt; &gt; GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const FQMolecularMagneticHamiltonian &amp;fq_hamiltonian) const</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_f_q_molecular_magnetic_hamiltonian" kindref="compound">FQMolecularMagneticHamiltonian</ref> &amp;</type>
          <declname>fq_hamiltonian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the molecular magnetic Hamiltonian.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_hamiltonian</parametername>
</parameternamelist>
<parameterdescription>
<para>The molecular magnetic Hamiltonian.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized molecular magnetic Hamiltonian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="743" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="743" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a4968d4266157455e4e8b0e69f6b0487a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, <ref refid="class_g_q_c_p_1_1_london_g_t_o_shell" kindref="compound">LondonGTOShell</ref> &gt;::value, <ref refid="namespace_g_q_c_p_1a18949b2153b626c420238dab2a4e7185" kindref="member">GSQHamiltonian</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref> &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, LondonGTOShell &gt;::value, GSQHamiltonian&lt; ExpansionScalar &gt; &gt; GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const FQMolecularPauliHamiltonian &amp;fq_hamiltonian) const</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_f_q_molecular_pauli_hamiltonian" kindref="compound">FQMolecularPauliHamiltonian</ref> &amp;</type>
          <declname>fq_hamiltonian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the molecular Pauli Hamiltonian.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_hamiltonian</parametername>
</parameternamelist>
<parameterdescription>
<para>The molecular Pauli Hamiltonian.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized molecular Pauli Hamiltonian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="765" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="765" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1adb07b2944761a3dfa4952f54e29f7d12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_g_q_c_p_1a18949b2153b626c420238dab2a4e7185" kindref="member">GSQHamiltonian</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref> &gt;</type>
        <definition>GSQHamiltonian&lt; ExpansionScalar &gt; GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const FQMolecularHamiltonian &amp;fq_hamiltonian) const</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_f_q_molecular_hamiltonian" kindref="compound">FQMolecularHamiltonian</ref> &amp;</type>
          <declname>fq_hamiltonian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the molecular Hamiltonian.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_hamiltonian</parametername>
</parameternamelist>
<parameterdescription>
<para>The molecular Hamiltonian.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized molecular Hamiltonian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="792" column="20" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="792" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a07c10877443c76843ccebee8e5df2a68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_scalar_g_s_q_one_electron_operator_product" kindref="compound">ScalarGSQOneElectronOperatorProduct</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref> &gt;</type>
        <definition>ScalarGSQOneElectronOperatorProduct&lt; ExpansionScalar &gt; GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::quantize</definition>
        <argsstring>(const ElectronicSpinSquaredOperator &amp;fq_S2_op) const</argsstring>
        <name>quantize</name>
        <qualifiedname>GQCP::GSpinorBasis::quantize</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_electronic_spin_squared_operator" kindref="compound">ElectronicSpinSquaredOperator</ref> &amp;</type>
          <declname>fq_S2_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize the electronic S^2 operator in this spinor basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fq_S2_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The first-quantized electronic S^2 operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The second-quantized representation of the electronic S^2 operator in this spinor basis.</para>
</simplesect>
<simplesect kind="note"><para>Due to the way one-electron products are implemented, this quantization will only provide the correct result if the spinor basis is orthonormal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="812" column="41" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="812" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a84558401a2607c6b72621759c7874f76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_g_q_c_p_1_1_spin_resolved" kindref="compound">SpinResolved</ref>&lt; <ref refid="class_g_q_c_p_1_1_scalar_basis" kindref="compound">ScalarBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &gt; &amp;</type>
        <definition>const SpinResolved&lt; ScalarBasis&lt; Shell &gt; &gt; &amp; GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::scalarBases</definition>
        <argsstring>() const</argsstring>
        <name>scalarBases</name>
        <qualifiedname>GQCP::GSpinorBasis::scalarBases</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The scalar bases for the alpha and beta components of the spinors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="837" column="24" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="837" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a9bca5ab09f3984352e5c40cdb75eec8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_g_mulliken_domain" kindref="compound">GMullikenDomain</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref> &gt;</type>
        <definition>GMullikenDomain&lt; ExpansionScalar &gt; GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::mullikenDomain</definition>
        <argsstring>(const std::function&lt; bool(const BasisFunction &amp;)&gt; &amp;selector) const</argsstring>
        <name>mullikenDomain</name>
        <qualifiedname>GQCP::GSpinorBasis::mullikenDomain</qualifiedname>
        <param>
          <type>const std::function&lt; bool(const <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a30600aed0df6ba06f37e8d0f267da733" kindref="member">BasisFunction</ref> &amp;)&gt; &amp;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MARK: Mulliken domain Partition this set of generalized spinors according to the Mulliken partitioning scheme.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>selector</parametername>
</parameternamelist>
<parameterdescription>
<para>A function that returns true for basis functions that should be included the Mulliken domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="class_g_q_c_p_1_1_g_mulliken_domain" kindref="compound">GMullikenDomain</ref></computeroutput> for the AOs selected by the supplied selector function.</para>
</simplesect>
<simplesect kind="note"><para>The underlying scalar bases are assumed to be equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="853" column="21" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="853" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a46340b1127f69b7cec4a82455ecd8eb4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_g_mulliken_domain" kindref="compound">GMullikenDomain</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref> &gt;</type>
        <definition>GMullikenDomain&lt; ExpansionScalar &gt; GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::mullikenDomain</definition>
        <argsstring>(const std::function&lt; bool(const Shell &amp;)&gt; &amp;selector) const</argsstring>
        <name>mullikenDomain</name>
        <qualifiedname>GQCP::GSpinorBasis::mullikenDomain</qualifiedname>
        <param>
          <type>const std::function&lt; bool(const <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &amp;)&gt; &amp;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Partition this set of generalized spinors according to the Mulliken partitioning scheme.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>selector</parametername>
</parameternamelist>
<parameterdescription>
<para>A function that returns true for shells that should be included the Mulliken domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="class_g_q_c_p_1_1_g_mulliken_domain" kindref="compound">GMullikenDomain</ref></computeroutput> for the AOs selected by the supplied selector function.</para>
</simplesect>
<simplesect kind="note"><para>The underlying scalar bases are assumed to be equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="870" column="21" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="870" bodyend="875"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1ae3d53efda9afb127d469be037340017e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref>, <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt;</type>
        <definition>static GSpinorBasis&lt; ExpansionScalar, Shell &gt; GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::FromRestricted</definition>
        <argsstring>(const RSpinOrbitalBasis&lt; ExpansionScalar, Shell &gt; &amp;r_spinor_basis)</argsstring>
        <name>FromRestricted</name>
        <qualifiedname>GQCP::GSpinorBasis::FromRestricted</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis" kindref="compound">RSpinOrbitalBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref>, <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &amp;</type>
          <declname>r_spinor_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a restricted spin-orbital basis into a generalized framework, yielding a generalized coefficient matrix that is spin-blocked out.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r_spinor_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The restricted spinor basis.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The restricted spinor basis as a generalized one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="231" column="25" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="231" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_g_spinor_basis_1a4110d579384bf2f61b47014b82efe595" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref>, <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt;</type>
        <definition>static GSpinorBasis&lt; ExpansionScalar, Shell &gt; GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;::FromUnrestricted</definition>
        <argsstring>(const USpinOrbitalBasis&lt; ExpansionScalar, Shell &gt; &amp;u_spinor_basis)</argsstring>
        <name>FromUnrestricted</name>
        <qualifiedname>GQCP::GSpinorBasis::FromUnrestricted</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_u_spin_orbital_basis" kindref="compound">USpinOrbitalBasis</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" kindref="member">ExpansionScalar</ref>, <ref refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" kindref="member">Shell</ref> &gt; &amp;</type>
          <declname>u_spinor_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert an unrestricted spin-orbital basis into a generalized framework, yielding a generalized coefficient matrix that is spin-blocked out.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u_spinor_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The unrestricted spinor basis.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The generalized spinor basis corresponding to the unrestricted spin-orbital basis.</para>
</simplesect>
<simplesect kind="note"><para>We assume that the unrestricted spin-orbital basis has equal underlying scalar bases for the alpha- and beta-spin-orbitals. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="249" column="25" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="249" bodyend="254"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A general spinor basis, i.e. a spinor basis without any restrictions on the expansion of the alpha and beta components of the spinors in terms of the underlying (possibly different) scalar bases.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_ExpansionScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type used to represent an expansion coefficient of the spinors in the underlying scalar orbitals: real or complex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Shell</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of shell the underlying scalar bases contain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The individual columns of the coefficient matrix represent the spinors of this basis; they are not ordered by increasing single-particle energy. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>GQCP::BasisTransformable&lt; Type &gt;</label>
        <link refid="class_g_q_c_p_1_1_basis_transformable"/>
      </node>
      <node id="3">
        <label>GQCP::CRTP&lt; _Derived &gt;</label>
        <link refid="class_g_q_c_p_1_1_c_r_t_p"/>
      </node>
      <node id="1">
        <label>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;</label>
        <link refid="class_g_q_c_p_1_1_g_spinor_basis"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>GQCP::JacobiRotatable&lt; T &gt;</label>
        <link refid="class_g_q_c_p_1_1_jacobi_rotatable"/>
      </node>
      <node id="2">
        <label>GQCP::SimpleSpinorBasis&lt; _ExpansionScalar, GSpinorBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple_spinor_basis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>GQCP::BasisTransformableTraits&lt; FinalSpinorBasis &gt;</label>
        <link refid="struct_g_q_c_p_1_1_basis_transformable_traits"/>
      </node>
      <node id="4">
        <label>GQCP::BasisTransformable&lt; Type &gt;</label>
        <link refid="class_g_q_c_p_1_1_basis_transformable"/>
      </node>
      <node id="3">
        <label>GQCP::CRTP&lt; _Derived &gt;</label>
        <link refid="class_g_q_c_p_1_1_c_r_t_p"/>
      </node>
      <node id="1">
        <label>GQCP::GSpinorBasis&lt; _ExpansionScalar, _Shell &gt;</label>
        <link refid="class_g_q_c_p_1_1_g_spinor_basis"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>GQCP::JacobiRotatable&lt; T &gt;</label>
        <link refid="class_g_q_c_p_1_1_jacobi_rotatable"/>
      </node>
      <node id="2">
        <label>GQCP::SimpleSpinorBasis&lt; _ExpansionScalar, GSpinorBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_simple_spinor_basis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>#C</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" line="61" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/GSpinorBasis.hpp" bodystart="62" bodyend="876"/>
    <listofallmembers>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1aad76bcfb2f9b07564621f91dd4c36bd4" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>Base</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a30600aed0df6ba06f37e8d0f267da733" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>BasisFunction</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a9abca647ddeb9772b5c58fe7366204ac" prot="protected" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>C</name></member>
      <member refid="class_g_q_c_p_1_1_c_r_t_p_1afbb2119ea002c348828c45726583d863" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>derived</name></member>
      <member refid="class_g_q_c_p_1_1_c_r_t_p_1a28a8bce1d2ca75d90ecf1295dd640f13" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>derived</name></member>
      <member refid="class_g_q_c_p_1_1_c_r_t_p_1ab72cbeb2fad6d811d4f6fcd2c962b55e" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>Derived</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a6f28eee1bd0c2890b7fd3355913fb414" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>expansion</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ad1e7388d307f59370481718021fd8710" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>ExpansionScalar</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1aa3b991f95864658a48cb6b7360dca2aa" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>FinalSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ae3d53efda9afb127d469be037340017e" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>FromRestricted</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a4110d579384bf2f61b47014b82efe595" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>FromUnrestricted</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a96ac56ccbfef44192acacd8b606311c9" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>GSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1af07dc3114327e1708026c89dad13e8ef" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>GSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a831b047849c8af5734f56fde89e9b692" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>GSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ad87001892202e25bed0b75b80c316c3b" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>GSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a7cdbaa05984076fa4ced02496734e0e6" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>GSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ae74073c7ae5fd36cb4c9ae9744415bd1" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>GSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a7c5f3e3058f54379889c149ddad85bde" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>GSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a922a8e4c39e0ac447e015c4ccc592931" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>GSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a2f38b86e3bf90218d22d7625f8fdd169" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>GSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a0b543fbfcf49f82f6869e8e5cf09819a" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>GSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1aa00b804a0f522ee6b046e45d9e39a7b8" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>isOrthonormal</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1aa137ad5da7e46d3f6bfb30e1c8a4a71f" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>JacobiRotationType</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a7dcbcf5803cb8c3b4b65cb49ce3f5f69" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>lowdinOrthonormalization</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a53160b32246fe945f0fb7aa46d15c4e9" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>lowdinOrthonormalize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a9bca5ab09f3984352e5c40cdb75eec8b" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>mullikenDomain</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a46340b1127f69b7cec4a82455ecd8eb4" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>mullikenDomain</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a9062fb369d11c2ede60ae0dd34d9cbd8" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>numberOfCoefficients</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ad71c2691865d2ba1ee0d038b81ceb8a8" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>numberOfSpinors</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a42b2813a11f43e74c7fa60ee90a5ae0e" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>overlap</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ac605d1a1c6a417c9dfe63329f0e894e4" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>Primitive</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a3545f357983b7395d9626d9875ff62a4" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a4b71a43e9b15543064ee8e6c6f205a56" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1afa612dafddb17f11881b67b45fe14271" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ab194f96b8477ee3552387ff42ebe113f" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a7cfac63f7b59c179dcd1ddd97a60f43f" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ab374832e9980b6b6917913c9cf9ed9f8" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ac39d64f41ada5e3f4293774fbd8e9924" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1aa28937e7f33c89f090c28a40a600596d" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a7acbad3ae2f272662b0ae361947d9ee3" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ae8b118b13e728b6fdf2db08a19457c7e" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a11fe5ed21d1cf075f43c8bcbdfacca92" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a4968d4266157455e4e8b0e69f6b0487a" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1adb07b2944761a3dfa4952f54e29f7d12" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a07c10877443c76843ccebee8e5df2a68" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>quantize</name></member>
      <member refid="class_g_q_c_p_1_1_basis_transformable_1a2e107bd3cf4d603c003c8cb9357d0094" prot="public" virt="non-virtual" ambiguityscope="GQCP::"><scope>GQCP::GSpinorBasis</scope><name>rotate</name></member>
      <member refid="class_g_q_c_p_1_1_jacobi_rotatable_1a11657b774fe75246bef1f7849f9aad72" prot="public" virt="non-virtual" ambiguityscope="GQCP::JacobiRotatable::"><scope>GQCP::GSpinorBasis</scope><name>rotate</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a35d1cde61d7596a61df2c39ddef578b1" prot="public" virt="virtual"><scope>GQCP::GSpinorBasis</scope><name>rotated</name></member>
      <member refid="class_g_q_c_p_1_1_basis_transformable_1ae0af50867dbd06193b64c2bcdd6b51ba" prot="public" virt="virtual" ambiguityscope="GQCP::BasisTransformable::"><scope>GQCP::GSpinorBasis</scope><name>rotated</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a9b4dd7434df5fbe0e5a9557b6645d764" prot="private" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>scalar_bases</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a84558401a2607c6b72621759c7874f76" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>scalarBases</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1a43378faf70d64f2caa796282bac433e8" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>Shell</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1abbad8e4366b720933a378ea276bf9502" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>simpleDimension</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1af946e8de1e88562c95630a0aef5f6a77" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>SimpleSpinorBasis</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1a62e6854ce1fb8ab009b0479586337f8e" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>SQOverlapOperator</name></member>
      <member refid="class_g_q_c_p_1_1_basis_transformable_1aa55d3cf1b186ac2ec926e97a7b6d645f" prot="public" virt="virtual"><scope>GQCP::GSpinorBasis</scope><name>transform</name></member>
      <member refid="class_g_q_c_p_1_1_g_spinor_basis_1ac3b826302d446a0d413ab4ff5797148e" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>Transformation</name></member>
      <member refid="class_g_q_c_p_1_1_simple_spinor_basis_1aa6d146421985b3aefc1b4a9ec4aa6c54" prot="public" virt="non-virtual"><scope>GQCP::GSpinorBasis</scope><name>transformed</name></member>
      <member refid="class_g_q_c_p_1_1_basis_transformable_1a3c511224fd132184fb2e01579754850d" prot="public" virt="pure-virtual" ambiguityscope="GQCP::BasisTransformable::"><scope>GQCP::GSpinorBasis</scope><name>transformed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
