<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_g_q_c_p_1_1_evaluable_linear_combination" kind="class" language="C++" prot="public">
    <compoundname>GQCP::EvaluableLinearCombination</compoundname>
    <basecompoundref refid="class_g_q_c_p_1_1_function" prot="public" virt="non-virtual">GQCP::Function&lt; sum_t&lt; _Coefficient, _FunctionType::OutputType &gt;, _FunctionType::InputType &gt;</basecompoundref>
    <basecompoundref refid="class_g_q_c_p_1_1_vector_space_arithmetic" prot="public" virt="non-virtual">GQCP::VectorSpaceArithmetic&lt; EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;, _Coefficient &gt;</basecompoundref>
    <includes refid="_evaluable_linear_combination_8hpp" local="no">EvaluableLinearCombination.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename _Coefficient</type>
      </param>
      <param>
        <type>typename _FunctionType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" prot="public" static="no">
        <type>_Coefficient</type>
        <definition>using GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::Coefficient =  _Coefficient</definition>
        <argsstring></argsstring>
        <name>Coefficient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="49" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" prot="public" static="no">
        <type>_FunctionType</type>
        <definition>using GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::FunctionType =  _FunctionType</definition>
        <argsstring></argsstring>
        <name>FunctionType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="52" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a6b9cf06ae3c935c0d6b1c1b7d28110d2" prot="public" static="no">
        <type><ref refid="namespace_g_q_c_p_1ad8362e85425df3608c553719ea712652" kindref="member">sum_t</ref>&lt; <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref>, typename FunctionType::OutputType &gt;</type>
        <definition>using GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::OutputType =  sum_t&lt;Coefficient, typename FunctionType::OutputType&gt;</definition>
        <argsstring></argsstring>
        <name>OutputType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="55" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a4c6f34edfb5e99f458713b17f83ee1b8" prot="public" static="no">
        <type>typename FunctionType::InputType</type>
        <definition>using GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::InputType =  typename FunctionType::InputType</definition>
        <argsstring></argsstring>
        <name>InputType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="58" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a4ca4e4e246d918d6a2b67e8cbc9381c1" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination" kindref="compound">EvaluableLinearCombination</ref>&lt; <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref>, <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref> &gt;</type>
        <definition>using GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::Self =  EvaluableLinearCombination&lt;Coefficient, FunctionType&gt;</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="63" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_g_q_c_p_1_1_evaluable_linear_combination_1aefcf4dde90ef185404be60ac8444f02b" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref> &gt;</type>
        <definition>std::vector&lt;Coefficient&gt; GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::m_coefficients</definition>
        <argsstring></argsstring>
        <name>m_coefficients</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="68" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a0d23b4233a94a97d3db521801608b72e" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref> &gt;</type>
        <definition>std::vector&lt;FunctionType&gt; GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::m_functions</definition>
        <argsstring></argsstring>
        <name>m_functions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="71" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a0529edb4777e200fb6240d838f34ebb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::EvaluableLinearCombination</definition>
        <argsstring>(const std::vector&lt; Coefficient &gt; &amp;coefficients, const std::vector&lt; FunctionType &gt; &amp;functions)</argsstring>
        <name>EvaluableLinearCombination</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref> &gt; &amp;</type>
          <declname>coefficients</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref> &gt; &amp;</type>
          <declname>functions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>The coefficients of the linear combination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functions</parametername>
</parameternamelist>
<parameterdescription>
<para>The functions of the linear combination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="83" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a61234d87c74c9932c7bee6be4375701c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::EvaluableLinearCombination</definition>
        <argsstring>()</argsstring>
        <name>EvaluableLinearCombination</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default constructor. Construct a &apos;zero vector&apos;, i.e. an empty linear combination. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="96" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="96" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a01043ac2576fddd5dd42de1a7cf43d34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::EvaluableLinearCombination</definition>
        <argsstring>(const Coefficient coefficient, const FunctionType &amp;function)</argsstring>
        <name>EvaluableLinearCombination</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref></type>
          <declname>coefficient</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref> &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a &apos;linear combination&apos; of just one function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>The one coefficient that belongs to the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>The one single function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="106" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="106" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1ad8d1bbd7cf2085dd8f7198eb5f544382" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::EvaluableLinearCombination</definition>
        <argsstring>(const FunctionType &amp;function)</argsstring>
        <name>EvaluableLinearCombination</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref> &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a &apos;linear combination&apos; of just one function, setting the coefficient to 1.0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>The one single function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="115" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="115" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a2030546be9a5b3f205bc1c71bec4354f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::EvaluableLinearCombination</definition>
        <argsstring>(const int zero)</argsstring>
        <name>EvaluableLinearCombination</name>
        <param>
          <type>const int</type>
          <declname>zero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a &apos;zero vector&apos; given the &apos;0&apos; integer literal.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zero</parametername>
</parameternamelist>
<parameterdescription>
<para>The &apos;0&apos; integer literal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="124" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="124" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1ac0265148fa60434f4d32af7b176b028e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4ca4e4e246d918d6a2b67e8cbc9381c1" kindref="member">Self</ref> &amp;</type>
        <definition>Self&amp; GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::operator+=</definition>
        <argsstring>(const Self &amp;rhs) override</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4ca4e4e246d918d6a2b67e8cbc9381c1" kindref="member">Self</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Addition-assignment. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="140" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1ae65974d7a658eaa2bc78e5b26f02f255" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4ca4e4e246d918d6a2b67e8cbc9381c1" kindref="member">Self</ref> &amp;</type>
        <definition>Self&amp; GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::operator*=</definition>
        <argsstring>(const Coefficient &amp;a) override</argsstring>
        <name>operator*=</name>
        <reimplements refid="class_g_q_c_p_1_1_vector_space_arithmetic_1a1ea665b4c39561433d116ee4b6c1d911">operator*=</reimplements>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar multiplication-assignment. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="149" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="149" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a35ba5217282e8340992f5bedba5141ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::description</definition>
        <argsstring>() const</argsstring>
        <name>description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A textual description of this linear combination. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="171" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="171" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1af69af51a2d4f1912f4d980f6cb28d266" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The length of the linear combination, i.e. the number of coefficients/functions inside it. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="193" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref> &amp;</type>
        <definition>const Coefficient&amp; GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::coefficient</definition>
        <argsstring>(const size_t i) const</argsstring>
        <name>coefficient</name>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access a coefficient.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>An index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A read-only reference to the coefficient of this linear combination that corresponds to the given index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="207" column="23" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;Coefficient&gt;&amp; GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::coefficients</definition>
        <argsstring>() const</argsstring>
        <name>coefficients</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>All the coefficients of the linear combination. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="212" column="23" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a7828486f63995ac4a08056071b7d5bba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref> &amp;</type>
        <definition>const FunctionType&amp; GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::function</definition>
        <argsstring>(const size_t i) const</argsstring>
        <name>function</name>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access a function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>An index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A read-only reference to the function of this linear combination that corresponds to the given index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="221" column="24" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;FunctionType&gt;&amp; GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::functions</definition>
        <argsstring>() const</argsstring>
        <name>functions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>All the scalar functions of this linear combination. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="226" column="23" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a5c09be16f8ced29d9243f6da9877fffe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6b9cf06ae3c935c0d6b1c1b7d28110d2" kindref="member">OutputType</ref></type>
        <definition>OutputType GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::operator()</definition>
        <argsstring>(const InputType &amp;in) const override</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4c6f34edfb5e99f458713b17f83ee1b8" kindref="member">InputType</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evaluate this linear combination.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument for which the function is to be evaluated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function value of this linear combination for the given argument. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="240" column="16" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="240" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1aca009eb05e42ec82f9621d11a3a931bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::operator==</definition>
        <argsstring>(const Self &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4ca4e4e246d918d6a2b67e8cbc9381c1" kindref="member">Self</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The linear combination that this one is compared to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether this linear combination is equal to the other. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="262" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1ad3141b0c9149295e77aa768e134a415f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::append</definition>
        <argsstring>(const Coefficient &amp;coefficient, const FunctionType &amp;function)</argsstring>
        <name>append</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref> &amp;</type>
          <declname>coefficient</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref> &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append the given coefficient and function to this linear combination.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>The coefficient that should be appended to this linear combination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functions</parametername>
</parameternamelist>
<parameterdescription>
<para>The function that should be appended to this linear combination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="277" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="277" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a5fa37456db5398996bdfe66db554cf02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::appendWithThreshold</definition>
        <argsstring>(const Coefficient &amp;coefficient, const FunctionType &amp;function, const double threshold=1.0e-16)</argsstring>
        <name>appendWithThreshold</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref> &amp;</type>
          <declname>coefficient</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref> &amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>threshold</declname>
          <defval>1.0e-16</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append the given coefficient and function to this linear combination, but only if the coefficients are larger than the given threshold.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>The coefficient that should be appended to this linear combination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functions</parametername>
</parameternamelist>
<parameterdescription>
<para>The function that should be appended to this linear combination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The threshold for the (absolute value of the) coefficient in order to be included in this linear combination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="291" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="291" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_evaluable_linear_combination_1a5c7bcb1c402887a0feab4e464c891a93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;::append</definition>
        <argsstring>(const std::vector&lt; Coefficient &gt; &amp;coefficients, const std::vector&lt; FunctionType &gt; &amp;functions)</argsstring>
        <name>append</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" kindref="member">Coefficient</ref> &gt; &amp;</type>
          <declname>coefficients</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" kindref="member">FunctionType</ref> &gt; &amp;</type>
          <declname>functions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append the given coefficients and functions to this linear combination.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>The coefficients that should be appended to this linear combination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functions</parametername>
</parameternamelist>
<parameterdescription>
<para>The functions that should be appended to this linear combination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="308" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="308" bodyend="316"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A type that represents a linear combination of (homogeneous) mathematical functions.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Coefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_FunctionType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The type of the functions must derive from <ref refid="class_g_q_c_p_1_1_function" kindref="compound">GQCP::Function</ref>, i.e. it must be evaluable. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>GQCP::VectorSpaceArithmetic&lt; EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;, _Coefficient &gt;</label>
        <link refid="class_g_q_c_p_1_1_vector_space_arithmetic"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>GQCP::Function&lt; sum_t&lt; _Coefficient, _FunctionType::OutputType &gt;, _FunctionType::InputType &gt;</label>
        <link refid="class_g_q_c_p_1_1_function"/>
      </node>
      <node id="4">
        <label>GQCP::CRTP&lt; _Derived &gt;</label>
        <link refid="class_g_q_c_p_1_1_c_r_t_p"/>
      </node>
      <node id="1">
        <label>GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;</label>
        <link refid="class_g_q_c_p_1_1_evaluable_linear_combination"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>GQCP::VectorSpaceArithmetic&lt; EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;, _Coefficient &gt;</label>
        <link refid="class_g_q_c_p_1_1_vector_space_arithmetic"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>GQCP::Function&lt; sum_t&lt; _Coefficient, _FunctionType::OutputType &gt;, _FunctionType::InputType &gt;</label>
        <link refid="class_g_q_c_p_1_1_function"/>
      </node>
      <node id="4">
        <label>GQCP::CRTP&lt; _Derived &gt;</label>
        <link refid="class_g_q_c_p_1_1_c_r_t_p"/>
      </node>
      <node id="1">
        <label>GQCP::EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;</label>
        <link refid="class_g_q_c_p_1_1_evaluable_linear_combination"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" line="43" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/EvaluableLinearCombination.hpp" bodystart="45" bodyend="317"/>
    <listofallmembers>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ad3141b0c9149295e77aa768e134a415f" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>append</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a5c7bcb1c402887a0feab4e464c891a93" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>append</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a5fa37456db5398996bdfe66db554cf02" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>appendWithThreshold</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae0ad3778c716fd7a7cf5803ded7d3096" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>Coefficient</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a673cc04769b8cfe9834557f02ac81fdf" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>coefficient</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6754b7bcd43a7b84f6597e811aa20d7e" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>coefficients</name></member>
      <member refid="class_g_q_c_p_1_1_c_r_t_p_1a2266d4aacaad437e302033b24e1d6d11" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>derived</name></member>
      <member refid="class_g_q_c_p_1_1_c_r_t_p_1ab53c6ca668c4f27dd4aa51856b6aee91" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>derived</name></member>
      <member refid="class_g_q_c_p_1_1_c_r_t_p_1ab72cbeb2fad6d811d4f6fcd2c962b55e" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>Derived</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a35ba5217282e8340992f5bedba5141ff" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>description</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a0529edb4777e200fb6240d838f34ebb5" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>EvaluableLinearCombination</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a61234d87c74c9932c7bee6be4375701c" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>EvaluableLinearCombination</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a01043ac2576fddd5dd42de1a7cf43d34" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>EvaluableLinearCombination</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ad8d1bbd7cf2085dd8f7198eb5f544382" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>EvaluableLinearCombination</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a2030546be9a5b3f205bc1c71bec4354f" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>EvaluableLinearCombination</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a7828486f63995ac4a08056071b7d5bba" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>function</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a927503a9401aac67bbe0da355accc8bc" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>functions</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a08f379ee95b9b80e42a3570634d08d03" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>FunctionType</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4c6f34edfb5e99f458713b17f83ee1b8" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>InputType</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1af69af51a2d4f1912f4d980f6cb28d266" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>length</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1aefcf4dde90ef185404be60ac8444f02b" prot="protected" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>m_coefficients</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a0d23b4233a94a97d3db521801608b72e" prot="protected" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>m_functions</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a5c09be16f8ced29d9243f6da9877fffe" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>operator()</name></member>
      <member refid="class_g_q_c_p_1_1_function_1a921ee4632b3b07753bb1a9b16df38198" prot="public" virt="pure-virtual" ambiguityscope="Function&lt; sum_t&lt; _Coefficient, _FunctionType::OutputType &gt;, _FunctionType::InputType &gt;::"><scope>GQCP::EvaluableLinearCombination</scope><name>operator()</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ae65974d7a658eaa2bc78e5b26f02f255" prot="public" virt="virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>operator*=</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1ac0265148fa60434f4d32af7b176b028e" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>operator+=</name></member>
      <member refid="class_g_q_c_p_1_1_vector_space_arithmetic_1a241d8217aa2b2f34384a4439a968d555" prot="public" virt="pure-virtual" ambiguityscope="VectorSpaceArithmetic&lt; EvaluableLinearCombination&lt; _Coefficient, _FunctionType &gt;, _Coefficient &gt;::"><scope>GQCP::EvaluableLinearCombination</scope><name>operator+=</name></member>
      <member refid="class_g_q_c_p_1_1_vector_space_arithmetic_1a6b0d86c96ce2b6aaed10dc6d70a493bc" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>operator-</name></member>
      <member refid="class_g_q_c_p_1_1_vector_space_arithmetic_1a63a0cb54302a2d2f1d54af66e7527c4f" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>operator-=</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1aca009eb05e42ec82f9621d11a3a931bf" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>operator==</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a6b9cf06ae3c935c0d6b1c1b7d28110d2" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>OutputType</name></member>
      <member refid="class_g_q_c_p_1_1_evaluable_linear_combination_1a4ca4e4e246d918d6a2b67e8cbc9381c1" prot="public" virt="non-virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>Self</name></member>
      <member refid="class_g_q_c_p_1_1_function_1a1ee5b9fc5712bcf4f125a7cc3f4a4822" prot="public" virt="virtual"><scope>GQCP::EvaluableLinearCombination</scope><name>~Function</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
