<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_g_q_c_p_1_1_spin_resolved" kind="class" language="C++" prot="public">
    <compoundname>GQCP::SpinResolved</compoundname>
    <basecompoundref refid="class_g_q_c_p_1_1_spin_resolved_base" prot="public" virt="non-virtual">GQCP::SpinResolvedBase&lt; _Of, SpinResolved&lt; _Of &gt; &gt;</basecompoundref>
    <includes refid="_spin_resolved_8hpp" local="no">SpinResolved.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename _Of</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_spin_resolved_1af19dfed239cc0a9d1949f8dbe00dfd41" prot="public" static="no">
        <type>_Of</type>
        <definition>using GQCP::SpinResolved&lt; _Of &gt;::Of =  _Of</definition>
        <argsstring></argsstring>
        <name>Of</name>
        <qualifiedname>GQCP::SpinResolved::Of</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/SpinResolved.hpp" line="37" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/SpinResolved.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_spin_resolved_1a4822a07715e3b9af5d97c669ddd6c077" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_spin_resolved_1af19dfed239cc0a9d1949f8dbe00dfd41" kindref="member">Of</ref></type>
        <definition>using GQCP::SpinResolved&lt; _Of &gt;::ComponentType =  Of</definition>
        <argsstring></argsstring>
        <name>ComponentType</name>
        <qualifiedname>GQCP::SpinResolved::ComponentType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/SpinResolved.hpp" line="38" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/SpinResolved.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_spin_resolved_1af40f6d927f9826f2ce80ed5ff75cdf9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GQCP::SpinResolved&lt; _Of &gt;::operator==</definition>
        <argsstring>(const SpinResolved&lt; Of &gt; &amp;other)</argsstring>
        <name>operator==</name>
        <qualifiedname>GQCP::SpinResolved::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_spin_resolved" kindref="compound">SpinResolved</ref>&lt; <ref refid="class_g_q_c_p_1_1_spin_resolved_1af19dfed239cc0a9d1949f8dbe00dfd41" kindref="member">Of</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the other encapsulation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether this <ref refid="class_g_q_c_p_1_1_spin_resolved" kindref="compound">SpinResolved</ref> object is equal to the other <ref refid="class_g_q_c_p_1_1_spin_resolved" kindref="compound">SpinResolved</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/SpinResolved.hpp" line="58" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/SpinResolved.hpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_spin_resolved_1acd8cb700a56d70bcae679c38b1aef04c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GQCP::SpinResolved&lt; _Of &gt;::operator!=</definition>
        <argsstring>(const SpinResolved&lt; Of &gt; &amp;other)</argsstring>
        <name>operator!=</name>
        <qualifiedname>GQCP::SpinResolved::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_spin_resolved" kindref="compound">SpinResolved</ref>&lt; <ref refid="class_g_q_c_p_1_1_spin_resolved_1af19dfed239cc0a9d1949f8dbe00dfd41" kindref="member">Of</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the other encapsulation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether this <ref refid="class_g_q_c_p_1_1_spin_resolved" kindref="compound">SpinResolved</ref> object is not equal to the other <ref refid="class_g_q_c_p_1_1_spin_resolved" kindref="compound">SpinResolved</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/SpinResolved.hpp" line="65" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/SpinResolved.hpp" bodystart="65" bodyend="65"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A utility type encapsulating an alpha- and beta-type. In contrast to <computeroutput><ref refid="class_g_q_c_p_1_1_spin_resolved_base" kindref="compound">SpinResolvedBase</ref></computeroutput>, this class is used as an instantiatable type, much like you would use a std::vector&lt;_Of&gt;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_Of</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the alpha- and beta-objects. The name &apos;Of&apos; is chosen for a natural reading <computeroutput><ref refid="class_g_q_c_p_1_1_spin_resolved" kindref="compound">SpinResolved</ref>&lt;_Of&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>GQCP::SpinResolved&lt; _Of &gt;</label>
        <link refid="class_g_q_c_p_1_1_spin_resolved"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>GQCP::SpinResolvedBase&lt; _Of, SpinResolved&lt; _Of &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_spin_resolved_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>GQCP::SpinResolved&lt; _Of &gt;</label>
        <link refid="class_g_q_c_p_1_1_spin_resolved"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>GQCP::SpinResolvedBase&lt; _Of, SpinResolved&lt; _Of &gt; &gt;</label>
        <link refid="class_g_q_c_p_1_1_spin_resolved_base"/>
      </node>
    </collaborationgraph>
    <location file="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/SpinResolved.hpp" line="33" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/SpinResolved.hpp" bodystart="34" bodyend="66"/>
    <listofallmembers>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1accab13c5e8be1be72246ab1fe440cc1a" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>alpha</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1a1dfb8ca22ac80e83c47db5b7dc3ddd44" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>alpha</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1a070d0be1f00ac25b16c623e6679bb0f6" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>beta</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1a9874eb94be81b82ff933f14532cea3c2" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>beta</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1abc73c03917a9bc4469007c832b7dc8d0" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>component</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1a091d5449d9bedc3d2b8c63b1a54dce30" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>component</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_1a4822a07715e3b9af5d97c669ddd6c077" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>ComponentType</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1a6074bc4e9b29958b9fb2ade214182b42" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>Derived</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1ad684026f9ce2481de03ed06267365e46" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>FromEqual</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_1af19dfed239cc0a9d1949f8dbe00dfd41" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>Of</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_1acd8cb700a56d70bcae679c38b1aef04c" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>operator!=</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_1af40f6d927f9826f2ce80ed5ff75cdf9c" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>operator==</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1ac2ecb42d733bb8ddf78fdb011855dcdc" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>Self</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1ac6430934631d0e81584d742dcb28e524" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>SpinResolvedBase</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1a3830b1d56ee5b6bc0132d1026025ce07" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>SpinResolvedBase</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1a855eff9779b50d5b390b39330d5c69ab" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>SpinResolvedBase</name></member>
      <member refid="class_g_q_c_p_1_1_spin_resolved_base_1a9fd9984b90c113bc10b86bcfe5631a32" prot="public" virt="non-virtual"><scope>GQCP::SpinResolved</scope><name>SpinResolvedBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
