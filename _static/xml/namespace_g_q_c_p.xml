<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespace_g_q_c_p" kind="namespace" language="C++">
    <compoundname>GQCP</compoundname>
    <innerclass refid="struct_g_q_c_p_1_1___unique__if" prot="public">GQCP::_Unique_if</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1___unique__if_3_01_t_0f_0e_4" prot="public">GQCP::_Unique_if&lt; T[]&gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1___unique__if_3_01_t_0f_n_0e_4" prot="public">GQCP::_Unique_if&lt; T[N]&gt;</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_adjacency_matrix" prot="public">GQCP::AdjacencyMatrix</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_algorithm" prot="public">GQCP::Algorithm</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_angular_momentum_operator" prot="public">GQCP::AngularMomentumOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_a_p1ro_g_geminal_coefficients" prot="public">GQCP::AP1roGGeminalCoefficients</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_a_p1ro_g_jacobi_orbital_optimizer" prot="public">GQCP::AP1roGJacobiOrbitalOptimizer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_a_p1ro_g_lagrangian_newton_orbital_optimizer" prot="public">GQCP::AP1roGLagrangianNewtonOrbitalOptimizer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_a_p_i_g_geminal_coefficients" prot="public">GQCP::APIGGeminalCoefficients</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_array" prot="public">GQCP::Array</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_electrical_response_solver" prot="public">GQCP::BaseElectricalResponseSolver</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_f_q_operator" prot="public">GQCP::BaseFQOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_hessian_modifier" prot="public">GQCP::BaseHessianModifier</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_matrix_primitive_integral_engine" prot="public">GQCP::BaseMatrixPrimitiveIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_nuclear_operator" prot="public">GQCP::BaseNuclearOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_one_electron_integral_buffer" prot="public">GQCP::BaseOneElectronIntegralBuffer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_one_electron_integral_engine" prot="public">GQCP::BaseOneElectronIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_orbital_optimizer" prot="public">GQCP::BaseOrbitalOptimizer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_reference_dependent_operator" prot="public">GQCP::BaseReferenceDependentOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_scalar_f_q_operator" prot="public">GQCP::BaseScalarFQOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_scalar_primitive_integral_engine" prot="public">GQCP::BaseScalarPrimitiveIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_two_electron_integral_buffer" prot="public">GQCP::BaseTwoElectronIntegralBuffer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_two_electron_integral_engine" prot="public">GQCP::BaseTwoElectronIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_base_vector_primitive_integral_engine" prot="public">GQCP::BaseVectorPrimitiveIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_basis_transformable" prot="public">GQCP::BasisTransformable</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits" prot="public">GQCP::BasisTransformableTraits</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_g1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; G1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_g2_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; G2DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_g_spinor_basis_3_01___expansion_scalar_00_01___shell_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; GSpinorBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_g_s_q_one_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; GSQOneElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_g_s_q_two_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; GSQTwoElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_g_transformation_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; GTransformation&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_orbital1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; Orbital1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_orbital2_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; Orbital2DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_pure_spin_resolved2_d_m_component_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; PureSpinResolved2DMComponent&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_pure_u_s_q_two_electron_operator_component_3_853a5b0b9f96d2ea948bda6ede7953a4" prot="public">GQCP::BasisTransformableTraits&lt; PureUSQTwoElectronOperatorComponent&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_r_spin_orbital_basis_3_01___expansion_scalar_00_01___shell_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_r_s_q_one_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; RSQOneElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_r_s_q_two_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; RSQTwoElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_r_transformation_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; RTransformation&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_scalar_g_s_q_one_electron_operator_product_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; ScalarGSQOneElectronOperatorProduct&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_scalar_u_s_q_one_electron_operator_product_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; ScalarUSQOneElectronOperatorProduct&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_simple_s_q_two_electron_operator_3_01___scalac9aaaed38cee8ca8d58805ca730bc427" prot="public">GQCP::BasisTransformableTraits&lt; SimpleSQTwoElectronOperator&lt; _Scalar, _Vectorizer, _DerivedOperator &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_simple_transformation_3_01_scalar_00_01_derived_transformation_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; SimpleTransformation&lt; Scalar, DerivedTransformation &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_spin_density1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; SpinDensity1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_spin_resolved1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; SpinResolved1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_spin_resolved1_d_m_component_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; SpinResolved1DMComponent&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_spin_resolved2_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; SpinResolved2DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_s_q_hamiltonian_3_01_scalar_s_q_one_electron_be19606f097c3d99f2f436e6296e27cc" prot="public">GQCP::BasisTransformableTraits&lt; SQHamiltonian&lt; ScalarSQOneElectronOperator, ScalarSQTwoElectronOperator &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_u_spin_orbital_basis_3_01___expansion_scalar_00_01___shell_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; USpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_u_spin_orbital_basis_component_3_01___expansi6865a2f7ca94c2358204b3f91682cab6" prot="public">GQCP::BasisTransformableTraits&lt; USpinOrbitalBasisComponent&lt; _ExpansionScalar, _Shell &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_u_s_q_one_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; USQOneElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_u_s_q_one_electron_operator_component_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; USQOneElectronOperatorComponent&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_u_s_q_two_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; USQTwoElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_u_transformation_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; UTransformation&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_basis_transformable_traits_3_01_u_transformation_component_3_01_scalar_01_4_01_4" prot="public">GQCP::BasisTransformableTraits&lt; UTransformationComponent&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_boys_function" prot="public">GQCP::BoysFunction</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_cartesian_exponents" prot="public">GQCP::CartesianExponents</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_cartesian_g_t_o" prot="public">GQCP::CartesianGTO</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_c_c_d_amplitudes_update" prot="public">GQCP::CCDAmplitudesUpdate</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_c_c_d_energy_calculation" prot="public">GQCP::CCDEnergyCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_c_c_d_intermediates_update" prot="public">GQCP::CCDIntermediatesUpdate</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_c_c_d_solver" prot="public">GQCP::CCDSolver</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_c_c_s_d_amplitudes_update" prot="public">GQCP::CCSDAmplitudesUpdate</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_c_c_s_d_energy_calculation" prot="public">GQCP::CCSDEnergyCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_c_c_s_d_environment" prot="public">GQCP::CCSDEnvironment</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_c_c_s_d_intermediates_update" prot="public">GQCP::CCSDIntermediatesUpdate</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_c_c_s_d_solver" prot="public">GQCP::CCSDSolver</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_compound_convergence_criterion" prot="public">GQCP::CompoundConvergenceCriterion</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_consecutive_iterates_norm_convergence" prot="public">GQCP::ConsecutiveIteratesNormConvergence</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_constant_damper" prot="public">GQCP::ConstantDamper</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_convergence_criterion" prot="public">GQCP::ConvergenceCriterion</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_correction_vector_calculation" prot="public">GQCP::CorrectionVectorCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_coulomb_repulsion_operator" prot="public">GQCP::CoulombRepulsionOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_c_r_t_p" prot="public">GQCP::CRTP</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_cubic_grid" prot="public">GQCP::CubicGrid</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_current_density_matrix_element" prot="public">GQCP::CurrentDensityMatrixElement</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_current_density_operator" prot="public">GQCP::CurrentDensityOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_dense_diagonalization" prot="public">GQCP::DenseDiagonalization</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_dense_vectorizer" prot="public">GQCP::DenseVectorizer</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_density_matrix_traits" prot="public">GQCP::DensityMatrixTraits</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_density_matrix_traits_3_01_g1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::DensityMatrixTraits&lt; G1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_density_matrix_traits_3_01_g2_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::DensityMatrixTraits&lt; G2DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_density_matrix_traits_3_01_orbital1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::DensityMatrixTraits&lt; Orbital1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_density_matrix_traits_3_01_orbital2_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::DensityMatrixTraits&lt; Orbital2DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_density_matrix_traits_3_01_pure_spin_resolved2_d_m_component_3_01_scalar_01_4_01_4" prot="public">GQCP::DensityMatrixTraits&lt; PureSpinResolved2DMComponent&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_density_matrix_traits_3_01_spin_density1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::DensityMatrixTraits&lt; SpinDensity1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_density_matrix_traits_3_01_spin_resolved1_d_m_component_3_01_scalar_01_4_01_4" prot="public">GQCP::DensityMatrixTraits&lt; SpinResolved1DMComponent&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_diagonal_r_h_f_fock_matrix_objective" prot="public">GQCP::DiagonalRHFFockMatrixObjective</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_diamagnetic_operator" prot="public">GQCP::DiamagneticOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_d_i_i_s" prot="public">GQCP::DIIS</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_d_o_c_i_newton_orbital_optimizer" prot="public">GQCP::DOCINewtonOrbitalOptimizer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_double_london_hermite_coulomb_integral" prot="public">GQCP::DoubleLondonHermiteCoulombIntegral</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_doubly_spin_resolved_base" prot="public">GQCP::DoublySpinResolvedBase</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_doubly_spin_resolved_basis_transformable" prot="public">GQCP::DoublySpinResolvedBasisTransformable</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_doubly_spin_resolved_jacobi_rotatable" prot="public">GQCP::DoublySpinResolvedJacobiRotatable</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_dyson_orbital" prot="public">GQCP::DysonOrbital</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_eigenpair" prot="public">GQCP::Eigenpair</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_eigenproblem_environment" prot="public">GQCP::EigenproblemEnvironment</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_electronic_density_operator" prot="public">GQCP::ElectronicDensityOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_electronic_dipole_operator" prot="public">GQCP::ElectronicDipoleOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_electronic_quadrupole_operator" prot="public">GQCP::ElectronicQuadrupoleOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_electronic_spin__z_operator" prot="public">GQCP::ElectronicSpin_zOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_electronic_spin_operator" prot="public">GQCP::ElectronicSpinOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_electronic_spin_squared_operator" prot="public">GQCP::ElectronicSpinSquaredOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_e_r_jacobi_localizer" prot="public">GQCP::ERJacobiLocalizer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_e_r_newton_localizer" prot="public">GQCP::ERNewtonLocalizer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_evaluable_g_s_q_one_electron_operator" prot="public">GQCP::EvaluableGSQOneElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_evaluable_linear_combination" prot="public">GQCP::EvaluableLinearCombination</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_evaluable_r_s_q_one_electron_operator" prot="public">GQCP::EvaluableRSQOneElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_evaluable_simple_s_q_one_electron_operator" prot="public">GQCP::EvaluableSimpleSQOneElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_evaluable_u_s_q_one_electron_operator" prot="public">GQCP::EvaluableUSQOneElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_evaluable_u_s_q_one_electron_operator_component" prot="public">GQCP::EvaluableUSQOneElectronOperatorComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_field" prot="public">GQCP::Field</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_f_q_molecular_hamiltonian" prot="public">GQCP::FQMolecularHamiltonian</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_f_q_molecular_magnetic_hamiltonian" prot="public">GQCP::FQMolecularMagneticHamiltonian</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_f_q_molecular_pauli_hamiltonian" prot="public">GQCP::FQMolecularPauliHamiltonian</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_function" prot="public">GQCP::Function</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_functional_one_electron_primitive_integral_engine" prot="public">GQCP::FunctionalOneElectronPrimitiveIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_functional_step" prot="public">GQCP::FunctionalStep</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_functional_two_electron_primitive_integral_engine" prot="public">GQCP::FunctionalTwoElectronPrimitiveIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_function_product" prot="public">GQCP::FunctionProduct</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g1_d_m" prot="public">GQCP::G1DM</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g2_d_m" prot="public">GQCP::G2DM</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_geminal_coefficients_interface" prot="public">GQCP::GeminalCoefficientsInterface</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_generalized_dense_diagonalization" prot="public">GQCP::GeneralizedDenseDiagonalization</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_generalized_eigenproblem_environment" prot="public">GQCP::GeneralizedEigenproblemEnvironment</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_general_spinor_tag" prot="public">GQCP::GeneralSpinorTag</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_h_f_density_matrix_calculation" prot="public">GQCP::GHFDensityMatrixCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_h_f_electronic_energy_calculation" prot="public">GQCP::GHFElectronicEnergyCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_h_f_error_calculation" prot="public">GQCP::GHFErrorCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_h_f_fock_matrix_calculation" prot="public">GQCP::GHFFockMatrixCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_h_f_fock_matrix_diagonalization" prot="public">GQCP::GHFFockMatrixDiagonalization</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_h_f_fock_matrix_d_i_i_s" prot="public">GQCP::GHFFockMatrixDIIS</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_h_f_s_c_f_environment" prot="public">GQCP::GHFSCFEnvironment</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_h_f_s_c_f_solver" prot="public">GQCP::GHFSCFSolver</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_mulliken_domain" prot="public">GQCP::GMullikenDomain</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_orbital_rotation_generators" prot="public">GQCP::GOrbitalRotationGenerators</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_spinor_basis" prot="public">GQCP::GSpinorBasis</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_s_q_one_electron_operator" prot="public">GQCP::GSQOneElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_s_q_two_electron_operator" prot="public">GQCP::GSQTwoElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_t_o_basis_set" prot="public">GQCP::GTOBasisSet</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_t_o_shell" prot="public">GQCP::GTOShell</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_g_transformation" prot="public">GQCP::GTransformation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_guess_vector_update" prot="public">GQCP::GuessVectorUpdate</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_hermite_coulomb_integral" prot="public">GQCP::HermiteCoulombIntegral</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_homogeneous_magnetic_field" prot="public">GQCP::HomogeneousMagneticField</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_hopping_matrix" prot="public">GQCP::HoppingMatrix</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_hubbard_hamiltonian" prot="public">GQCP::HubbardHamiltonian</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_implicit_matrix_slice" prot="public">GQCP::ImplicitMatrixSlice</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_implicit_rank_four_tensor_slice" prot="public">GQCP::ImplicitRankFourTensorSlice</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_integral_calculator" prot="public">GQCP::IntegralCalculator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_integral_engine" prot="public">GQCP::IntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_iterative_algorithm" prot="public">GQCP::IterativeAlgorithm</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_iterative_identities_hessian_modifier" prot="public">GQCP::IterativeIdentitiesHessianModifier</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_jacobi_orbital_optimizer" prot="public">GQCP::JacobiOrbitalOptimizer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_jacobi_rotatable" prot="public">GQCP::JacobiRotatable</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits" prot="public">GQCP::JacobiRotatableTraits</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_g1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; G1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_g2_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; G2DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_g_spinor_basis_3_01___expansion_scalar_00_01___shell_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; GSpinorBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_g_s_q_one_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; GSQOneElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_g_s_q_two_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; GSQTwoElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_g_transformation_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; GTransformation&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_orbital1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; Orbital1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_orbital2_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; Orbital2DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_pure_spin_resolved2_d_m_component_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; PureSpinResolved2DMComponent&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_pure_u_s_q_two_electron_operator_component_3_01_5951181e4bf7687a9c1d9d69dbbdf843" prot="public">GQCP::JacobiRotatableTraits&lt; PureUSQTwoElectronOperatorComponent&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_r_spin_orbital_basis_3_01___expansion_scalar_00_01___shell_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_r_s_q_one_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; RSQOneElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_r_s_q_two_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; RSQTwoElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_r_transformation_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; RTransformation&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_scalar_g_s_q_one_electron_operator_product_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; ScalarGSQOneElectronOperatorProduct&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_scalar_u_s_q_one_electron_operator_product_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; ScalarUSQOneElectronOperatorProduct&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_simple_s_q_two_electron_operator_3_01___scalar_00d91ca45987de7bd8c30b8b73d55a889" prot="public">GQCP::JacobiRotatableTraits&lt; SimpleSQTwoElectronOperator&lt; _Scalar, _Vectorizer, _DerivedOperator &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_simple_transformation_3_01_scalar_00_01_derived_transformation_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; SimpleTransformation&lt; Scalar, DerivedTransformation &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_spin_density1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; SpinDensity1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_spin_resolved1_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; SpinResolved1DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_spin_resolved1_d_m_component_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; SpinResolved1DMComponent&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_spin_resolved2_d_m_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; SpinResolved2DM&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_s_q_hamiltonian_3_01_scalar_s_q_one_electron_ope00587fd7cd98dde7a918eb5c533a9e4c" prot="public">GQCP::JacobiRotatableTraits&lt; SQHamiltonian&lt; ScalarSQOneElectronOperator, ScalarSQTwoElectronOperator &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_u_spin_orbital_basis_3_01___expansion_scalar_00_01___shell_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; USpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_u_spin_orbital_basis_component_3_01___expansion_scalar_00_01___shell_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; USpinOrbitalBasisComponent&lt; _ExpansionScalar, _Shell &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_u_s_q_one_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; USQOneElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_u_s_q_one_electron_operator_component_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; USQOneElectronOperatorComponent&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_u_s_q_two_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; USQTwoElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_u_transformation_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; UTransformation&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_jacobi_rotatable_traits_3_01_u_transformation_component_3_01_scalar_01_4_01_4" prot="public">GQCP::JacobiRotatableTraits&lt; UTransformationComponent&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_jacobi_rotation" prot="public">GQCP::JacobiRotation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_kinetic_operator" prot="public">GQCP::KineticOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_levi_civita_tensor" prot="public">GQCP::LeviCivitaTensor</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_libcint_interfacer" prot="public">GQCP::LibcintInterfacer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_libcint_one_electron_integral_buffer" prot="public">GQCP::LibcintOneElectronIntegralBuffer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_libcint_one_electron_integral_engine" prot="public">GQCP::LibcintOneElectronIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_libcint_two_electron_integral_buffer" prot="public">GQCP::LibcintTwoElectronIntegralBuffer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_libcint_two_electron_integral_engine" prot="public">GQCP::LibcintTwoElectronIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_libint_interfacer" prot="public">GQCP::LibintInterfacer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_libint_one_electron_integral_buffer" prot="public">GQCP::LibintOneElectronIntegralBuffer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_libint_one_electron_integral_engine" prot="public">GQCP::LibintOneElectronIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_libint_two_electron_integral_buffer" prot="public">GQCP::LibintTwoElectronIntegralBuffer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_libint_two_electron_integral_engine" prot="public">GQCP::LibintTwoElectronIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_linear_expansion" prot="public">GQCP::LinearExpansion</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_linear_momentum_operator" prot="public">GQCP::LinearMomentumOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_london_cartesian_g_t_o" prot="public">GQCP::LondonCartesianGTO</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_london_g_t_o_shell" prot="public">GQCP::LondonGTOShell</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_london_hermite_coulomb_integral" prot="public">GQCP::LondonHermiteCoulombIntegral</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_matrix" prot="public">GQCP::Matrix</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_matrix_representation_evaluation_container" prot="public">GQCP::MatrixRepresentationEvaluationContainer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_matrix_representation_evaluation_container_3_01_eigen_1_1_sparse_matrix_3_01___scalar_01_4_01_4" prot="public">GQCP::MatrixRepresentationEvaluationContainer&lt; Eigen::SparseMatrix&lt; _Scalar &gt; &gt;</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_matrix_representation_evaluation_container_3_01_vector_x_3_01___scalar_01_4_01_4" prot="public">GQCP::MatrixRepresentationEvaluationContainer&lt; VectorX&lt; _Scalar &gt; &gt;</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_matrix_vector_product_calculation" prot="public">GQCP::MatrixVectorProductCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_mc_murchie_davidson_coefficient" prot="public">GQCP::McMurchieDavidsonCoefficient</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_minimization_environment" prot="public">GQCP::MinimizationEnvironment</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_minimizer" prot="public">GQCP::Minimizer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_mixed_spin_resolved2_d_m_component" prot="public">GQCP::MixedSpinResolved2DMComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_mixed_u_s_q_two_electron_operator_component" prot="public">GQCP::MixedUSQTwoElectronOperatorComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_molecule" prot="public">GQCP::Molecule</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_newton_orbital_optimizer" prot="public">GQCP::NewtonOrbitalOptimizer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_non_linear_equation_environment" prot="public">GQCP::NonLinearEquationEnvironment</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_non_linear_equation_solver" prot="public">GQCP::NonLinearEquationSolver</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_nuclear_attraction_operator" prot="public">GQCP::NuclearAttractionOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_nuclear_dipole_operator" prot="public">GQCP::NuclearDipoleOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_nuclear_framework" prot="public">GQCP::NuclearFramework</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_nuclear_repulsion_operator" prot="public">GQCP::NuclearRepulsionOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_nucleus" prot="public">GQCP::Nucleus</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_one_electron_integral_buffer" prot="public">GQCP::OneElectronIntegralBuffer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_one_electron_integral_engine" prot="public">GQCP::OneElectronIntegralEngine</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits" prot="public">GQCP::OperatorTraits</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_evaluable_g_s_q_one_electron_operator_3_01___function_type_00_01___vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; EvaluableGSQOneElectronOperator&lt; _FunctionType, _Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_evaluable_r_s_q_one_electron_operator_3_01___function_type_00_01___vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; EvaluableRSQOneElectronOperator&lt; _FunctionType, _Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_evaluable_simple_s_q_one_electron_operator_3_01___functibeffe5be3a9adc112688459f3b5e00a5" prot="public">GQCP::OperatorTraits&lt; EvaluableSimpleSQOneElectronOperator&lt; _FunctionType, _Vectorizer, _DerivedEvaluableOperator &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_evaluable_u_s_q_one_electron_operator_3_01___function_type_00_01___vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; EvaluableUSQOneElectronOperator&lt; _FunctionType, _Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_evaluable_u_s_q_one_electron_operator_component_3_01___faa52a61b2cbfb19d3fb5e3044c4b12a3" prot="public">GQCP::OperatorTraits&lt; EvaluableUSQOneElectronOperatorComponent&lt; _FunctionType, _Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_g_s_q_one_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; GSQOneElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_g_s_q_two_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; GSQTwoElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_mixed_u_s_q_two_electron_operator_component_3_01___scalar_00_01___vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; MixedUSQTwoElectronOperatorComponent&lt; _Scalar, _Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_pure_u_s_q_two_electron_operator_component_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; PureUSQTwoElectronOperatorComponent&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_r_s_q_one_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; RSQOneElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_r_s_q_two_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; RSQTwoElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_simple_s_q_one_electron_operator_3_01___scalar_00_01___v0918eac09027259a60bbf357cfb65fd4" prot="public">GQCP::OperatorTraits&lt; SimpleSQOneElectronOperator&lt; _Scalar, _Vectorizer, _DerivedOperator &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_simple_s_q_two_electron_operator_3_01___scalar_00_01___v336f20cba8d7038e072e91080830f308" prot="public">GQCP::OperatorTraits&lt; SimpleSQTwoElectronOperator&lt; _Scalar, _Vectorizer, _DerivedOperator &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_s_q_hamiltonian_3_01_scalar_s_q_one_electron_operator_003e2277a2c43d3fcee1134049f20a895a" prot="public">GQCP::OperatorTraits&lt; SQHamiltonian&lt; ScalarSQOneElectronOperator, ScalarSQTwoElectronOperator &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_u_s_q_one_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; USQOneElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_u_s_q_one_electron_operator_component_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; USQOneElectronOperatorComponent&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_operator_traits_3_01_u_s_q_two_electron_operator_3_01_scalar_00_01_vectorizer_01_4_01_4" prot="public">GQCP::OperatorTraits&lt; USQTwoElectronOperator&lt; Scalar, Vectorizer &gt; &gt;</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_optimization_environment" prot="public">GQCP::OptimizationEnvironment</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_orbital1_d_m" prot="public">GQCP::Orbital1DM</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_orbital2_d_m" prot="public">GQCP::Orbital2DM</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_orbital_rotation_generator_traits" prot="public">GQCP::OrbitalRotationGeneratorTraits</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_orbital_rotation_generator_traits_3_01_g_transformation_3_01_scalar_01_4_01_4" prot="public">GQCP::OrbitalRotationGeneratorTraits&lt; GTransformation&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_orbital_rotation_generator_traits_3_01_r_transformation_3_01_scalar_01_4_01_4" prot="public">GQCP::OrbitalRotationGeneratorTraits&lt; RTransformation&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_orbital_rotation_generator_traits_3_01_u_transformation_3_01_scalar_01_4_01_4" prot="public">GQCP::OrbitalRotationGeneratorTraits&lt; UTransformation&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_orbital_rotation_generator_traits_3_01_u_transformation_component_3_01_scalar_01_4_01_4" prot="public">GQCP::OrbitalRotationGeneratorTraits&lt; UTransformationComponent&lt; Scalar &gt; &gt;</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_orbital_space" prot="public">GQCP::OrbitalSpace</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_orbital_zeeman_operator" prot="public">GQCP::OrbitalZeemanOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_overlap_operator" prot="public">GQCP::OverlapOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_primitive_angular_momentum_integral_engine" prot="public">GQCP::PrimitiveAngularMomentumIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_primitive_canonical_kinetic_energy_integral_engine" prot="public">GQCP::PrimitiveCanonicalKineticEnergyIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_primitive_coulomb_repulsion_integral_engine" prot="public">GQCP::PrimitiveCoulombRepulsionIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_primitive_electronic_dipole_integral_engine" prot="public">GQCP::PrimitiveElectronicDipoleIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_primitive_electronic_quadrupole_integral_engine" prot="public">GQCP::PrimitiveElectronicQuadrupoleIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_primitive_linear_momentum_integral_engine" prot="public">GQCP::PrimitiveLinearMomentumIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_primitive_nuclear_attraction_integral_engine" prot="public">GQCP::PrimitiveNuclearAttractionIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_primitive_overlap_integral_engine" prot="public">GQCP::PrimitiveOverlapIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_pure_spin_resolved2_d_m_component" prot="public">GQCP::PureSpinResolved2DMComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_pure_u_s_q_two_electron_operator_component" prot="public">GQCP::PureUSQTwoElectronOperatorComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_q_c_method_newton_orbital_optimizer" prot="public">GQCP::QCMethodNewtonOrbitalOptimizer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_q_c_structure" prot="public">GQCP::QCStructure</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_residual_vector_calculation" prot="public">GQCP::ResidualVectorCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_residual_vector_convergence" prot="public">GQCP::ResidualVectorConvergence</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_restricted_spinor_tag" prot="public">GQCP::RestrictedSpinorTag</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_h_f_density_matrix_calculation" prot="public">GQCP::RHFDensityMatrixCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_h_f_density_matrix_damper" prot="public">GQCP::RHFDensityMatrixDamper</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_h_f_electrical_response_solver" prot="public">GQCP::RHFElectricalResponseSolver</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_h_f_electronic_energy_calculation" prot="public">GQCP::RHFElectronicEnergyCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_h_f_error_calculation" prot="public">GQCP::RHFErrorCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_h_f_fock_matrix_calculation" prot="public">GQCP::RHFFockMatrixCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_h_f_fock_matrix_diagonalization" prot="public">GQCP::RHFFockMatrixDiagonalization</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_h_f_fock_matrix_d_i_i_s" prot="public">GQCP::RHFFockMatrixDIIS</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_h_f_s_c_f_environment" prot="public">GQCP::RHFSCFEnvironment</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_h_f_s_c_f_solver" prot="public">GQCP::RHFSCFSolver</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_mulliken_domain" prot="public">GQCP::RMullikenDomain</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_orbital_rotation_generators" prot="public">GQCP::ROrbitalRotationGenerators</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_spin_orbital_basis" prot="public">GQCP::RSpinOrbitalBasis</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_s_q_one_electron_operator" prot="public">GQCP::RSQOneElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_s_q_two_electron_operator" prot="public">GQCP::RSQTwoElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_r_transformation" prot="public">GQCP::RTransformation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_scalar_basis" prot="public">GQCP::ScalarBasis</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_scalar_g_s_q_one_electron_operator_product" prot="public">GQCP::ScalarGSQOneElectronOperatorProduct</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_scalar_u_s_q_one_electron_operator_product" prot="public">GQCP::ScalarUSQOneElectronOperatorProduct</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_shell_set" prot="public">GQCP::ShellSet</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_simple1_d_m" prot="public">GQCP::Simple1DM</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_simple2_d_m" prot="public">GQCP::Simple2DM</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_simple_orbital_rotation_generators" prot="public">GQCP::SimpleOrbitalRotationGenerators</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_simple_spinor_basis" prot="public">GQCP::SimpleSpinorBasis</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_simple_spin_orbital_basis" prot="public">GQCP::SimpleSpinOrbitalBasis</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_simple_s_q_one_electron_operator" prot="public">GQCP::SimpleSQOneElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_simple_s_q_two_electron_operator" prot="public">GQCP::SimpleSQTwoElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_simple_transformation" prot="public">GQCP::SimpleTransformation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spin_density1_d_m" prot="public">GQCP::SpinDensity1DM</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spinor" prot="public">GQCP::Spinor</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_spinor_basis_traits" prot="public">GQCP::SpinorBasisTraits</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_spinor_basis_traits_3_01_g_spinor_basis_3_01___expansion_scalar_00_01___shell_01_4_01_4" prot="public">GQCP::SpinorBasisTraits&lt; GSpinorBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_spinor_basis_traits_3_01_r_spin_orbital_basis_3_01___expansion_scalar_00_01___shell_01_4_01_4" prot="public">GQCP::SpinorBasisTraits&lt; RSpinOrbitalBasis&lt; _ExpansionScalar, _Shell &gt; &gt;</innerclass>
    <innerclass refid="struct_g_q_c_p_1_1_spinor_basis_traits_3_01_u_spin_orbital_basis_component_3_01_expansion_scalar_00_01_shell_01_4_01_4" prot="public">GQCP::SpinorBasisTraits&lt; USpinOrbitalBasisComponent&lt; ExpansionScalar, Shell &gt; &gt;</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spin_resolved" prot="public">GQCP::SpinResolved</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spin_resolved1_d_m" prot="public">GQCP::SpinResolved1DM</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spin_resolved1_d_m_component" prot="public">GQCP::SpinResolved1DMComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spin_resolved2_d_m" prot="public">GQCP::SpinResolved2DM</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spin_resolved_base" prot="public">GQCP::SpinResolvedBase</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spin_resolved_basis_transformable" prot="public">GQCP::SpinResolvedBasisTransformable</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spin_resolved_jacobi_rotatable" prot="public">GQCP::SpinResolvedJacobiRotatable</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spin_resolved_orbital_space" prot="public">GQCP::SpinResolvedOrbitalSpace</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_spin_zeeman_operator" prot="public">GQCP::SpinZeemanOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_s_q_hamiltonian" prot="public">GQCP::SQHamiltonian</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_s_q_operator_storage" prot="public">GQCP::SQOperatorStorage</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_s_q_operator_storage_base" prot="public">GQCP::SQOperatorStorageBase</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_square_matrix" prot="public">GQCP::SquareMatrix</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_square_rank_four_tensor" prot="public">GQCP::SquareRankFourTensor</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_step" prot="public">GQCP::Step</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_step_collection" prot="public">GQCP::StepCollection</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_storage_array" prot="public">GQCP::StorageArray</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_subspace_matrix_calculation" prot="public">GQCP::SubspaceMatrixCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_subspace_matrix_diagonalization" prot="public">GQCP::SubspaceMatrixDiagonalization</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_subspace_update" prot="public">GQCP::SubspaceUpdate</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_t1_amplitudes" prot="public">GQCP::T1Amplitudes</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_t2_amplitudes" prot="public">GQCP::T2Amplitudes</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_t2_d_i_i_s" prot="public">GQCP::T2DIIS</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_t2_error_calculation" prot="public">GQCP::T2ErrorCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_tensor" prot="public">GQCP::Tensor</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_two_electron_integral_buffer" prot="public">GQCP::TwoElectronIntegralBuffer</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_two_electron_integral_engine" prot="public">GQCP::TwoElectronIntegralEngine</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_h_f_density_matrix_calculation" prot="public">GQCP::UHFDensityMatrixCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_h_f_electronic_energy_calculation" prot="public">GQCP::UHFElectronicEnergyCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_h_f_error_calculation" prot="public">GQCP::UHFErrorCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_h_f_fock_matrix_calculation" prot="public">GQCP::UHFFockMatrixCalculation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_h_f_fock_matrix_diagonalization" prot="public">GQCP::UHFFockMatrixDiagonalization</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_h_f_fock_matrix_d_i_i_s" prot="public">GQCP::UHFFockMatrixDIIS</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_h_f_s_c_f_environment" prot="public">GQCP::UHFSCFEnvironment</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_h_f_s_c_f_solver" prot="public">GQCP::UHFSCFSolver</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_jacobi_rotation" prot="public">GQCP::UJacobiRotation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_mulliken_domain" prot="public">GQCP::UMullikenDomain</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_mulliken_domain_component" prot="public">GQCP::UMullikenDomainComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_unaltering_hessian_modifier" prot="public">GQCP::UnalteringHessianModifier</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_unrestricted_spinor_tag" prot="public">GQCP::UnrestrictedSpinorTag</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_orbital_rotation_generators" prot="public">GQCP::UOrbitalRotationGenerators</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_orbital_rotation_generators_component" prot="public">GQCP::UOrbitalRotationGeneratorsComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_spin_orbital_basis" prot="public">GQCP::USpinOrbitalBasis</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_spin_orbital_basis_component" prot="public">GQCP::USpinOrbitalBasisComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_s_q_one_electron_operator" prot="public">GQCP::USQOneElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_s_q_one_electron_operator_component" prot="public">GQCP::USQOneElectronOperatorComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_s_q_two_electron_operator" prot="public">GQCP::USQTwoElectronOperator</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_transformation" prot="public">GQCP::UTransformation</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_u_transformation_component" prot="public">GQCP::UTransformationComponent</innerclass>
    <innerclass refid="class_g_q_c_p_1_1v_a_p1ro_g_electrical_response_solver" prot="public">GQCP::vAP1roGElectricalResponseSolver</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_vector_space_arithmetic" prot="public">GQCP::VectorSpaceArithmetic</innerclass>
    <innerclass refid="class_g_q_c_p_1_1_weighted_grid" prot="public">GQCP::WeightedGrid</innerclass>
    <innernamespace refid="namespace_g_q_c_p_1_1_c_i_environment">GQCP::CIEnvironment</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1_eigenproblem_solver">GQCP::EigenproblemSolver</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1elements">GQCP::elements</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1_generalized_eigenproblem_solver">GQCP::GeneralizedEigenproblemSolver</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1libcint">GQCP::libcint</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1literals">GQCP::literals</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1_minimization">GQCP::Minimization</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1_non_linear_equation">GQCP::NonLinearEquation</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1_p_s_environment">GQCP::PSEnvironment</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1_q_c_method">GQCP::QCMethod</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1_q_c_model">GQCP::QCModel</innernamespace>
    <innernamespace refid="namespace_g_q_c_p_1_1units">GQCP::units</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespace_g_q_c_p_1a3030f130c450e7134eb0670b39ab246b" prot="public" static="no" strong="yes">
        <type></type>
        <name>OccupationType</name>
        <qualifiedname>GQCP::OccupationType</qualifiedname>
        <enumvalue id="namespace_g_q_c_p_1a3030f130c450e7134eb0670b39ab246bae0a1ca016cf8646a44cf4e074d194a4a" prot="public">
          <name>k_occupied</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1a3030f130c450e7134eb0670b39ab246bacc02c580e9e25896a6de2e072cf1630f" prot="public">
          <name>k_active</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1a3030f130c450e7134eb0670b39ab246baa3079536f69901e71a7fcdc955d1c47e" prot="public">
          <name>k_virtual</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The state of occupation for a spinor (index).</para>
<para><simplesect kind="note"><para>Since &apos;virtual&apos; is a C++ keyword, the different cases are given a prefix &apos;k_&apos; for &apos;constant&apos;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/OccupationType.hpp" line="29" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/OccupationType.hpp" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_g_q_c_p_1ac4c016a1668ae66892e5b4d8846613e8" prot="public" static="no" strong="no">
        <type></type>
        <name>CartesianDirection</name>
        <qualifiedname>GQCP::CartesianDirection</qualifiedname>
        <enumvalue id="namespace_g_q_c_p_1ac4c016a1668ae66892e5b4d8846613e8a2bb47fa9aafe67dde5d4e205193140b5" prot="public">
          <name>x</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1ac4c016a1668ae66892e5b4d8846613e8a8611d87f8dc5908d04f3d314c7c321b1" prot="public">
          <name>y</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1ac4c016a1668ae66892e5b4d8846613e8a11d242b501b62c0182e98a9d516335f7" prot="public">
          <name>z</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An enumeration containing the Cartesian directions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/CartesianDirection.hpp" line="27" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/CartesianDirection.hpp" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_g_q_c_p_1a637d38e9ff6e57c7933b057dd552aba8" prot="public" static="no" strong="no">
        <type></type>
        <name>DyadicCartesianDirection</name>
        <qualifiedname>GQCP::DyadicCartesianDirection</qualifiedname>
        <enumvalue id="namespace_g_q_c_p_1a637d38e9ff6e57c7933b057dd552aba8a864db11d769267fbd0c8560ad7334199" prot="public">
          <name>xx</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1a637d38e9ff6e57c7933b057dd552aba8a83aaee977be2aa0a74747821d09385ea" prot="public">
          <name>xy</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1a637d38e9ff6e57c7933b057dd552aba8a4428828cdfaba0bfb56aed813dafb46a" prot="public">
          <name>xz</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1a637d38e9ff6e57c7933b057dd552aba8a7a1ec4d0a90ac488f35e2f4647e5017c" prot="public">
          <name>yx</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1a637d38e9ff6e57c7933b057dd552aba8a738026b3a875282c992c81af1f240e30" prot="public">
          <name>yy</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1a637d38e9ff6e57c7933b057dd552aba8a9f7ed74131a859666d4f43dc067f0d13" prot="public">
          <name>yz</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1a637d38e9ff6e57c7933b057dd552aba8a23c24c7aebf7d3e329b4b13f3c85ea0c" prot="public">
          <name>zx</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1a637d38e9ff6e57c7933b057dd552aba8ab99689886319ae54695018c1b6083053" prot="public">
          <name>zy</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1a637d38e9ff6e57c7933b057dd552aba8abbe13bc2c965b1d916c442cbdcb26163" prot="public">
          <name>zz</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An enumeration containing the dyadic Cartesian directions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/DyadicCartesianDirection.hpp" line="27" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/DyadicCartesianDirection.hpp" bodystart="27" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_g_q_c_p_1aa03d875bac2a1696d399ae8136c705e5" prot="public" static="no" strong="yes">
        <type></type>
        <name>Ordering</name>
        <qualifiedname>GQCP::Ordering</qualifiedname>
        <enumvalue id="namespace_g_q_c_p_1aa03d875bac2a1696d399ae8136c705e5af695e73139b1c1d06d77655104370f00" prot="public">
          <name>ColumnMajor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1aa03d875bac2a1696d399ae8136c705e5abba47a7c03289a67ca347baa3f55be2f" prot="public">
          <name>RowMajor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An enumeration of possible axis ordering types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/DenseVectorizer.hpp" line="34" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/DenseVectorizer.hpp" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_g_q_c_p_1ac6f590924cfbbf11847a4ce174fe6e4f" prot="public" static="no" strong="no">
        <type></type>
        <name>Spin</name>
        <qualifiedname>GQCP::Spin</qualifiedname>
        <enumvalue id="namespace_g_q_c_p_1ac6f590924cfbbf11847a4ce174fe6e4fa834333af336cb600f3164028970f7ac6" prot="public">
          <name>alpha</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_g_q_c_p_1ac6f590924cfbbf11847a4ce174fe6e4fa072822a43e425c974197a1c86efb36c5" prot="public">
          <name>beta</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A type that can be used to represent the eigenvectors of the S_z operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/Spin.hpp" line="27" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/Spin.hpp" bodystart="27" bodyend="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespace_g_q_c_p_1abf3608f80cd58b5801026056ec5edef0" prot="public" static="no">
        <type>std::function&lt; int(double *, const int *, const int *, int, const int *, int, const double *)&gt;</type>
        <definition>using GQCP::Libcint1eFunction = typedef std::function&lt;int(double*, const int*, const int*, int, const int*, int, const double*)&gt;</definition>
        <argsstring></argsstring>
        <name>Libcint1eFunction</name>
        <qualifiedname>GQCP::Libcint1eFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp" line="65" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ab9e82f4c5fc3ac406b005fcbea227dfb" prot="public" static="no">
        <type>std::function&lt; int(double *, const int *, const int *, int, const int *, int, const double *, const CINTOpt *)&gt;</type>
        <definition>using GQCP::Libcint2eFunction = typedef std::function&lt;int(double*, const int*, const int*, int, const int*, int, const double*, const CINTOpt*)&gt;</definition>
        <argsstring></argsstring>
        <name>Libcint2eFunction</name>
        <qualifiedname>GQCP::Libcint2eFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp" line="66" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ac6643c2ed5e21d07597ca1dfaf5881c7" prot="public" static="no">
        <type>std::function&lt; void(CINTOpt **, const int *, int, const int *, int, const double *)&gt;</type>
        <definition>using GQCP::Libcint2eOptimizerFunction = typedef std::function&lt;void(CINTOpt**, const int*, int, const int*, int, const double*)&gt;</definition>
        <argsstring></argsstring>
        <name>Libcint2eOptimizerFunction</name>
        <qualifiedname>GQCP::Libcint2eOptimizerFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp" line="67" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a1ceb6c549993f7c5099525c4e0000a16" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ExpansionScalar</type>
          </param>
          <param>
            <type>typename Shell</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis" kindref="compound">RSpinOrbitalBasis</ref>&lt; ExpansionScalar, Shell &gt;</type>
        <definition>using GQCP::RSpinorBasis = typedef RSpinOrbitalBasis&lt;ExpansionScalar, Shell&gt;</definition>
        <argsstring></argsstring>
        <name>RSpinorBasis</name>
        <qualifiedname>GQCP::RSpinorBasis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" line="627" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/RSpinOrbitalBasis.hpp" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ac56b6631b5b2d8034ad931616abfa7a7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ExpansionScalar</type>
          </param>
          <param>
            <type>typename Shell</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_spin_orbital_basis" kindref="compound">USpinOrbitalBasis</ref>&lt; ExpansionScalar, Shell &gt;</type>
        <definition>using GQCP::USpinorBasis = typedef USpinOrbitalBasis&lt;ExpansionScalar, Shell&gt;</definition>
        <argsstring></argsstring>
        <name>USpinorBasis</name>
        <qualifiedname>GQCP::USpinorBasis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/USpinOrbitalBasis.hpp" line="650" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/SpinorBasis/USpinOrbitalBasis.hpp" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a87cc0b2adf737c5194d7a791bd4cb513" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_base_of&lt; <ref refid="class_g_q_c_p_1_1_function" kindref="compound">Function</ref>&lt; typename T::OutputType, typename T::InputType &gt;, T &gt;::value &gt;</type>
        <definition>using GQCP::IsFunction = typedef enable_if_t&lt;std::is_base_of&lt;Function&lt;typename T::OutputType, typename T::InputType&gt;, T&gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>IsFunction</name>
        <qualifiedname>GQCP::IsFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A SFINAE expression that checks if the type T derives from <computeroutput><ref refid="class_g_q_c_p_1_1_function" kindref="compound">Function</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/Function.hpp" line="196" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/Function.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1af28a3d8a83e9f482716fe9745cae7825" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_field" kindref="compound">Field</ref>&lt; <ref refid="namespace_g_q_c_p_1a0b93cbbef69cd49e5de8027a7b945756" kindref="member">Vector</ref>&lt; Scalar, 3 &gt; &gt;</type>
        <definition>using GQCP::VectorField = typedef Field&lt;Vector&lt;Scalar, 3&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>VectorField</name>
        <qualifiedname>GQCP::VectorField</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Grid/Field.hpp" line="386" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Grid/Field.hpp" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a0c826b411620de5c7fc49249b4518785" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_field" kindref="compound">Field</ref>&lt; <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; Scalar, 3, 3 &gt; &gt;</type>
        <definition>using GQCP::MatrixField = typedef Field&lt;Matrix&lt;Scalar, 3, 3&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>MatrixField</name>
        <qualifiedname>GQCP::MatrixField</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Grid/Field.hpp" line="389" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Grid/Field.hpp" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a91a4a76c7877bfb4db770b73fdd0fc0b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_array" kindref="compound">Array</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 1 &gt;</type>
        <definition>using GQCP::ArrayX = typedef Array&lt;Scalar, Dynamic, 1&gt;</definition>
        <argsstring></argsstring>
        <name>ArrayX</name>
        <qualifiedname>GQCP::ArrayX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Array.hpp" line="78" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Array.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ab269ada467ee7f0575bf11f97f8c6bad" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_array" kindref="compound">Array</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref> &gt;</type>
        <definition>using GQCP::ArrayXX = typedef Array&lt;Scalar, Dynamic, Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>ArrayXX</name>
        <qualifiedname>GQCP::ArrayXX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Array.hpp" line="81" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Array.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_dense_vectorizer" kindref="compound">DenseVectorizer</ref>&lt; 0 &gt;</type>
        <definition>using GQCP::ScalarVectorizer = typedef DenseVectorizer&lt;0&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarVectorizer</name>
        <qualifiedname>GQCP::ScalarVectorizer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/DenseVectorizer.hpp" line="203" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/DenseVectorizer.hpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_dense_vectorizer" kindref="compound">DenseVectorizer</ref>&lt; 1 &gt;</type>
        <definition>using GQCP::VectorVectorizer = typedef DenseVectorizer&lt;1&gt;</definition>
        <argsstring></argsstring>
        <name>VectorVectorizer</name>
        <qualifiedname>GQCP::VectorVectorizer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/DenseVectorizer.hpp" line="206" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/DenseVectorizer.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_dense_vectorizer" kindref="compound">DenseVectorizer</ref>&lt; 2 &gt;</type>
        <definition>using GQCP::MatrixVectorizer = typedef DenseVectorizer&lt;2&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixVectorizer</name>
        <qualifiedname>GQCP::MatrixVectorizer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/DenseVectorizer.hpp" line="209" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/DenseVectorizer.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_dense_vectorizer" kindref="compound">DenseVectorizer</ref>&lt; A &gt;</type>
        <definition>using GQCP::TensorVectorizer = typedef DenseVectorizer&lt;A&gt;</definition>
        <argsstring></argsstring>
        <name>TensorVectorizer</name>
        <qualifiedname>GQCP::TensorVectorizer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/DenseVectorizer.hpp" line="213" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/DenseVectorizer.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a0b93cbbef69cd49e5de8027a7b945756" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; Scalar, Rows, 1 &gt;</type>
        <definition>using GQCP::Vector = typedef Matrix&lt;Scalar, Rows, 1&gt;</definition>
        <argsstring></argsstring>
        <name>Vector</name>
        <qualifiedname>GQCP::Vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="476" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a1682f7552bb345204c32a5cc7c464dc6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref> &gt;</type>
        <definition>using GQCP::MatrixX = typedef Matrix&lt;Scalar, Dynamic, Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixX</name>
        <qualifiedname>GQCP::MatrixX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="479" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a0b93cbbef69cd49e5de8027a7b945756" kindref="member">Vector</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref> &gt;</type>
        <definition>using GQCP::VectorX = typedef Vector&lt;Scalar, Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>VectorX</name>
        <qualifiedname>GQCP::VectorX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="482" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ae8a9e0086f5fbab030b1d49b05202054" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>std::function&lt; <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; Scalar &gt;(const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; Scalar &gt; &amp;)&gt;</type>
        <definition>using GQCP::VectorFunction = typedef std::function&lt;VectorX&lt;Scalar&gt;(const VectorX&lt;Scalar&gt;&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>VectorFunction</name>
        <qualifiedname>GQCP::VectorFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="485" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1afdcf4d963710902cad07f1c683df75bf" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>std::function&lt; <ref refid="namespace_g_q_c_p_1a1682f7552bb345204c32a5cc7c464dc6" kindref="member">MatrixX</ref>&lt; Scalar &gt;(const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; Scalar &gt; &amp;)&gt;</type>
        <definition>using GQCP::MatrixFunction = typedef std::function&lt;MatrixX&lt;Scalar&gt;(const VectorX&lt;Scalar&gt;&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixFunction</name>
        <qualifiedname>GQCP::MatrixFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" line="488" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Representation/Matrix.hpp" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1aa357726abcdd4c8e9733034568f0437c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_base_scalar_f_q_operator" kindref="compound">BaseScalarFQOperator</ref>&lt; 1, Scalar &gt;</type>
        <definition>using GQCP::BaseScalarFQOneElectronOperator = typedef BaseScalarFQOperator&lt;1, Scalar&gt;</definition>
        <argsstring></argsstring>
        <name>BaseScalarFQOneElectronOperator</name>
        <qualifiedname>GQCP::BaseScalarFQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" line="96" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a8eb118313e8aeccbfa450374987514c1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_base_f_q_operator" kindref="compound">BaseFQOperator</ref>&lt; 1, Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::BaseVectorFQOneElectronOperator = typedef BaseFQOperator&lt;1, Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>BaseVectorFQOneElectronOperator</name>
        <qualifiedname>GQCP::BaseVectorFQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" line="100" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ae68a9726126597f7df834e379ae35529" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_base_f_q_operator" kindref="compound">BaseFQOperator</ref>&lt; 1, Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::BaseMatrixFQOneElectronOperator = typedef BaseFQOperator&lt;1, Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>BaseMatrixFQOneElectronOperator</name>
        <qualifiedname>GQCP::BaseMatrixFQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" line="104" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ac32f703be7684334bd65e61d5ccfd538" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_base_f_q_operator" kindref="compound">BaseFQOperator</ref>&lt; 1, Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::BaseTensorFQOneElectronOperator = typedef BaseFQOperator&lt;1, Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>BaseTensorFQOneElectronOperator</name>
        <qualifiedname>GQCP::BaseTensorFQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" line="108" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ae99455a14421467b549b0efb0d9b045f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_base_scalar_f_q_operator" kindref="compound">BaseScalarFQOperator</ref>&lt; 2, Scalar &gt;</type>
        <definition>using GQCP::BaseScalarFQTwoElectronOperator = typedef BaseScalarFQOperator&lt;2, Scalar&gt;</definition>
        <argsstring></argsstring>
        <name>BaseScalarFQTwoElectronOperator</name>
        <qualifiedname>GQCP::BaseScalarFQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" line="117" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a9caf8f412e22511ec74a4197f9f84c15" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_base_f_q_operator" kindref="compound">BaseFQOperator</ref>&lt; 2, Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::BaseVectorFQTwoElectronOperator = typedef BaseFQOperator&lt;2, Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>BaseVectorFQTwoElectronOperator</name>
        <qualifiedname>GQCP::BaseVectorFQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" line="121" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a3685110054b697ec259093f1dd124a6e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_base_f_q_operator" kindref="compound">BaseFQOperator</ref>&lt; 2, Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::BaseMatrixFQTwoElectronOperator = typedef BaseFQOperator&lt;2, Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>BaseMatrixFQTwoElectronOperator</name>
        <qualifiedname>GQCP::BaseMatrixFQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" line="125" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1aff5094f49c67877bcb5a621e591d6c71" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_base_f_q_operator" kindref="compound">BaseFQOperator</ref>&lt; 2, Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::BaseTensorFQTwoElectronOperator = typedef BaseFQOperator&lt;2, Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>BaseTensorFQTwoElectronOperator</name>
        <qualifiedname>GQCP::BaseTensorFQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" line="129" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/FirstQuantized/BaseFQOperator.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a05691e5de0f555787c09ea625549380b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_g_s_q_one_electron_operator" kindref="compound">EvaluableGSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarEvaluableGSQOneElectronOperator = typedef EvaluableGSQOneElectronOperator&lt;FunctionType, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarEvaluableGSQOneElectronOperator</name>
        <qualifiedname>GQCP::ScalarEvaluableGSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableGSQOneElectronOperator.hpp" line="62" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableGSQOneElectronOperator.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1aa970571ffacdb428342717384e486f33" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_g_s_q_one_electron_operator" kindref="compound">EvaluableGSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorEvaluableGSQOneElectronOperator = typedef EvaluableGSQOneElectronOperator&lt;FunctionType, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorEvaluableGSQOneElectronOperator</name>
        <qualifiedname>GQCP::VectorEvaluableGSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableGSQOneElectronOperator.hpp" line="66" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableGSQOneElectronOperator.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a01588717917c7d9b71e6a1adafc831b7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_g_s_q_one_electron_operator" kindref="compound">EvaluableGSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixEvaluableGSQOneElectronOperator = typedef EvaluableGSQOneElectronOperator&lt;FunctionType, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixEvaluableGSQOneElectronOperator</name>
        <qualifiedname>GQCP::MatrixEvaluableGSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableGSQOneElectronOperator.hpp" line="70" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableGSQOneElectronOperator.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ac2cf5ee295d1470ba5990ef849dd675f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_g_s_q_one_electron_operator" kindref="compound">EvaluableGSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorEvaluableGSQOneElectronOperator = typedef EvaluableGSQOneElectronOperator&lt;FunctionType, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorEvaluableGSQOneElectronOperator</name>
        <qualifiedname>GQCP::TensorEvaluableGSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableGSQOneElectronOperator.hpp" line="74" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableGSQOneElectronOperator.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1aa905a7b11e34c0d61b45484aa8b30755" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_r_s_q_one_electron_operator" kindref="compound">EvaluableRSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarEvaluableRSQOneElectronOperator = typedef EvaluableRSQOneElectronOperator&lt;FunctionType, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarEvaluableRSQOneElectronOperator</name>
        <qualifiedname>GQCP::ScalarEvaluableRSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableRSQOneElectronOperator.hpp" line="62" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableRSQOneElectronOperator.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a5f07594b8253c17135822016460301b8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_r_s_q_one_electron_operator" kindref="compound">EvaluableRSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorEvaluableRSQOneElectronOperator = typedef EvaluableRSQOneElectronOperator&lt;FunctionType, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorEvaluableRSQOneElectronOperator</name>
        <qualifiedname>GQCP::VectorEvaluableRSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableRSQOneElectronOperator.hpp" line="66" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableRSQOneElectronOperator.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1aca7dc511f9a9dce8daf0c54d84a56ca4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_r_s_q_one_electron_operator" kindref="compound">EvaluableRSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixEvaluableRSQOneElectronOperator = typedef EvaluableRSQOneElectronOperator&lt;FunctionType, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixEvaluableRSQOneElectronOperator</name>
        <qualifiedname>GQCP::MatrixEvaluableRSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableRSQOneElectronOperator.hpp" line="70" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableRSQOneElectronOperator.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1adc79b2e08c4cf51ea53fcf0806eed269" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_r_s_q_one_electron_operator" kindref="compound">EvaluableRSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorEvaluableRSQOneElectronOperator = typedef EvaluableRSQOneElectronOperator&lt;FunctionType, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorEvaluableRSQOneElectronOperator</name>
        <qualifiedname>GQCP::TensorEvaluableRSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableRSQOneElectronOperator.hpp" line="74" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableRSQOneElectronOperator.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ad27bd1dcd36805ae8c6b99fa3bdeace8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_u_s_q_one_electron_operator" kindref="compound">EvaluableUSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarEvaluableUSQOneElectronOperator = typedef EvaluableUSQOneElectronOperator&lt;FunctionType, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarEvaluableUSQOneElectronOperator</name>
        <qualifiedname>GQCP::ScalarEvaluableUSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperator.hpp" line="88" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperator.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ada6e4af00356b3c6497b06bd580bf185" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_u_s_q_one_electron_operator" kindref="compound">EvaluableUSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorEvaluableUSQOneElectronOperator = typedef EvaluableUSQOneElectronOperator&lt;FunctionType, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorEvaluableUSQOneElectronOperator</name>
        <qualifiedname>GQCP::VectorEvaluableUSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperator.hpp" line="92" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperator.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1aa52545975e9ebb20000b426067a638c3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_u_s_q_one_electron_operator" kindref="compound">EvaluableUSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixEvaluableUSQOneElectronOperator = typedef EvaluableUSQOneElectronOperator&lt;FunctionType, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixEvaluableUSQOneElectronOperator</name>
        <qualifiedname>GQCP::MatrixEvaluableUSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperator.hpp" line="96" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperator.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1af3d646381f22b35fbb4b431dfd961182" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_u_s_q_one_electron_operator" kindref="compound">EvaluableUSQOneElectronOperator</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorEvaluableUSQOneElectronOperator = typedef EvaluableUSQOneElectronOperator&lt;FunctionType, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorEvaluableUSQOneElectronOperator</name>
        <qualifiedname>GQCP::TensorEvaluableUSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperator.hpp" line="100" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperator.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1abf628c70e828cdd06793728d741f9432" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_u_s_q_one_electron_operator_component" kindref="compound">EvaluableUSQOneElectronOperatorComponent</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarEvaluableUSQOneElectronOperatorComponent = typedef EvaluableUSQOneElectronOperatorComponent&lt;FunctionType, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarEvaluableUSQOneElectronOperatorComponent</name>
        <qualifiedname>GQCP::ScalarEvaluableUSQOneElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperatorComponent.hpp" line="61" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperatorComponent.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1aa78830db72286e4090e0b00bf466d40d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_u_s_q_one_electron_operator_component" kindref="compound">EvaluableUSQOneElectronOperatorComponent</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorEvaluableUSQOneElectronOperatorComponent = typedef EvaluableUSQOneElectronOperatorComponent&lt;FunctionType, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorEvaluableUSQOneElectronOperatorComponent</name>
        <qualifiedname>GQCP::VectorEvaluableUSQOneElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperatorComponent.hpp" line="65" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperatorComponent.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a597a0e3639772f66cdd343bc4b3c3a46" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_u_s_q_one_electron_operator_component" kindref="compound">EvaluableUSQOneElectronOperatorComponent</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixEvaluableUSQOneElectronOperatorComponent = typedef EvaluableUSQOneElectronOperatorComponent&lt;FunctionType, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixEvaluableUSQOneElectronOperatorComponent</name>
        <qualifiedname>GQCP::MatrixEvaluableUSQOneElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperatorComponent.hpp" line="69" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperatorComponent.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ace61aa51098f188f334909d9ce8b81f2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_evaluable_u_s_q_one_electron_operator_component" kindref="compound">EvaluableUSQOneElectronOperatorComponent</ref>&lt; FunctionType, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorEvaluableUSQOneElectronOperatorComponent = typedef EvaluableUSQOneElectronOperatorComponent&lt;FunctionType, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorEvaluableUSQOneElectronOperatorComponent</name>
        <qualifiedname>GQCP::TensorEvaluableUSQOneElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperatorComponent.hpp" line="73" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/EvaluableUSQOneElectronOperatorComponent.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ae61b369ffb274e21947436ff6efb78fa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_g_s_q_one_electron_operator" kindref="compound">GSQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarGSQOneElectronOperator = typedef GSQOneElectronOperator&lt;Scalar, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarGSQOneElectronOperator</name>
        <qualifiedname>GQCP::ScalarGSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQOneElectronOperator.hpp" line="86" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQOneElectronOperator.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ad81252f7c040f08d470815b5d7f5d494" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_g_s_q_one_electron_operator" kindref="compound">GSQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorGSQOneElectronOperator = typedef GSQOneElectronOperator&lt;Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorGSQOneElectronOperator</name>
        <qualifiedname>GQCP::VectorGSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQOneElectronOperator.hpp" line="90" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQOneElectronOperator.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a37e7de3aacfd5cebbde8bfc4e5a14565" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_g_s_q_one_electron_operator" kindref="compound">GSQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixGSQOneElectronOperator = typedef GSQOneElectronOperator&lt;Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixGSQOneElectronOperator</name>
        <qualifiedname>GQCP::MatrixGSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQOneElectronOperator.hpp" line="94" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQOneElectronOperator.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ab7d26841ec17f047f49d9f8183041804" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_g_s_q_one_electron_operator" kindref="compound">GSQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorGSQOneElectronOperator = typedef GSQOneElectronOperator&lt;Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorGSQOneElectronOperator</name>
        <qualifiedname>GQCP::TensorGSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQOneElectronOperator.hpp" line="98" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQOneElectronOperator.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a5f89165f28b83bb254975779e36b0b98" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_g_s_q_two_electron_operator" kindref="compound">GSQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarGSQTwoElectronOperator = typedef GSQTwoElectronOperator&lt;Scalar, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarGSQTwoElectronOperator</name>
        <qualifiedname>GQCP::ScalarGSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQTwoElectronOperator.hpp" line="88" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQTwoElectronOperator.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a88f733ae6ce4112fda124a00ac663d52" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_g_s_q_two_electron_operator" kindref="compound">GSQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorGSQTwoElectronOperator = typedef GSQTwoElectronOperator&lt;Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorGSQTwoElectronOperator</name>
        <qualifiedname>GQCP::VectorGSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQTwoElectronOperator.hpp" line="92" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQTwoElectronOperator.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1adf128642501e199ae04741148c957940" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_g_s_q_two_electron_operator" kindref="compound">GSQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixGSQTwoElectronOperator = typedef GSQTwoElectronOperator&lt;Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixGSQTwoElectronOperator</name>
        <qualifiedname>GQCP::MatrixGSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQTwoElectronOperator.hpp" line="96" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQTwoElectronOperator.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a836e8361b3b4332cd6b089f2aa0d4003" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_g_s_q_two_electron_operator" kindref="compound">GSQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorGSQTwoElectronOperator = typedef GSQTwoElectronOperator&lt;Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorGSQTwoElectronOperator</name>
        <qualifiedname>GQCP::TensorGSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQTwoElectronOperator.hpp" line="100" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQTwoElectronOperator.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a52ce02554087f7543f82c886c19d0680" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_mixed_u_s_q_two_electron_operator_component" kindref="compound">MixedUSQTwoElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarMixedUSQTwoElectronOperatorComponent = typedef MixedUSQTwoElectronOperatorComponent&lt;Scalar, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarMixedUSQTwoElectronOperatorComponent</name>
        <qualifiedname>GQCP::ScalarMixedUSQTwoElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/MixedUSQTwoElectronOperatorComponent.hpp" line="203" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/MixedUSQTwoElectronOperatorComponent.hpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a6c19f7907d164d5e8a46cee5f5b5e57b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_mixed_u_s_q_two_electron_operator_component" kindref="compound">MixedUSQTwoElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorMixedUSQTwoElectronOperatorComponent = typedef MixedUSQTwoElectronOperatorComponent&lt;Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorMixedUSQTwoElectronOperatorComponent</name>
        <qualifiedname>GQCP::VectorMixedUSQTwoElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/MixedUSQTwoElectronOperatorComponent.hpp" line="207" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/MixedUSQTwoElectronOperatorComponent.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ad9fe9729cdd41744194a0fab8bba2c76" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_mixed_u_s_q_two_electron_operator_component" kindref="compound">MixedUSQTwoElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixMixedUSQTwoElectronOperatorComponent = typedef MixedUSQTwoElectronOperatorComponent&lt;Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixMixedUSQTwoElectronOperatorComponent</name>
        <qualifiedname>GQCP::MatrixMixedUSQTwoElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/MixedUSQTwoElectronOperatorComponent.hpp" line="211" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/MixedUSQTwoElectronOperatorComponent.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a43f69ba1073fa6a5ce506bf5f5d5cca8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_mixed_u_s_q_two_electron_operator_component" kindref="compound">MixedUSQTwoElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorMixedUSQTwoElectronOperatorComponent = typedef MixedUSQTwoElectronOperatorComponent&lt;Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorMixedUSQTwoElectronOperatorComponent</name>
        <qualifiedname>GQCP::TensorMixedUSQTwoElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/MixedUSQTwoElectronOperatorComponent.hpp" line="215" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/MixedUSQTwoElectronOperatorComponent.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a83c18adfd223cd7689beb6f6bcc0d3be" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_pure_u_s_q_two_electron_operator_component" kindref="compound">PureUSQTwoElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarPureUSQTwoElectronOperatorComponent = typedef PureUSQTwoElectronOperatorComponent&lt;Scalar, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarPureUSQTwoElectronOperatorComponent</name>
        <qualifiedname>GQCP::ScalarPureUSQTwoElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/PureUSQTwoElectronOperatorComponent.hpp" line="64" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/PureUSQTwoElectronOperatorComponent.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a29c6b6e0b5e0bacf70860631e24387a4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_pure_u_s_q_two_electron_operator_component" kindref="compound">PureUSQTwoElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorPureUSQTwoElectronOperatorComponent = typedef PureUSQTwoElectronOperatorComponent&lt;Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorPureUSQTwoElectronOperatorComponent</name>
        <qualifiedname>GQCP::VectorPureUSQTwoElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/PureUSQTwoElectronOperatorComponent.hpp" line="68" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/PureUSQTwoElectronOperatorComponent.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ad42fab3e1053a52aa29b03c4ec16f7e5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_pure_u_s_q_two_electron_operator_component" kindref="compound">PureUSQTwoElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixPureUSQTwoElectronOperatorComponent = typedef PureUSQTwoElectronOperatorComponent&lt;Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixPureUSQTwoElectronOperatorComponent</name>
        <qualifiedname>GQCP::MatrixPureUSQTwoElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/PureUSQTwoElectronOperatorComponent.hpp" line="72" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/PureUSQTwoElectronOperatorComponent.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a7deae5e25818b59f10451926f140e75a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_pure_u_s_q_two_electron_operator_component" kindref="compound">PureUSQTwoElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorPureUSQTwoElectronOperatorComponent = typedef PureUSQTwoElectronOperatorComponent&lt;Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorPureUSQTwoElectronOperatorComponent</name>
        <qualifiedname>GQCP::TensorPureUSQTwoElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/PureUSQTwoElectronOperatorComponent.hpp" line="76" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/PureUSQTwoElectronOperatorComponent.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ac74434aa85c700f6f803449fc115242c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_r_s_q_one_electron_operator" kindref="compound">RSQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarRSQOneElectronOperator = typedef RSQOneElectronOperator&lt;Scalar, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarRSQOneElectronOperator</name>
        <qualifiedname>GQCP::ScalarRSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQOneElectronOperator.hpp" line="95" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQOneElectronOperator.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a937c6a66a78202fc6957b3d807c57e64" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_r_s_q_one_electron_operator" kindref="compound">RSQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorRSQOneElectronOperator = typedef RSQOneElectronOperator&lt;Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorRSQOneElectronOperator</name>
        <qualifiedname>GQCP::VectorRSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQOneElectronOperator.hpp" line="99" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQOneElectronOperator.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a12649a9ed112ed485b6d282e585a4fe1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_r_s_q_one_electron_operator" kindref="compound">RSQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixRSQOneElectronOperator = typedef RSQOneElectronOperator&lt;Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixRSQOneElectronOperator</name>
        <qualifiedname>GQCP::MatrixRSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQOneElectronOperator.hpp" line="103" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQOneElectronOperator.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a110359df945eefcb66149aab5c9d63dd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_r_s_q_one_electron_operator" kindref="compound">RSQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorRSQOneElectronOperator = typedef RSQOneElectronOperator&lt;Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorRSQOneElectronOperator</name>
        <qualifiedname>GQCP::TensorRSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQOneElectronOperator.hpp" line="107" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQOneElectronOperator.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a57903db44d132d727d392d3533d1e682" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_r_s_q_two_electron_operator" kindref="compound">RSQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarRSQTwoElectronOperator = typedef RSQTwoElectronOperator&lt;Scalar, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarRSQTwoElectronOperator</name>
        <qualifiedname>GQCP::ScalarRSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQTwoElectronOperator.hpp" line="117" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQTwoElectronOperator.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a831c39b0e33f26117fbec361228b61ff" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_r_s_q_two_electron_operator" kindref="compound">RSQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorRSQTwoElectronOperator = typedef RSQTwoElectronOperator&lt;Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorRSQTwoElectronOperator</name>
        <qualifiedname>GQCP::VectorRSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQTwoElectronOperator.hpp" line="121" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQTwoElectronOperator.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1abd2a62ea3da4b6f8563526668833f8a5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_r_s_q_two_electron_operator" kindref="compound">RSQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixRSQTwoElectronOperator = typedef RSQTwoElectronOperator&lt;Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixRSQTwoElectronOperator</name>
        <qualifiedname>GQCP::MatrixRSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQTwoElectronOperator.hpp" line="125" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQTwoElectronOperator.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ab6930d9255b53ed164489c25518c1e43" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_r_s_q_two_electron_operator" kindref="compound">RSQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorRSQTwoElectronOperator = typedef RSQTwoElectronOperator&lt;Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorRSQTwoElectronOperator</name>
        <qualifiedname>GQCP::TensorRSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQTwoElectronOperator.hpp" line="129" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/RSQTwoElectronOperator.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ab3ebca2a53b8e94ced149c725732035a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_s_q_hamiltonian" kindref="compound">SQHamiltonian</ref>&lt; <ref refid="namespace_g_q_c_p_1ac74434aa85c700f6f803449fc115242c" kindref="member">ScalarRSQOneElectronOperator</ref>&lt; Scalar &gt;, <ref refid="namespace_g_q_c_p_1a57903db44d132d727d392d3533d1e682" kindref="member">ScalarRSQTwoElectronOperator</ref>&lt; Scalar &gt; &gt;</type>
        <definition>using GQCP::RSQHamiltonian = typedef SQHamiltonian&lt;ScalarRSQOneElectronOperator&lt;Scalar&gt;, ScalarRSQTwoElectronOperator&lt;Scalar&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>RSQHamiltonian</name>
        <qualifiedname>GQCP::RSQHamiltonian</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/SQHamiltonian.hpp" line="756" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/SQHamiltonian.hpp" bodystart="756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a554adc2a4a187e4d73302a47e451a55d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_s_q_hamiltonian" kindref="compound">SQHamiltonian</ref>&lt; <ref refid="namespace_g_q_c_p_1a0f84799c58b7a75a614bc2de9deb9dda" kindref="member">ScalarUSQOneElectronOperator</ref>&lt; Scalar &gt;, <ref refid="namespace_g_q_c_p_1a917f77e00f808dfce7965011d7f9a824" kindref="member">ScalarUSQTwoElectronOperator</ref>&lt; Scalar &gt; &gt;</type>
        <definition>using GQCP::USQHamiltonian = typedef SQHamiltonian&lt;ScalarUSQOneElectronOperator&lt;Scalar&gt;, ScalarUSQTwoElectronOperator&lt;Scalar&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>USQHamiltonian</name>
        <qualifiedname>GQCP::USQHamiltonian</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/SQHamiltonian.hpp" line="761" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/SQHamiltonian.hpp" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a18949b2153b626c420238dab2a4e7185" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_s_q_hamiltonian" kindref="compound">SQHamiltonian</ref>&lt; <ref refid="namespace_g_q_c_p_1ae61b369ffb274e21947436ff6efb78fa" kindref="member">ScalarGSQOneElectronOperator</ref>&lt; Scalar &gt;, <ref refid="namespace_g_q_c_p_1a5f89165f28b83bb254975779e36b0b98" kindref="member">ScalarGSQTwoElectronOperator</ref>&lt; Scalar &gt; &gt;</type>
        <definition>using GQCP::GSQHamiltonian = typedef SQHamiltonian&lt;ScalarGSQOneElectronOperator&lt;Scalar&gt;, ScalarGSQTwoElectronOperator&lt;Scalar&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>GSQHamiltonian</name>
        <qualifiedname>GQCP::GSQHamiltonian</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/SQHamiltonian.hpp" line="766" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/SQHamiltonian.hpp" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a0f84799c58b7a75a614bc2de9deb9dda" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_one_electron_operator" kindref="compound">USQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarUSQOneElectronOperator = typedef USQOneElectronOperator&lt;Scalar, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarUSQOneElectronOperator</name>
        <qualifiedname>GQCP::ScalarUSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperator.hpp" line="310" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperator.hpp" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a8c1bba01781eef47c26baaea9b518073" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_one_electron_operator" kindref="compound">USQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorUSQOneElectronOperator = typedef USQOneElectronOperator&lt;Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorUSQOneElectronOperator</name>
        <qualifiedname>GQCP::VectorUSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperator.hpp" line="314" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperator.hpp" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a4bbad56a3c7ff64ef9726c3ba8e2a188" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_one_electron_operator" kindref="compound">USQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixUSQOneElectronOperator = typedef USQOneElectronOperator&lt;Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixUSQOneElectronOperator</name>
        <qualifiedname>GQCP::MatrixUSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperator.hpp" line="318" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperator.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1af9b4c9f851ff34e55dff84d45f0faf7d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_one_electron_operator" kindref="compound">USQOneElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorUSQOneElectronOperator = typedef USQOneElectronOperator&lt;Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorUSQOneElectronOperator</name>
        <qualifiedname>GQCP::TensorUSQOneElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperator.hpp" line="322" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperator.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ae63533275636c4067625f662a217726b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_one_electron_operator_component" kindref="compound">USQOneElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarUSQOneElectronOperatorComponent = typedef USQOneElectronOperatorComponent&lt;Scalar, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarUSQOneElectronOperatorComponent</name>
        <qualifiedname>GQCP::ScalarUSQOneElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperatorComponent.hpp" line="65" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperatorComponent.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a88b0f18c6397518dfbf420f832a63831" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_one_electron_operator_component" kindref="compound">USQOneElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorUSQOneElectronOperatorComponent = typedef USQOneElectronOperatorComponent&lt;Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorUSQOneElectronOperatorComponent</name>
        <qualifiedname>GQCP::VectorUSQOneElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperatorComponent.hpp" line="69" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperatorComponent.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1aa925f95b6af786c2cf4897e25432468d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_one_electron_operator_component" kindref="compound">USQOneElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixUSQOneElectronOperatorComponent = typedef USQOneElectronOperatorComponent&lt;Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixUSQOneElectronOperatorComponent</name>
        <qualifiedname>GQCP::MatrixUSQOneElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperatorComponent.hpp" line="73" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperatorComponent.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a6e3520bc5c35dab7d6bf0e8a1e3a2def" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_one_electron_operator_component" kindref="compound">USQOneElectronOperatorComponent</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorUSQOneElectronOperatorComponent = typedef USQOneElectronOperatorComponent&lt;Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorUSQOneElectronOperatorComponent</name>
        <qualifiedname>GQCP::TensorUSQOneElectronOperatorComponent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperatorComponent.hpp" line="77" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQOneElectronOperatorComponent.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a917f77e00f808dfce7965011d7f9a824" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_two_electron_operator" kindref="compound">USQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a6c012317d3e2de845b7ee1a860c61e99" kindref="member">ScalarVectorizer</ref> &gt;</type>
        <definition>using GQCP::ScalarUSQTwoElectronOperator = typedef USQTwoElectronOperator&lt;Scalar, ScalarVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarUSQTwoElectronOperator</name>
        <qualifiedname>GQCP::ScalarUSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQTwoElectronOperator.hpp" line="299" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQTwoElectronOperator.hpp" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1aa3aa234c019dcb885a1194c9ebd326a2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_two_electron_operator" kindref="compound">USQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a75056d5799528c495b717e21cccc75f7" kindref="member">VectorVectorizer</ref> &gt;</type>
        <definition>using GQCP::VectorUSQTwoElectronOperator = typedef USQTwoElectronOperator&lt;Scalar, VectorVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>VectorUSQTwoElectronOperator</name>
        <qualifiedname>GQCP::VectorUSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQTwoElectronOperator.hpp" line="303" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQTwoElectronOperator.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a1747382d67cc4d689a22084d7724bcb8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_two_electron_operator" kindref="compound">USQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1a46e9824d60535862f66d9cbd766602d0" kindref="member">MatrixVectorizer</ref> &gt;</type>
        <definition>using GQCP::MatrixUSQTwoElectronOperator = typedef USQTwoElectronOperator&lt;Scalar, MatrixVectorizer&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixUSQTwoElectronOperator</name>
        <qualifiedname>GQCP::MatrixUSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQTwoElectronOperator.hpp" line="307" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQTwoElectronOperator.hpp" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a08a64042d8fbe49b115f079671c8b9d0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_u_s_q_two_electron_operator" kindref="compound">USQTwoElectronOperator</ref>&lt; Scalar, <ref refid="namespace_g_q_c_p_1afeec6a04a9b337813c4e16db0d6b5ecd" kindref="member">TensorVectorizer</ref>&lt; N &gt; &gt;</type>
        <definition>using GQCP::TensorUSQTwoElectronOperator = typedef USQTwoElectronOperator&lt;Scalar, TensorVectorizer&lt;N&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TensorUSQTwoElectronOperator</name>
        <qualifiedname>GQCP::TensorUSQTwoElectronOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQTwoElectronOperator.hpp" line="311" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/USQTwoElectronOperator.hpp" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a7f6dc73e9642604cae80dd2e813b91f5" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_restricted_spinor_tag" kindref="compound">RestrictedSpinorTag</ref></type>
        <definition>using GQCP::RestrictedSpinOrbitalTag = typedef RestrictedSpinorTag</definition>
        <argsstring></argsstring>
        <name>RestrictedSpinOrbitalTag</name>
        <qualifiedname>GQCP::RestrictedSpinOrbitalTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A tag designating types corresponding to spin-orbitals whose spatial parts are equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/spinor_tags.hpp" line="32" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/spinor_tags.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a4e2fa2707828e181d1a0dbe949627abf" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_unrestricted_spinor_tag" kindref="compound">UnrestrictedSpinorTag</ref></type>
        <definition>using GQCP::UnrestrictedSpinOrbitalTag = typedef UnrestrictedSpinorTag</definition>
        <argsstring></argsstring>
        <name>UnrestrictedSpinOrbitalTag</name>
        <qualifiedname>GQCP::UnrestrictedSpinOrbitalTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A tag designating types corresponding to spin-orbitals whose spatial parts may differ. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/spinor_tags.hpp" line="42" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/QuantumChemical/spinor_tags.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a09e1543a47643a7a62401aa600bb2e28" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;() *std::declval&lt; U &gt;())</type>
        <definition>using GQCP::product_t = typedef decltype(std::declval&lt;T&gt;() * std::declval&lt;U&gt;())</definition>
        <argsstring></argsstring>
        <name>product_t</name>
        <qualifiedname>GQCP::product_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/aliases.hpp" line="35" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Utilities/aliases.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1ad8362e85425df3608c553719ea712652" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;()+std::declval&lt; U &gt;())</type>
        <definition>using GQCP::sum_t = typedef decltype(std::declval&lt;T&gt;() + std::declval&lt;U&gt;())</definition>
        <argsstring></argsstring>
        <name>sum_t</name>
        <qualifiedname>GQCP::sum_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/aliases.hpp" line="38" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Utilities/aliases.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a1ffc21109e62d09d3485c62e03677dfd" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>using GQCP::complex = typedef std::complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>complex</name>
        <qualifiedname>GQCP::complex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An alias for a complex&lt;double&gt;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/complex.hpp" line="31" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Utilities/complex.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a34f7bafce2f585c406de61d1eb4616b5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; T, double &gt;::value &gt;</type>
        <definition>using GQCP::IsReal = typedef enable_if_t&lt;std::is_same&lt;T, double&gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>IsReal</name>
        <qualifiedname>GQCP::IsReal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/complex.hpp" line="51" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Utilities/complex.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a3ce6a14846d6795ad08dda8abbf505bc" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; T, <ref refid="namespace_g_q_c_p_1a1ffc21109e62d09d3485c62e03677dfd" kindref="member">complex</ref> &gt;::value &gt;</type>
        <definition>using GQCP::IsComplex = typedef enable_if_t&lt;std::is_same&lt;T, complex&gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>IsComplex</name>
        <qualifiedname>GQCP::IsComplex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/complex.hpp" line="54" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Utilities/complex.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; B, T &gt;::type</type>
        <definition>using GQCP::enable_if_t = typedef typename std::enable_if&lt;B, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>enable_if_t</name>
        <qualifiedname>GQCP::enable_if_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/type_traits.hpp" line="37" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Utilities/type_traits.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto GQCP::Dynamic</definition>
        <argsstring></argsstring>
        <name>Dynamic</name>
        <qualifiedname>GQCP::Dynamic</qualifiedname>
        <initializer>= Eigen::Dynamic</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/Eigen.hpp" line="27" column="16" bodyfile="/__w/GQCP/GQCP/gqcp/include/Utilities/Eigen.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_g_q_c_p_1a313d88a853d27a55e70b3f440021391a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FINT</type>
        <definition>FINT GQCP::cint2e_cart_const</definition>
        <argsstring>(double *buf, const int *shls, const int *atm, int natm, const int *bas, int nbas, const double *env, const CINTOpt *opt)</argsstring>
        <name>cint2e_cart_const</name>
        <qualifiedname>GQCP::cint2e_cart_const</qualifiedname>
        <param>
          <type>double *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>shls</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>atm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>natm</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>bas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbas</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>const CINTOpt *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp" line="53" column="13" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a6168567e0dc79ba35c9e6b923efee96f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GQCP::cint2e_cart_optimizer_const</definition>
        <argsstring>(CINTOpt **opt, const int *atm, int natm, const int *bas, int nbas, const double *env)</argsstring>
        <name>cint2e_cart_optimizer_const</name>
        <qualifiedname>GQCP::cint2e_cart_optimizer_const</qualifiedname>
        <param>
          <type>CINTOpt **</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>atm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>natm</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>bas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbas</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp" line="57" column="13" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/Interfaces/LibcintInterfacer.hpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1afed89df1a3e5cf5d125edc3e66e81f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TransformationType</type>
          </param>
          <param>
            <type>typename TransformableType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void GQCP::transform</definition>
        <argsstring>(const TransformationType &amp;T, TransformableType &amp;transformable)</argsstring>
        <name>transform</name>
        <qualifiedname>GQCP::transform</qualifiedname>
        <param>
          <type>const TransformationType &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>TransformableType &amp;</type>
          <declname>transformable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Break the recursion of the variadic <computeroutput>transform</computeroutput> method: transform a single object with a basis transformation.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TransformationType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the basis transformation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TransformableType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the object that should be basis transformed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The basis transformation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transformable</parametername>
</parameternamelist>
<parameterdescription>
<para>The object that should be basis transformed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Transformations/transform.hpp" line="44" column="6" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Transformations/transform.hpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1ab54b4fe386b33cd9e413a91a25deffd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TransformationType</type>
          </param>
          <param>
            <type>typename First</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Others</declname>
            <defname>Others</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void GQCP::transform</definition>
        <argsstring>(const TransformationType &amp;T, First &amp;first, Others &amp;... others)</argsstring>
        <name>transform</name>
        <qualifiedname>GQCP::transform</qualifiedname>
        <param>
          <type>const TransformationType &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>First &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Others &amp;...</type>
          <declname>others</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Basis transform a number of objects with a given transformation.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TransformationType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the basis transformation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>First</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the first object that should be basis transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Others</parametername>
</parameternamelist>
<parameterdescription>
<para>The variadic type of the other objects that should be basis transformed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The basis transformation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first object that should be basis transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>others</parametername>
</parameternamelist>
<parameterdescription>
<para>The variadic other objects that should be basis transformed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Transformations/transform.hpp" line="61" column="6" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Transformations/transform.hpp" bodystart="61" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a7e2cfaf86b5e620b806f34f3827f7a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RotationType</type>
          </param>
          <param>
            <type>typename RotatableType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void GQCP::rotate</definition>
        <argsstring>(const RotationType &amp;U, RotatableType &amp;rotatable)</argsstring>
        <name>rotate</name>
        <qualifiedname>GQCP::rotate</qualifiedname>
        <param>
          <type>const RotationType &amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>RotatableType &amp;</type>
          <declname>rotatable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Break the recursion of the variadic <computeroutput>rotate</computeroutput> method: rotate a single object with a basis rotation.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RotationType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the basis rotation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RotatableType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the object that should be basis rotated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The basis rotation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotatable</parametername>
</parameternamelist>
<parameterdescription>
<para>The object that should be basis rotated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Transformations/transform.hpp" line="83" column="6" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Transformations/transform.hpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a7ea37d174023b0589d8f1738af43f1cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RotationType</type>
          </param>
          <param>
            <type>typename First</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Others</declname>
            <defname>Others</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void GQCP::rotate</definition>
        <argsstring>(const RotationType &amp;U, First &amp;first, Others &amp;... others)</argsstring>
        <name>rotate</name>
        <qualifiedname>GQCP::rotate</qualifiedname>
        <param>
          <type>const RotationType &amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>First &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Others &amp;...</type>
          <declname>others</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Basis rotate a number of objects with a given transformation.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RotationType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the basis rotated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>First</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the first object that should be basis rotated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Others</parametername>
</parameternamelist>
<parameterdescription>
<para>The variadic type of the other objects that should be basis rotated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The basis rotation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first object that should be basis transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>others</parametername>
</parameternamelist>
<parameterdescription>
<para>The variadic other objects that should be basis transformed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Transformations/transform.hpp" line="100" column="6" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Transformations/transform.hpp" bodystart="100" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1aaf93382e390ab19411954b62aa1f2e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F1</type>
          </param>
          <param>
            <type>typename F2</type>
          </param>
          <param>
            <type>typename</type>
            <defval>IsFunction&lt;F1&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>IsFunction&lt;F2&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_function_product" kindref="compound">FunctionProduct</ref>&lt; F1, F2 &gt;</type>
        <definition>FunctionProduct&lt; F1, F2 &gt; GQCP::operator*</definition>
        <argsstring>(const F1 &amp;lhs, const F2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>GQCP::operator*</qualifiedname>
        <param>
          <type>const F1 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const F2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply one function by another.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F1</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the first function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F2</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the second function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function is only enabled for actual functions, i.e. functions that derive from <computeroutput><ref refid="class_g_q_c_p_1_1_function" kindref="compound">Function</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/Function.hpp" line="208" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Functions/Function.hpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a031eaf23d32296c8ccd6b437f7484685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; double &gt;</type>
        <definition>VectorX&lt; double &gt; GQCP::newtonStep</definition>
        <argsstring>(const VectorX&lt; double &gt; &amp;x, const VectorFunction&lt; double &gt; &amp;f, const MatrixFunction&lt; double &gt; &amp;J)</argsstring>
        <name>newtonStep</name>
        <qualifiedname>GQCP::newtonStep</qualifiedname>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1ae8a9e0086f5fbab030b1d49b05202054" kindref="member">VectorFunction</ref>&lt; double &gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1afdcf4d963710902cad07f1c683df75bf" kindref="member">MatrixFunction</ref>&lt; double &gt; &amp;</type>
          <declname>J</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the current point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable vector function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>J</parametername>
</parameternamelist>
<parameterdescription>
<para>the corresponding Jacobian function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the Newton step J(x) p = - f </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Mathematical/Optimization/NonLinearEquation/step.cpp" line="34" column="9" bodyfile="/__w/GQCP/GQCP/gqcp/src/Mathematical/Optimization/NonLinearEquation/step.cpp" bodystart="34" bodyend="42" declfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Optimization/NonLinearEquation/step.hpp" declline="35" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a894b030641e777daba1a94de9687c499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_scalar_g_s_q_one_electron_operator_product" kindref="compound">ScalarGSQOneElectronOperatorProduct</ref>&lt; Scalar &gt;</type>
        <definition>ScalarGSQOneElectronOperatorProduct&lt; Scalar &gt; GQCP::operator*</definition>
        <argsstring>(const ScalarGSQOneElectronOperator&lt; Scalar &gt; &amp;lhs, const ScalarGSQOneElectronOperator&lt; Scalar &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>GQCP::operator*</qualifiedname>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1ae61b369ffb274e21947436ff6efb78fa" kindref="member">ScalarGSQOneElectronOperator</ref>&lt; Scalar &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1ae61b369ffb274e21947436ff6efb78fa" kindref="member">ScalarGSQOneElectronOperator</ref>&lt; Scalar &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply one scalar, generalized one-electron operator by another.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of one of the matrix elements: real or complex.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function assumes that </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQTwoElectronOperator.hpp" line="385" column="37" bodyfile="/__w/GQCP/GQCP/gqcp/include/Operator/SecondQuantized/GSQTwoElectronOperator.hpp" bodystart="385" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a29e307419485ec5e35d6363f61e93bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double GQCP::calculateSpinSquared</definition>
        <argsstring>(const SpinResolved1DM&lt; Scalar &gt; &amp;one_DMs, const SpinResolved2DM&lt; Scalar &gt; &amp;two_DMs)</argsstring>
        <name>calculateSpinSquared</name>
        <qualifiedname>GQCP::calculateSpinSquared</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_spin_resolved1_d_m" kindref="compound">SpinResolved1DM</ref>&lt; Scalar &gt; &amp;</type>
          <declname>one_DMs</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_spin_resolved2_d_m" kindref="compound">SpinResolved2DM</ref>&lt; Scalar &gt; &amp;</type>
          <declname>two_DMs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the expectation value of the square of the spin angular momentum operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the density matrices.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>one_DMs</parametername>
</parameternamelist>
<parameterdescription>
<para>The one-electron density matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>two_DMs</parametername>
</parameternamelist>
<parameterdescription>
<para>The two-electron density matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expectation value of the square of the spin angular momentum operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Processing/Properties/expectation_values.hpp" line="40" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/include/Processing/Properties/expectation_values.hpp" bodystart="40" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1aab2f368ef37a2428c9f180136c27f1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double GQCP::calculateSpinZ</definition>
        <argsstring>(const SpinResolved1DM&lt; Scalar &gt; &amp;one_DMs)</argsstring>
        <name>calculateSpinZ</name>
        <qualifiedname>GQCP::calculateSpinZ</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_spin_resolved1_d_m" kindref="compound">SpinResolved1DM</ref>&lt; Scalar &gt; &amp;</type>
          <declname>one_DMs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the expectation value of the z-component of the spin angular momentum operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the density matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>one_DMs</parametername>
</parameternamelist>
<parameterdescription>
<para>The one-electron density matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expectation value of spin in the z-direction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Processing/Properties/expectation_values.hpp" line="67" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/include/Processing/Properties/expectation_values.hpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a917e032b70cf6e08b8850d8e876e142b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; double, 3, 3 &gt;</type>
        <definition>Matrix&lt; double, 3, 3 &gt; GQCP::calculateElectricPolarizability</definition>
        <argsstring>(const Matrix&lt; double, Dynamic, 3 &gt; &amp;F_p, const Matrix&lt; double, Dynamic, 3 &gt; &amp;response)</argsstring>
        <name>calculateElectricPolarizability</name>
        <qualifiedname>GQCP::calculateElectricPolarizability</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; double, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 3 &gt; &amp;</type>
          <declname>F_p</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; double, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 3 &gt; &amp;</type>
          <declname>response</declname>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the electric polarizability from the linear wave function response</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F_p</parametername>
</parameternamelist>
<parameterdescription>
<para>the electric response force (d^2E/dFdp) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>response</parametername>
</parameternamelist>
<parameterdescription>
<para>the linear wave function response</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the components of the electric polarizability</para>
</simplesect>
Calculate the electric polarizability from the linear wave function response</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F_p</parametername>
</parameternamelist>
<parameterdescription>
<para>the electric response force (d^2E/dFdp) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the linear wave function response</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the components of the electric polarizability </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Processing/Properties/properties.cpp" line="35" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/src/Processing/Properties/properties.cpp" bodystart="35" bodyend="39" declfile="/__w/GQCP/GQCP/gqcp/include/Processing/Properties/properties.hpp" declline="35" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a9a287861f817ca2ca4ce432c385905b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; double, 3, 3 &gt;</type>
        <definition>Matrix&lt; double, 3, 3 &gt; GQCP::calculateElectricPolarizability</definition>
        <argsstring>(const Matrix&lt; double, Dynamic, 3 &gt; &amp;F_p, const Matrix&lt; double, Dynamic, 3 &gt; &amp;x, const Matrix&lt; double, Dynamic, 3 &gt; &amp;A_lambda, const Matrix&lt; double, Dynamic, 3 &gt; &amp;y)</argsstring>
        <name>calculateElectricPolarizability</name>
        <qualifiedname>GQCP::calculateElectricPolarizability</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; double, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 3 &gt; &amp;</type>
          <declname>F_p</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; double, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 3 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; double, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 3 &gt; &amp;</type>
          <declname>A_lambda</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_matrix" kindref="compound">Matrix</ref>&lt; double, <ref refid="namespace_g_q_c_p_1aae02f7d1e3557edc7114d417804dd298" kindref="member">Dynamic</ref>, 3 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the electric polarizability from the linear wave function response and the linear multiplier response</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F_p</parametername>
</parameternamelist>
<parameterdescription>
<para>the electric parameter response force </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the linear wave function response </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A_lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>the first part of the electric multiplier response force </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the linear multiplier response</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the components of the electric polarizability </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Processing/Properties/properties.cpp" line="52" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/src/Processing/Properties/properties.cpp" bodystart="52" bodyend="56" declfile="/__w/GQCP/GQCP/gqcp/include/Processing/Properties/properties.hpp" declline="48" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a9f8d842e0828d430237774761219cce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double GQCP::calculateRMP2EnergyCorrection</definition>
        <argsstring>(const RSQHamiltonian&lt; double &gt; &amp;sq_hamiltonian, const QCModel::RHF&lt; double &gt; &amp;rhf_parameters)</argsstring>
        <name>calculateRMP2EnergyCorrection</name>
        <qualifiedname>GQCP::calculateRMP2EnergyCorrection</qualifiedname>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1ab3ebca2a53b8e94ced149c725732035a" kindref="member">RSQHamiltonian</ref>&lt; double &gt; &amp;</type>
          <declname>sq_hamiltonian</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_q_c_model_1_1_r_h_f" kindref="compound">QCModel::RHF</ref>&lt; double &gt; &amp;</type>
          <declname>rhf_parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sq_hamiltonian</parametername>
</parameternamelist>
<parameterdescription>
<para>the Hamiltonian expressed in an orthornomal basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhf_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the converged solution to the RHF SCF equations</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the RMP2 energy correction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCMethod/RMP2/RMP2.hpp" line="35" column="8" declfile="/__w/GQCP/GQCP/gqcp/include/QCMethod/RMP2/RMP2.hpp" declline="35" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1aad915236270363d34c81fd1b896fa934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_g_q_c_p_1a1ffc21109e62d09d3485c62e03677dfd" kindref="member">complex</ref></type>
        <definition>complex GQCP::conj</definition>
        <argsstring>(const complex &amp;c)</argsstring>
        <name>conj</name>
        <qualifiedname>GQCP::conj</qualifiedname>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1a1ffc21109e62d09d3485c62e03677dfd" kindref="member">complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the conjugate of a complex number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The complex number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The conjugate of the given complex number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/complex.cpp" line="31" column="9" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/complex.cpp" bodystart="31" bodyend="31" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/complex.hpp" declline="41" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a04ecb953978dae48e6eb3767442db10e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double GQCP::conj</definition>
        <argsstring>(const double d)</argsstring>
        <name>conj</name>
        <qualifiedname>GQCP::conj</qualifiedname>
        <param>
          <type>const double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An overload for <computeroutput><ref refid="namespace_g_q_c_p_1aad915236270363d34c81fd1b896fa934" kindref="member">GQCP::conj</ref></computeroutput> for real numbers. This is an identity function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/complex.cpp" line="37" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/complex.cpp" bodystart="37" bodyend="37" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/complex.hpp" declline="47" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a36c443bf211482eb3027fd6edd8bc610" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_g_q_c_p_1_1___unique__if" kindref="compound">_Unique_if</ref>&lt; T &gt;::_Single_object</type>
        <definition>_Unique_if&lt; T &gt;::_Single_object GQCP::make_unique</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>make_unique</name>
        <qualifiedname>GQCP::make_unique</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/memory.hpp" line="58" column="38" bodyfile="/__w/GQCP/GQCP/gqcp/include/Utilities/memory.hpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a41fe65fa91e4c3cf810a7c78b70683a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_g_q_c_p_1_1___unique__if" kindref="compound">_Unique_if</ref>&lt; T &gt;::_Unknown_bound</type>
        <definition>_Unique_if&lt; T &gt;::_Unknown_bound GQCP::make_unique</definition>
        <argsstring>(size_t n)</argsstring>
        <name>make_unique</name>
        <qualifiedname>GQCP::make_unique</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/memory.hpp" line="64" column="38" bodyfile="/__w/GQCP/GQCP/gqcp/include/Utilities/memory.hpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a17621b9cf9430adde717809340e7e799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="struct_g_q_c_p_1_1___unique__if" kindref="compound">_Unique_if</ref>&lt; T &gt;::_Known_bound</type>
        <definition>_Unique_if&lt; T &gt;::_Known_bound GQCP::make_unique</definition>
        <argsstring>(Args &amp;&amp;...)=delete</argsstring>
        <name>make_unique</name>
        <qualifiedname>GQCP::make_unique</qualifiedname>
        <param>
          <type>Args &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/memory.hpp" line="71" column="36" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/memory.hpp" declline="71" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a0761e8419cd4ef88f0b973e82fa0e764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t GQCP::findElementIndex</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vector, const T &amp;value)</argsstring>
        <name>findElementIndex</name>
        <qualifiedname>GQCP::findElementIndex</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A generalization of std::find</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of elements stored in the vector</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector containing the elements @apram value the value that should be found</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the element that should be found in the given vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" line="44" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" bodystart="44" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a86c9c3f88f313876e5b4473a84bd3d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; size_t &gt; &gt; GQCP::generatePartitionsOf</definition>
        <argsstring>(const size_t n, const size_t k)</argsstring>
        <name>generatePartitionsOf</name>
        <qualifiedname>GQCP::generatePartitionsOf</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" line="41" column="13" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" bodystart="41" bodyend="106" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" declline="68" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a9890dbb8bea7ecb12b933ddd5a7e4641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; size_t &gt; &gt; GQCP::generateUniquePartitionsOf</definition>
        <argsstring>(const size_t n, const size_t k)</argsstring>
        <name>generateUniquePartitionsOf</name>
        <qualifiedname>GQCP::generateUniquePartitionsOf</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" line="121" column="13" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" bodystart="121" bodyend="157" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" declline="82" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a66b68f0876efe8c6a350a8a653216007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::grayCodeOf</definition>
        <argsstring>(const size_t S)</argsstring>
        <name>grayCodeOf</name>
        <qualifiedname>GQCP::grayCodeOf</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>S</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>the positive integer to be converted to Gray code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the Gray code of the given integer number as a bitset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" line="165" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" bodystart="165" bodyend="169" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" declline="89" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a52b5694fa9c16741eb893cac4d4b450c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::matrixIndexMajor</definition>
        <argsstring>(const size_t v, const size_t cols, const size_t skipped=0)</argsstring>
        <name>matrixIndexMajor</name>
        <qualifiedname>GQCP::matrixIndexMajor</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>skipped</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns in the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipped</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns that are skipped in the matrix representation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the row-major major (non-contiguous) index given the corresponding vector index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" line="179" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" bodystart="179" bodyend="181" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" declline="98" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a50abf952b2356534d6e07cbdd986a735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::matrixIndexMinor</definition>
        <argsstring>(const size_t v, const size_t cols, const size_t skipped=0)</argsstring>
        <name>matrixIndexMinor</name>
        <qualifiedname>GQCP::matrixIndexMinor</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>skipped</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns in the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipped</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns that are skipped in the matrix representation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the row-major minor (contiguous) index given the corresponding vector index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" line="191" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" bodystart="191" bodyend="193" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" declline="107" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a7be96c404c2e229bcbb4906d20ed009f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GQCP::printExecutionTime</definition>
        <argsstring>(const std::string &amp;method_name, const std::function&lt; void()&gt; &amp;function)</argsstring>
        <name>printExecutionTime</name>
        <qualifiedname>GQCP::printExecutionTime</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>method_name</declname>
        </param>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print the time a function takes to be executed</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>method_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of function that is to be executed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the function call to be made </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" line="202" column="6" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" bodystart="202" bodyend="218" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" declline="115" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a1457a824d08dadcac6a081f036d4eaa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::strictTriangularRootOf</definition>
        <argsstring>(const size_t x)</argsstring>
        <name>strictTriangularRootOf</name>
        <qualifiedname>GQCP::strictTriangularRootOf</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the strict triangular root of the given number. This is also the dimension of the square matrix whose strict lower/upper triangle has the given number of elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" line="226" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" bodystart="226" bodyend="229" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" declline="122" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a1656ae0f118050897b8440752240b85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::triangularRootOf</definition>
        <argsstring>(const size_t x)</argsstring>
        <name>triangularRootOf</name>
        <qualifiedname>GQCP::triangularRootOf</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the triangular root of the given number. This is also the dimension of the square matrix whose lower/upper triangle has the given number of elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" line="237" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" bodystart="237" bodyend="246" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" declline="129" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1acf6fe8292e618c8a1f4b7f0bfe23cce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ifstream</type>
        <definition>std::ifstream GQCP::validateAndOpen</definition>
        <argsstring>(const std::string &amp;filename, const std::string &amp;extension)</argsstring>
        <name>validateAndOpen</name>
        <qualifiedname>GQCP::validateAndOpen</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>extension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file that should be opened </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extension</parametername>
</parameternamelist>
<parameterdescription>
<para>the expected extension of the filename </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" line="266" column="15" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" bodystart="266" bodyend="289" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" declline="135" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1abf625c067ee657a0593277469c17e222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::vectorIndex</definition>
        <argsstring>(const size_t i, const size_t j, const size_t cols, size_t skipped=0)</argsstring>
        <name>vectorIndex</name>
        <qualifiedname>GQCP::vectorIndex</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>skipped</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>the column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns in de matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipped</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns that are skipped in the matrix representation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the vector index given the corresponding row-major matrix indices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" line="257" column="8" bodyfile="/__w/GQCP/GQCP/gqcp/src/Utilities/miscellaneous.cpp" bodystart="257" bodyend="259" declfile="/__w/GQCP/GQCP/gqcp/include/Utilities/miscellaneous.hpp" declline="145" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1ac5badd8e8a13c7c539b9809048c699b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; GQCP::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const JacobiRotation &amp;jacobi_rotation)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>GQCP::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_jacobi_rotation" kindref="compound">JacobiRotation</ref> &amp;</type>
          <declname>jacobi_rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream which the parameters should be concatenated to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jacobi_rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>The Jacobi rotation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the updated output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Basis/Transformations/JacobiRotation.cpp" line="64" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Transformations/JacobiRotation.cpp" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a5f4d8cb3104fddec043ce7c7c38c48a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; GQCP::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Molecule &amp;molecule)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>GQCP::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_molecule" kindref="compound">Molecule</ref> &amp;</type>
          <declname>molecule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream which the molecule should be concatenated to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>molecule</parametername>
</parameternamelist>
<parameterdescription>
<para>the molecule that should be concatenated to the output stream</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the updated output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Molecule/Molecule.cpp" line="139" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/src/Molecule/Molecule.cpp" bodystart="139" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a2cd70ea5886af6f9310810debaef3278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; GQCP::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const NuclearFramework &amp;nuclear_framework)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>GQCP::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_nuclear_framework" kindref="compound">NuclearFramework</ref> &amp;</type>
          <declname>nuclear_framework</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream which the nuclear framework should be concatenated to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nuclear_framework</parametername>
</parameternamelist>
<parameterdescription>
<para>the nuclear framework that should be concatenated to the output stream</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the updated output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Molecule/NuclearFramework.cpp" line="245" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/src/Molecule/NuclearFramework.cpp" bodystart="245" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1acd758fcc890d9758e3b7d924526a9696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; GQCP::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Nucleus &amp;nucleus)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>GQCP::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_nucleus" kindref="compound">Nucleus</ref> &amp;</type>
          <declname>nucleus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overloading of operator&lt;&lt; for a <ref refid="class_g_q_c_p_1_1_nucleus" kindref="compound">Nucleus</ref> to be used with ostreams</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream to which the nucleus should be concatenated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nucleus</parametername>
</parameternamelist>
<parameterdescription>
<para>the nucleus which should be concatenated to the output stream</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the updated output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/Molecule/Nucleus.cpp" line="75" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/src/Molecule/Nucleus.cpp" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespace_g_q_c_p_1a601aed8e1b71004e18c05b0e1ccd7eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; GQCP::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const SpinUnresolvedONV &amp;onv)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>GQCP::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const SpinUnresolvedONV &amp;</type>
          <declname>onv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream which the ONV should be concatenated to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onv</parametername>
</parameternamelist>
<parameterdescription>
<para>The ONV that should be concatenated to the output stream.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The updated output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/src/ONVBasis/SpinUnresolvedONV.cpp" line="139" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/src/ONVBasis/SpinUnresolvedONV.cpp" bodystart="139" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An extension of the Eigen::Array class, with extra operations</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>the scalar representation type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Rows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows (int or Dynamic) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Cols</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of columns (int or Dynamic)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
A header that contains general aliases inside the <ref refid="namespace_g_q_c_p" kindref="compound">GQCP</ref> namespace.</para>
<para>Extensions of the &lt;memory&gt; header that haven&apos;t been included in C++11 A C++11 implementation for std::make_unique. Taken from <ulink url="https://stackoverflow.com/a/17902439">https://stackoverflow.com/a/17902439</ulink>.</para>
<para>Extensions of the &lt;type_traits&gt; header that haven&apos;t been included in C++11 An implementation of enable_if_t. </para>
    </detaileddescription>
    <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/BaseOneElectronIntegralBuffer.hpp" line="25" column="1"/>
  </compounddef>
</doxygen>
