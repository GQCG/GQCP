<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_g_q_c_p_1_1_integral_engine" kind="class" language="C++" prot="public">
    <compoundname>GQCP::IntegralEngine</compoundname>
    <includes refid="_integral_engine_8hpp" local="no">IntegralEngine.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a4cf422b709df6a1b8489339e85ffdae1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Shell</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto GQCP::IntegralEngine::InHouse</definition>
        <argsstring>(const OverlapOperator &amp;op) -&gt; OneElectronIntegralEngine&lt; PrimitiveOverlapIntegralEngine&lt; Shell &gt;&gt;</argsstring>
        <name>InHouse</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_overlap_operator" kindref="compound">OverlapOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an in-house one-electron integral engine that can calculate integrals over the overlap operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Shell</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of shell that the integrals should be calculated over.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The overlap operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A one-electron integral engine that can calculate integrals over the overlap operator.</para>
</simplesect>
<simplesect kind="note"><para>This integral engine can only calculate integrals over Cartesian d-shells, not spherical d-shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="65" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a91d02ffde81b71a1e48b11dee9ebfda7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Shell</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto GQCP::IntegralEngine::InHouse</definition>
        <argsstring>(const ElectronicDipoleOperator &amp;op) -&gt; OneElectronIntegralEngine&lt; PrimitiveElectronicDipoleIntegralEngine&lt; Shell &gt;&gt;</argsstring>
        <name>InHouse</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_electronic_dipole_operator" kindref="compound">ElectronicDipoleOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an in-house one-electron integral engine that can calculate integrals over the electronic dipole operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Shell</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of shell that the integrals should be calculated over.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The electronic dipole operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A one-electron integral engine that can calculate integrals over the electronic dipole operator.</para>
</simplesect>
<simplesect kind="note"><para>This integral engine can only calculate integrals over Cartesian d-shells, not spherical d-shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="83" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a66c017d2b104224813e6371be96f316d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Shell</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto GQCP::IntegralEngine::InHouse</definition>
        <argsstring>(const LinearMomentumOperator &amp;op) -&gt; OneElectronIntegralEngine&lt; PrimitiveLinearMomentumIntegralEngine&lt; Shell &gt;&gt;</argsstring>
        <name>InHouse</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_momentum_operator" kindref="compound">LinearMomentumOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an in-house one-electron integral engine that can calculate integrals over the linear momentum operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Shell</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of shell that the integrals should be calculated over.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The linear momentum operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A one-electron integral engine that can calculate integrals over the linear momentum operator.</para>
</simplesect>
<simplesect kind="note"><para>This integral engine can only calculate integrals over Cartesian d-shells, not spherical d-shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="101" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a130fcebcf302c6675af5aea64cbe548b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Shell</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto GQCP::IntegralEngine::InHouse</definition>
        <argsstring>(const KineticOperator &amp;op) -&gt; OneElectronIntegralEngine&lt; PrimitiveCanonicalKineticEnergyIntegralEngine&lt; Shell &gt;&gt;</argsstring>
        <name>InHouse</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_kinetic_operator" kindref="compound">KineticOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an in-house one-electron integral engine that can calculate integrals over the canonical kinetic energy operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Shell</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of shell that the integrals should be calculated over.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The canonical kinetic energy operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A one-electron integral engine that can calculate integrals over the canonical kinetic energy operator.</para>
</simplesect>
<simplesect kind="note"><para>This integral engine can only calculate integrals over Cartesian d-shells, not spherical d-shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="119" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a3d8dda7bbd43c52c6c92be609edc534e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Shell</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto GQCP::IntegralEngine::InHouse</definition>
        <argsstring>(const AngularMomentumOperator &amp;op) -&gt; OneElectronIntegralEngine&lt; PrimitiveAngularMomentumIntegralEngine&lt; Shell &gt;&gt;</argsstring>
        <name>InHouse</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_angular_momentum_operator" kindref="compound">AngularMomentumOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an in-house one-electron integral engine that can calculate integrals over the angular momentum operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Shell</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of shell that the integrals should be calculated over.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The angular momentum operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A one-electron integral engine that can calculate integrals over the angular momentum operator.</para>
</simplesect>
<simplesect kind="note"><para>This integral engine can only calculate integrals over Cartesian d-shells, not spherical d-shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="137" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a4a066e523a4bfe6346700cf0d4e92d66" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Shell</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto GQCP::IntegralEngine::InHouse</definition>
        <argsstring>(const ElectronicQuadrupoleOperator &amp;op) -&gt; OneElectronIntegralEngine&lt; PrimitiveElectronicQuadrupoleIntegralEngine&lt; Shell &gt;&gt;</argsstring>
        <name>InHouse</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_electronic_quadrupole_operator" kindref="compound">ElectronicQuadrupoleOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an in-house one-electron integral engine that can calculate integrals over the electronic quadrupole operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Shell</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of shell that the integrals should be calculated over.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The electronic quadrupole operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A one-electron integral engine that can calculate integrals over the electronic quadrupole operator.</para>
</simplesect>
<simplesect kind="note"><para>This integral engine can only calculate integrals over Cartesian d-shells, not spherical d-shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="155" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a09d60dc73bf58da92bcda5c3c0599890" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Shell</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto GQCP::IntegralEngine::InHouse</definition>
        <argsstring>(const NuclearAttractionOperator &amp;op) -&gt; OneElectronIntegralEngine&lt; PrimitiveNuclearAttractionIntegralEngine&lt; Shell &gt;&gt;</argsstring>
        <name>InHouse</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_nuclear_attraction_operator" kindref="compound">NuclearAttractionOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an in-house one-electron integral engine that can calculate integrals over the nuclear attraction operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Shell</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of shell that the integrals should be calculated over.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The nuclear attraction operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A one-electron integral engine that can calculate integrals over the nuclear attraction operator.</para>
</simplesect>
<simplesect kind="note"><para>This integral engine can only calculate integrals over Cartesian d-shells, not spherical d-shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="173" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a38f49009cb9d182ecbec6dd6d19914a5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Shell</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto GQCP::IntegralEngine::InHouse</definition>
        <argsstring>(const CoulombRepulsionOperator &amp;op) -&gt; TwoElectronIntegralEngine&lt; PrimitiveCoulombRepulsionIntegralEngine&lt; Shell &gt;&gt;</argsstring>
        <name>InHouse</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_coulomb_repulsion_operator" kindref="compound">CoulombRepulsionOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an in-house two-electron integral engine that can calculate integrals over the Coulomb repulsion operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Shell</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of shell that the integrals should be calculated over.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The Coulomb repulsion operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A two-electron integral engine that can calculate integrals over the Coulomb repulsion operator.</para>
</simplesect>
<simplesect kind="note"><para>This integral engine can only calculate integrals over Cartesian d-shells, not spherical d-shells. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="191" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1ab787d80066396f64d88877c848535aed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto GQCP::IntegralEngine::Libint</definition>
        <argsstring>(const CoulombRepulsionOperator &amp;op, const size_t max_nprim, const size_t max_l) -&gt; LibintTwoElectronIntegralEngine&lt; CoulombRepulsionOperator::NumberOfComponents &gt;</argsstring>
        <name>Libint</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_coulomb_repulsion_operator" kindref="compound">CoulombRepulsionOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_nprim</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the Coulomb repulsion operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_nprim</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of primitives per contracted Gaussian shell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_l</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum angular momentum of Gaussian shell</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a two-electron integral engine that can calculate integrals over the Coulomb repulsion operator using the Libint integral library backend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="208" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a94b57de64ef4887b9eac7167c57d3315" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto GQCP::IntegralEngine::Libint</definition>
        <argsstring>(const ElectronicDipoleOperator &amp;op, const size_t max_nprim, const size_t max_l) -&gt; LibintOneElectronIntegralEngine&lt; ElectronicDipoleOperator::NumberOfComponents &gt;</argsstring>
        <name>Libint</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_electronic_dipole_operator" kindref="compound">ElectronicDipoleOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_nprim</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the electronic electric dipole operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_nprim</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of primitives per contracted Gaussian shell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_l</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum angular momentum of Gaussian shell</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a one-electron integral engine that can calculate integrals over the electronic electric dipole operator using the Libint integral library backend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="217" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a696f240f9a5d091a4adffb5ebfba6c6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto GQCP::IntegralEngine::Libint</definition>
        <argsstring>(const NuclearAttractionOperator &amp;op, const size_t max_nprim, const size_t max_l) -&gt; LibintOneElectronIntegralEngine&lt; NuclearAttractionOperator::NumberOfComponents &gt;</argsstring>
        <name>Libint</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_nuclear_attraction_operator" kindref="compound">NuclearAttractionOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_nprim</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the nuclear attraction operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_nprim</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of primitives per contracted Gaussian shell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_l</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum angular momentum of Gaussian shell</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a one-electron integral engine that can calculate integrals over the nuclear attraction operator using the Libint integral library backend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="226" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a9651e5879fb084b570946bcf63d87f0f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto GQCP::IntegralEngine::Libint</definition>
        <argsstring>(const KineticOperator &amp;op, const size_t max_nprim, const size_t max_l) -&gt; LibintOneElectronIntegralEngine&lt; KineticOperator::NumberOfComponents &gt;</argsstring>
        <name>Libint</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_kinetic_operator" kindref="compound">KineticOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_nprim</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the kinetic operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_nprim</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of primitives per contracted Gaussian shell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_l</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum angular momentum of Gaussian shell</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a one-electron integral engine that can calculate integrals over the kinetic operator using the Libint integral library backend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="235" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1afec59610cce637a4604d1fcf0b5be052" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto GQCP::IntegralEngine::Libint</definition>
        <argsstring>(const OverlapOperator &amp;op, const size_t max_nprim, const size_t max_l) -&gt; LibintOneElectronIntegralEngine&lt; OverlapOperator::NumberOfComponents &gt;</argsstring>
        <name>Libint</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_overlap_operator" kindref="compound">OverlapOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_nprim</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the overlap operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_nprim</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of primitives per contracted Gaussian shell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_l</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum angular momentum of Gaussian shell</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a one-electron integral engine that can calculate integrals over the overlap operator using the Libint integral library backend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="244" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1adda456fbfda8083c3f931e666b558af5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto GQCP::IntegralEngine::Libcint</definition>
        <argsstring>(const CoulombRepulsionOperator &amp;op, const ShellSet&lt; GTOShell &gt; &amp;shell_set) -&gt; LibcintTwoElectronIntegralEngine&lt; GTOShell, CoulombRepulsionOperator::NumberOfComponents, double &gt;</argsstring>
        <name>Libcint</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_coulomb_repulsion_operator" kindref="compound">CoulombRepulsionOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_shell_set" kindref="compound">ShellSet</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>shell_set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the Coulomb repulsion operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shell_set</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_g_q_c_p_1_1_shell_set" kindref="compound">ShellSet</ref> whose information should be converted to a RawContainer, which will serve as some kind of &apos;global&apos; data for the libcint engine to use in all its calculate() calls</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a two-electron integral engine that can calculate integrals over the Coulomb repulsion operator using the Libcint integral library backend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="257" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1ab92646915ae593df997ae85294158bff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto GQCP::IntegralEngine::Libcint</definition>
        <argsstring>(const ElectronicDipoleOperator &amp;op, const ShellSet&lt; GTOShell &gt; &amp;shell_set) -&gt; LibcintOneElectronIntegralEngine&lt; GTOShell, ElectronicDipoleOperator::NumberOfComponents, double &gt;</argsstring>
        <name>Libcint</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_electronic_dipole_operator" kindref="compound">ElectronicDipoleOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_shell_set" kindref="compound">ShellSet</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>shell_set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the electron electronic dipole operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shell_set</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_g_q_c_p_1_1_shell_set" kindref="compound">ShellSet</ref> whose information should be converted to a RawContainer, which will serve as some kind of &apos;global&apos; data for the libcint engine to use in all its calculate() calls</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a one-electron integral engine that can calculate integrals over the electronic dipole operator using the Libcint integral library backend</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the electron electronic dipole operator</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a one-electron integral engine that can calculate integrals over the electronic dipole operator using the Libcint integral library backend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="265" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a504b4863082626055f8555ab4f8658bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto GQCP::IntegralEngine::Libcint</definition>
        <argsstring>(const NuclearAttractionOperator &amp;op, const ShellSet&lt; GTOShell &gt; &amp;shell_set) -&gt; LibcintOneElectronIntegralEngine&lt; GTOShell, NuclearAttractionOperator::NumberOfComponents, double &gt;</argsstring>
        <name>Libcint</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_nuclear_attraction_operator" kindref="compound">NuclearAttractionOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_shell_set" kindref="compound">ShellSet</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>shell_set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the nuclear attraction operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shell_set</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_g_q_c_p_1_1_shell_set" kindref="compound">ShellSet</ref> whose information should be converted to a RawContainer, which will serve as some kind of &apos;global&apos; data for the libcint engine to use in all its calculate() calls</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a one-electron integral engine that can calculate integrals over the nuclear attraction operator using the Libcint integral library backend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="273" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a3793b759cb20f072c69adff0e026022b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto GQCP::IntegralEngine::Libcint</definition>
        <argsstring>(const KineticOperator &amp;op, const ShellSet&lt; GTOShell &gt; &amp;shell_set) -&gt; LibcintOneElectronIntegralEngine&lt; GTOShell, KineticOperator::NumberOfComponents, double &gt;</argsstring>
        <name>Libcint</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_kinetic_operator" kindref="compound">KineticOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_shell_set" kindref="compound">ShellSet</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>shell_set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the kinetic operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shell_set</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_g_q_c_p_1_1_shell_set" kindref="compound">ShellSet</ref> whose information should be converted to a RawContainer, which will serve as some kind of &apos;global&apos; data for the libcint engine to use in all its calculate() calls</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a one-electron integral engine that can calculate integrals over the kinetic operator using the Libcint integral library backend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="281" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_integral_engine_1a81fbbe96aeaf4d240de12b98d3ef741d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto GQCP::IntegralEngine::Libcint</definition>
        <argsstring>(const OverlapOperator &amp;op, const ShellSet&lt; GTOShell &gt; &amp;shell_set) -&gt; LibcintOneElectronIntegralEngine&lt; GTOShell, OverlapOperator::NumberOfComponents, double &gt;</argsstring>
        <name>Libcint</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_overlap_operator" kindref="compound">OverlapOperator</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_shell_set" kindref="compound">ShellSet</ref>&lt; <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>shell_set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the overlap operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shell_set</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_g_q_c_p_1_1_shell_set" kindref="compound">ShellSet</ref> whose information should be converted to a RawContainer, which will serve as some kind of &apos;global&apos; data for the libcint engine to use in all its calculate() calls</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a one-electron integral engine that can calculate integrals over the overlap operator using the Libcint integral library backend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="289" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/src/Basis/Integrals/Primitive/IntegralEngine.cpp" bodystart="150" bodyend="153"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A class that creates integral engines, like a factory class. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>GQCP::IntegralEngine</label>
        <link refid="class_g_q_c_p_1_1_integral_engine"/>
      </node>
    </collaborationgraph>
    <location file="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" line="45" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Basis/Integrals/IntegralEngine.hpp" bodystart="45" bodyend="290"/>
    <listofallmembers>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a4cf422b709df6a1b8489339e85ffdae1" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>InHouse</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a91d02ffde81b71a1e48b11dee9ebfda7" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>InHouse</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a66c017d2b104224813e6371be96f316d" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>InHouse</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a130fcebcf302c6675af5aea64cbe548b" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>InHouse</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a3d8dda7bbd43c52c6c92be609edc534e" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>InHouse</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a4a066e523a4bfe6346700cf0d4e92d66" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>InHouse</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a09d60dc73bf58da92bcda5c3c0599890" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>InHouse</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a38f49009cb9d182ecbec6dd6d19914a5" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>InHouse</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1adda456fbfda8083c3f931e666b558af5" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>Libcint</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1ab92646915ae593df997ae85294158bff" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>Libcint</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a504b4863082626055f8555ab4f8658bd" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>Libcint</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a3793b759cb20f072c69adff0e026022b" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>Libcint</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a81fbbe96aeaf4d240de12b98d3ef741d" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>Libcint</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1ab787d80066396f64d88877c848535aed" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>Libint</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a94b57de64ef4887b9eac7167c57d3315" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>Libint</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a696f240f9a5d091a4adffb5ebfba6c6a" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>Libint</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1a9651e5879fb084b570946bcf63d87f0f" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>Libint</name></member>
      <member refid="class_g_q_c_p_1_1_integral_engine_1afec59610cce637a4604d1fcf0b5be052" prot="public" virt="non-virtual"><scope>GQCP::IntegralEngine</scope><name>Libint</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
