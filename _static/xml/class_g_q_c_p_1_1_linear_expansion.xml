<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_g_q_c_p_1_1_linear_expansion" kind="class" language="C++" prot="public">
    <compoundname>GQCP::LinearExpansion</compoundname>
    <includes refid="_linear_expansion_8hpp" local="no">LinearExpansion.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename _Scalar</type>
      </param>
      <param>
        <type>typename _ONVBasis</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" prot="public" static="no">
        <type>_Scalar</type>
        <definition>using GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::Scalar =  _Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <qualifiedname>GQCP::LinearExpansion::Scalar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="62" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" prot="public" static="no">
        <type>_ONVBasis</type>
        <definition>using GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::ONVBasis =  _ONVBasis</definition>
        <argsstring></argsstring>
        <name>ONVBasis</name>
        <qualifiedname>GQCP::LinearExpansion::ONVBasis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="65" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_g_q_c_p_1_1_linear_expansion_1a6b3dfe51faf4e58e0dd6d038842c0942" prot="private" static="no" mutable="no">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></type>
        <definition>ONVBasis GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::onv_basis</definition>
        <argsstring></argsstring>
        <name>onv_basis</name>
        <qualifiedname>GQCP::LinearExpansion::onv_basis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="70" column="14" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_g_q_c_p_1_1_linear_expansion_1aca2691547f747fd79d5e27379ba6903a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt;</type>
        <definition>VectorX&lt;Scalar&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::m_coefficients</definition>
        <argsstring></argsstring>
        <name>m_coefficients</name>
        <qualifiedname>GQCP::LinearExpansion::m_coefficients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="73" column="13" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1af7649247c802d4da39eb4516d85b8ffb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::LinearExpansion</definition>
        <argsstring>(const ONVBasis &amp;onv_basis, const VectorX&lt; Scalar &gt; &amp;coefficients)</argsstring>
        <name>LinearExpansion</name>
        <qualifiedname>GQCP::LinearExpansion::LinearExpansion</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
          <declname>onv_basis</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>coefficients</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a linear expansion inside the given ONV basis, with corresponding expansion coefficients.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The ONV basis with respect to which the coefficients are defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>The expansion coefficients. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="87" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a6902d1a87c3ea5c120819b7ff5c4a594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::LinearExpansion</definition>
        <argsstring>()=default</argsstring>
        <name>LinearExpansion</name>
        <qualifiedname>GQCP::LinearExpansion::LinearExpansion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="95" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a60c63293906daaea5dcce4aea644c74d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></type>
        <definition>Scalar GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::coefficient</definition>
        <argsstring>(const size_t i) const</argsstring>
        <name>coefficient</name>
        <qualifiedname>GQCP::LinearExpansion::coefficient</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access a coefficient of the linear expansion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (address) of the coefficient that should be obtained.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The i-th expansion coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="388" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="388" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a6b3479bc3007d2c71d5c9a42fc1e6ddd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &amp;</type>
        <definition>const VectorX&lt; Scalar &gt; &amp; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::coefficients</definition>
        <argsstring>() const</argsstring>
        <name>coefficients</name>
        <qualifiedname>GQCP::LinearExpansion::coefficients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The expansion coefficients of this linear expansion wave function model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="393" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="393" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1adfbfbb6330dd8c19099cb1927b8561fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
        <definition>const ONVBasis &amp; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::onvBasis</definition>
        <argsstring>() const</argsstring>
        <name>onvBasis</name>
        <qualifiedname>GQCP::LinearExpansion::onvBasis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The ONV basis that is related to this linear expansion wave function model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="398" column="20" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="398" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a237247a44a750b5f15ea962eab038687" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::basisTransform</definition>
        <argsstring>(const RTransformation&lt; double &gt; &amp;T)</argsstring>
        <name>basisTransform</name>
        <qualifiedname>GQCP::LinearExpansion::basisTransform</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_r_transformation" kindref="compound">RTransformation</ref>&lt; double &gt; &amp;</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the expansion coefficients of this linear expansion so that they correspond to the situation after a transformation of the underlying spinor basis with the given basis transformation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformation between the old and the new restricted spin-orbital basis.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This method is only available for the full spin-resolved ONV basis. </para>
</simplesect>
<simplesect kind="note"><para>This algorithm was implemented from a description in Helgaker2000. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>The transformation of the expansion coefficients is adapted from Helgaker2000, chapter 11.9. For every orbital, a set of correction coefficients will be calculated (Delta C in Helgaker), to update the current coefficients.</para>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="414" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="414" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a942a9a34b540d95eb828b17879da1440" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinUnresolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_g1_d_m" kindref="compound">G1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinUnresolvedONVBasis &gt;::value, G1DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate1DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculate1DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="595" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="595" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a4617b5d4195977a4e60226bc02cb0919" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value, Scalar &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateNDMElement</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;bra_indices, const std::vector&lt; size_t &gt; &amp;ket_indices) const</argsstring>
        <name>calculateNDMElement</name>
        <qualifiedname>GQCP::LinearExpansion::calculateNDMElement</qualifiedname>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>bra_indices</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>ket_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate an element of the N-electron density matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bra_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the orbitals that should be annihilated on the left (on the bra). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ket_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the orbitals that should be annihilated on the right (on the ket).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An element of the N-DM, as specified by the given bra and ket indices. <computeroutput>calculateNDMElement({0, 1}, {2, 1})</computeroutput> would calculate an element of the 2-NDM d^{(2)} (0, 1, 1, 2) corresponding the operator string: <computeroutput>a^\dagger_0 a^\dagger_1 a_2 a_1</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>This method is only enabled for linear expansions related to spin-unresolved ONV bases. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="669" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="669" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a7db884d0fe88a76502fe3b02988b14ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, SpinUnresolvedSelectedONVBasis &gt;::value, Scalar &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateNDMElement</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;bra_indices, const std::vector&lt; size_t &gt; &amp;ket_indices) const</argsstring>
        <name>calculateNDMElement</name>
        <qualifiedname>GQCP::LinearExpansion::calculateNDMElement</qualifiedname>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>bra_indices</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>ket_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate an element of the N-electron density matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bra_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the orbitals that should be annihilated on the left (on the bra). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ket_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the orbitals that should be annihilated on the right (on the ket).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An element of the N-DM, as specified by the given bra and ket indices. <computeroutput>calculateNDMElement({0, 1}, {2, 1})</computeroutput> would calculate an element of the 2-NDM d^{(2)} (0, 1, 1, 2) corresponding the operator string: <computeroutput>a^\dagger_0 a^\dagger_1 a_2 a_1</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>This method is only enabled for linear expansions related to spin-unresolved selected ONV bases. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="757" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="757" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a97ff7a4e17511a28e658fab4b9e1478f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved1_d_m" kindref="compound">SpinResolved1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, SpinResolved1DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved1DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculateSpinResolved1DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved one-electron density matrix for a full spin-resolved wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="843" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="843" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ab70860c64b91db4f2612984ca4d1f2f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved2_d_m" kindref="compound">SpinResolved2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, SpinResolved2DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved2DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculateSpinResolved2DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved two-electron density matrix for a full spin-resolved wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="963" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="963" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ad6bb1642c2a6d06ad181599cf0c3ef44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital1_d_m" kindref="compound">Orbital1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, Orbital1DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate1DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculate1DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the one-electron density matrix for a full spin-resolved wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 1-DM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1176" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1176" bodyend="1176"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a96779d39bbd8962cb102f5b3d569cbc9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital2_d_m" kindref="compound">Orbital2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, Orbital2DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate2DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculate2DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the two-electron density matrix for a full spin-resolved wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1185" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1185" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a9d885bd727a59ce487c944590ce92e3e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital1_d_m" kindref="compound">Orbital1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, Orbital1DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate1DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculate1DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the orbital one-electron density matrix for a seniority-zero wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1198" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1198" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a4c107c02909a635144faa00c12e0c73f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital2_d_m" kindref="compound">Orbital2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, Orbital2DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate2DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculate2DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the two-electron density matrix for a seniority-zero wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1232" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1232" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a8d78a522f933890b0934a641c000f754" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved1_d_m" kindref="compound">SpinResolved1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, SpinResolved1DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved1DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculateSpinResolved1DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved one-electron density matrix for a seniority-zero wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1240" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1240" bodyend="1240"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a43c6bf67273c3ae4b2dc3b3431ec8a4c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved2_d_m" kindref="compound">SpinResolved2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, SpinResolved2DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved2DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculateSpinResolved2DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved two-electron density matrix for a seniority-zero wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1249" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1249" bodyend="1306"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1af5557aee6d74427e9ebffc73258782d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved1_d_m" kindref="compound">SpinResolved1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, SpinResolved1DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved1DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculateSpinResolved1DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved one-electron density matrix for a spin-resolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1319" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1319" bodyend="1390"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ae00cf6a87db408bbc89fe1c6a777e2ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved2_d_m" kindref="compound">SpinResolved2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, SpinResolved2DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved2DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculateSpinResolved2DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved two-electron density matrix for a spin-resolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1399" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1399" bodyend="1622"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a170c37f47dd80cc442014825d698d0c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital1_d_m" kindref="compound">Orbital1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, Orbital1DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate1DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculate1DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the one-electron density matrix for a spin-resolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1631" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1631" bodyend="1631"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a650b4b0ada44f4deefed6c87fb3fd357" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital2_d_m" kindref="compound">Orbital2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, Orbital2DM&lt; double &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate2DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculate2DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the two-electron density matrix for a spin-resolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1640" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1640" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1af8dd4e3377dbbfff5e07872f3ec1c413" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_g1_d_m" kindref="compound">G1DM</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, SpinUnresolvedSelectedONVBasis &gt;::value, G1DM&lt; Scalar &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate1DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculate1DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the generalized (G) one-electron density matrix for a spin-unresolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The generalized (G) 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1649" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1649" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a539a721085724fa27889cc8f763655c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_g2_d_m" kindref="compound">G2DM</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, SpinUnresolvedSelectedONVBasis &gt;::value, G2DM&lt; Scalar &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate2DM</name>
        <qualifiedname>GQCP::LinearExpansion::calculate2DM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the generalized (G) two-electron density matrix (1-DM) for a spin-unresolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The generalized (G) 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1697" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1697" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a4fb15105e2f38a40d9ffc2e461cba52b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value|std::is_same&lt; Z, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_tensor" kindref="compound">GQCP::Tensor</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, 2 &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value|std::is_same&lt; Z, SpinResolvedONVBasis &gt;::value, GQCP::Tensor&lt; Scalar, 2 &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::tensorizeCoefficients</definition>
        <argsstring>(const std::vector&lt; typename ONVBasis::ONV &gt; &amp;system_onvs, const std::vector&lt; typename ONVBasis::ONV &gt; &amp;environment_onvs) const</argsstring>
        <name>tensorizeCoefficients</name>
        <qualifiedname>GQCP::LinearExpansion::tensorizeCoefficients</qualifiedname>
        <param>
          <type>const std::vector&lt; typename ONVBasis::ONV &gt; &amp;</type>
          <declname>system_onvs</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename ONVBasis::ONV &gt; &amp;</type>
          <declname>environment_onvs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MARK: Entropy Construct the linear expansion in tensor form.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>system_onvs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of all ONVs of the system that is obtained after splitting an ONV basis into two subsystems. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>environment_onvs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of all ONVs of the environment that is obtained after splitting an ONV basis into two subsystems.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expansion coefficients in tensor form. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1802" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1802" bodyend="1850"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a5b2c846a25a8462109048bc391a91ca9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_tensor" kindref="compound">Tensor</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, 2 &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, SpinResolvedONVBasis &gt;::value, Tensor&lt; Scalar, 2 &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSystemOrbitalRDM</definition>
        <argsstring>(const DiscreteDomainPartition &amp;domain_partition) const</argsstring>
        <name>calculateSystemOrbitalRDM</name>
        <qualifiedname>GQCP::LinearExpansion::calculateSystemOrbitalRDM</qualifiedname>
        <param>
          <type>const DiscreteDomainPartition &amp;</type>
          <declname>domain_partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the system orbital reduced density matrix as defined in equation (2) of Rissler2005 (<ulink url="https://doi.org/10.1016/j.chemphys.2005.10.018">https://doi.org/10.1016/j.chemphys.2005.10.018</ulink>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain_partition</parametername>
</parameternamelist>
<parameterdescription>
<para>The (discrete) domain partition used to partition the spin-resolved ONVs in this <computeroutput><ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The system orbital reduced density matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1861" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1861" bodyend="1886"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a2ac344dcc8138702f5d2845488024e13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_tensor" kindref="compound">Tensor</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, 2 &gt; &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value, Tensor&lt; Scalar, 2 &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSystemOrbitalRDM</definition>
        <argsstring>(const DiscreteDomainPartition &amp;domain_partition) const</argsstring>
        <name>calculateSystemOrbitalRDM</name>
        <qualifiedname>GQCP::LinearExpansion::calculateSystemOrbitalRDM</qualifiedname>
        <param>
          <type>const DiscreteDomainPartition &amp;</type>
          <declname>domain_partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the system orbital reduced density matrix as defined in equation (2) of Rissler2005 (<ulink url="https://doi.org/10.1016/j.chemphys.2005.10.018">https://doi.org/10.1016/j.chemphys.2005.10.018</ulink>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain_partition</parametername>
</parameternamelist>
<parameterdescription>
<para>The (discrete) domain partition used to partition the spin-unresolved ONVs in this <computeroutput><ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The system orbital reduced density matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1897" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1897" bodyend="1930"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a693a628e454b539ed6e19d2f1297d877" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, double &gt;::value, double &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, double &gt;::value, double &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateShannonEntropy</definition>
        <argsstring>() const</argsstring>
        <name>calculateShannonEntropy</name>
        <qualifiedname>GQCP::LinearExpansion::calculateShannonEntropy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Shannon entropy (information content) of the wave function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1937" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1937" bodyend="1948"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1aaf5e9cb02507e80ea7cea70263102d8f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, double &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, double &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSingleOrbitalEntropy</definition>
        <argsstring>(const size_t orbital_index) const</argsstring>
        <name>calculateSingleOrbitalEntropy</name>
        <qualifiedname>GQCP::LinearExpansion::calculateSingleOrbitalEntropy</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>orbital_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the single orbital entropy of the orbital at the selected index, from the spin-resolved 1- and two-particle density matrix. The implementation is based on <ulink url="https://doi.org/10.1002/qua.24832">https://doi.org/10.1002/qua.24832</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orbital_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the orbital for which the single orbital entropy needs to be calculated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The single orbital entropy of the orbital at the specified index.</para>
</simplesect>
<simplesect kind="note"><para>This version of this method is used when the linear expansion is based on a spin-resolved ONV basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1961" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1961" bodyend="1997"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1aa5c66b844be83e68142311ef4a0ec49f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, double &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z1, Scalar &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, double &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSingleOrbitalEntropy</definition>
        <argsstring>(const size_t orbital_index) const</argsstring>
        <name>calculateSingleOrbitalEntropy</name>
        <qualifiedname>GQCP::LinearExpansion::calculateSingleOrbitalEntropy</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>orbital_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the single orbital entropy of the orbital at the selected index, from the spin-resolved 1- and two-particle density matrix. The implementation is based on <ulink url="https://doi.org/10.1002/qua.24832">https://doi.org/10.1002/qua.24832</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orbital_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the orbital for which the single orbital entropy needs to be calculated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The single orbital entropy of the orbital at the specified index.</para>
</simplesect>
<simplesect kind="note"><para>This version of this method is used when the linear expansion is based on a seniority-zero ONV basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="2010" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="2010" bodyend="2042"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a365a4727ec38d2c7ac615f043b31acbf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElectronPartition</type>
          </param>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same&lt; Z, SpinResolvedONVBasis &gt;::value, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateProbabilityOfFindingElectronPartition</definition>
        <argsstring>(const DiscreteDomainPartition &amp;domain_partition, const ElectronPartition &amp;electron_partition) const</argsstring>
        <name>calculateProbabilityOfFindingElectronPartition</name>
        <qualifiedname>GQCP::LinearExpansion::calculateProbabilityOfFindingElectronPartition</qualifiedname>
        <param>
          <type>const DiscreteDomainPartition &amp;</type>
          <declname>domain_partition</declname>
        </param>
        <param>
          <type>const ElectronPartition &amp;</type>
          <declname>electron_partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MARK: Probability Calculate the probability of finding a given electron distribution over the discrete domains according to equation (11) in VanHende2022 (<ulink url="https://doi.org/10.1002/jcc.26806">https://doi.org/10.1002/jcc.26806</ulink>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain_partition</parametername>
</parameternamelist>
<parameterdescription>
<para>The partition of the orbitals in discrete domains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>electron_partition</parametername>
</parameternamelist>
<parameterdescription>
<para>Electron occupation number in each discrete domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the probability of finding a given electron distribution over the discrete domains. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="2058" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="2058" bodyend="2070"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a365a4727ec38d2c7ac615f043b31acbf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElectronPartition</type>
          </param>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateProbabilityOfFindingElectronPartition</definition>
        <argsstring>(const DiscreteDomainPartition &amp;domain_partition, const ElectronPartition &amp;electron_partition) const</argsstring>
        <name>calculateProbabilityOfFindingElectronPartition</name>
        <qualifiedname>GQCP::LinearExpansion::calculateProbabilityOfFindingElectronPartition</qualifiedname>
        <param>
          <type>const DiscreteDomainPartition &amp;</type>
          <declname>domain_partition</declname>
        </param>
        <param>
          <type>const ElectronPartition &amp;</type>
          <declname>electron_partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the probability of finding a given electron distribution over the discrete domains according to equation (11) in VanHende2022 (<ulink url="https://doi.org/10.1002/jcc.26806">https://doi.org/10.1002/jcc.26806</ulink>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain_partition</parametername>
</parameternamelist>
<parameterdescription>
<para>The partition of the orbitals in discrete domains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>electron_partition</parametername>
</parameternamelist>
<parameterdescription>
<para>Electron occupation number in each discrete domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The probability of finding a given electron distribution over the discrete domains. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="2081" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="2081" bodyend="2091"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a9cdb7536bc7185c03b7f80b21844c517" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinResolvedONVBasis &gt;::value, void &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, SpinResolvedONVBasis &gt;::value, void &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::forEach</definition>
        <argsstring>(const std::function&lt; void(const Scalar, const SpinResolvedONV)&gt; &amp;callback) const</argsstring>
        <name>forEach</name>
        <qualifiedname>GQCP::LinearExpansion::forEach</qualifiedname>
        <param>
          <type>const std::function&lt; void(const <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, const SpinResolvedONV)&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over all expansion coefficients and corresponding ONVs, and apply the given callback function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be applied in every iteration. Its arguments are an expansion coefficient and the corresponding ONV. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="2104" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="2104" bodyend="2116"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a251e9be48f5c32e3f0b7c3ed9082b5e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value, void &gt;</type>
        <definition>enable_if_t&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value, void &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::forEach</definition>
        <argsstring>(const std::function&lt; void(const Scalar, const SpinUnresolvedONV)&gt; &amp;callback) const</argsstring>
        <name>forEach</name>
        <qualifiedname>GQCP::LinearExpansion::forEach</qualifiedname>
        <param>
          <type>const std::function&lt; void(const <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, const SpinUnresolvedONV)&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over all expansion coefficients and corresponding ONVs, and apply the given callback function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be applied in every iteration. Its arguments are an expansion coefficient and the corresponding ONV. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="2125" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="2125" bodyend="2135"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1aee095ee9919d57753f68396b99da4370" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::isApprox</definition>
        <argsstring>(const LinearExpansion&lt; Scalar, ONVBasis &gt; &amp;other, double tolerance=1.0e-12) const</argsstring>
        <name>isApprox</name>
        <qualifiedname>GQCP::LinearExpansion::isApprox</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>1.0e-12</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other linear expansion for the comparison. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>The tolerance for the comparison of coefficients.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the two linear expansions are equal within a given tolerance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="2148" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="2148" bodyend="2155"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ac5c87997a5811b71943be58100ea6278" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &gt;</type>
        <definition>static LinearExpansion&lt; Scalar, ONVBasis &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::Constant</definition>
        <argsstring>(const ONVBasis &amp;onv_basis)</argsstring>
        <name>Constant</name>
        <qualifiedname>GQCP::LinearExpansion::Constant</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
          <declname>onv_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a linear expansion with a normalized coefficient vector (i.e. all the coefficients are equal).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The ONV basis with respect to which the coefficients are defined.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="109" column="28" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="109" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1aad29eb362547ac6d2302fbf13111135d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &gt;</type>
        <definition>static LinearExpansion&lt; Scalar, ONVBasis &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::HartreeFock</definition>
        <argsstring>(const ONVBasis &amp;onv_basis)</argsstring>
        <name>HartreeFock</name>
        <qualifiedname>GQCP::LinearExpansion::HartreeFock</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
          <declname>onv_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a linear expansion that represents the Hartree-Fock wave function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The ONV basis with respect to which the coefficients are defined.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="125" column="28" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="125" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a0e633723ca75fcbe86dd81014a27bbe0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &gt;</type>
        <definition>static LinearExpansion&lt; Scalar, ONVBasis &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::Normalized</definition>
        <argsstring>(const ONVBasis &amp;onv_basis, const VectorX&lt; Scalar &gt; &amp;coefficients)</argsstring>
        <name>Normalized</name>
        <qualifiedname>GQCP::LinearExpansion::Normalized</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
          <declname>onv_basis</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>coefficients</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a normalized linear expansion inside a given ONV basis with possibly non-normalized coefficients.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The ONV basis with respect to which the coefficients are defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>the expansion coefficients</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A normalized <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="141" column="28" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="141" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a771a6ed3dea04c7b2e37f39bf80ebc07" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &gt;</type>
        <definition>static LinearExpansion&lt; Scalar, ONVBasis &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::Random</definition>
        <argsstring>(const ONVBasis &amp;onv_basis)</argsstring>
        <name>Random</name>
        <qualifiedname>GQCP::LinearExpansion::Random</qualifiedname>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
          <declname>onv_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a linear expansion with a random, normalized coefficient vector, with coefficients uniformly distributed in [-1, +1] before any normalization.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>the ONV basis with respect to which the coefficients are defined</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A random <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="156" column="28" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a5fd884556bf3aa178bf662e38a410351" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; double, SpinResolvedSelectedONVBasis &gt; &gt;</type>
        <definition>static enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, LinearExpansion&lt; double, SpinResolvedSelectedONVBasis &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::FromGAMESSUS</definition>
        <argsstring>(const std::string &amp;GAMESSUS_filename)</argsstring>
        <name>FromGAMESSUS</name>
        <qualifiedname>GQCP::LinearExpansion::FromGAMESSUS</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>GAMESSUS_filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a linear expansion by reading in a GAMESS-US file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>GAMESSUS_filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the GAMESS-US file that contains the spin-resolved selected wave function expansion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding spin-resolved selected linear expansion from a given GAMESS-US file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="173" column="26" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="173" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ae89e20b537f5f34bbdeb7d34c24162a1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; double, SpinResolvedONVBasis &gt; &gt;</type>
        <definition>static enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, LinearExpansion&lt; double, SpinResolvedONVBasis &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::FromONVProjection</definition>
        <argsstring>(const SpinResolvedONV &amp;onv, const RSpinOrbitalBasis&lt; double, GTOShell &gt; &amp;r_spinor_basis, const USpinOrbitalBasis&lt; double, GTOShell &gt; &amp;u_spinor_basis)</argsstring>
        <name>FromONVProjection</name>
        <qualifiedname>GQCP::LinearExpansion::FromONVProjection</qualifiedname>
        <param>
          <type>const SpinResolvedONV &amp;</type>
          <declname>onv</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis" kindref="compound">RSpinOrbitalBasis</ref>&lt; double, <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>r_spinor_basis</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_u_spin_orbital_basis" kindref="compound">USpinOrbitalBasis</ref>&lt; double, <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>u_spinor_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create the linear expansion of the given spin-resolved ONV that is expressed in the given <ref refid="class_g_q_c_p_1_1_u_spin_orbital_basis" kindref="compound">USpinOrbitalBasis</ref>, by projection onto the spin-resolved ONVs expressed with respect to the given <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis" kindref="compound">RSpinOrbitalBasis</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv</parametername>
</parameternamelist>
<parameterdescription>
<para>A spin-resolved ONV expressed with respect to an unrestricted spin-orbital basis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r_spinor_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The restricted spin-orbital basis that is used to define the resulting linear expansion of ONVs against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_spinor_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The unrestricted spin-orbital basis against which the given ONV is expressed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A linear expansion inside a spin-resolved ONV basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="289" column="26" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="289" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ad61703de894c7a6fa767ecc920dd7fa5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinUnresolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; double, SpinUnresolvedONVBasis &gt; &gt;</type>
        <definition>static enable_if_t&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinUnresolvedONVBasis &gt;::value, LinearExpansion&lt; double, SpinUnresolvedONVBasis &gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::FromONVProjection</definition>
        <argsstring>(const SpinUnresolvedONV &amp;onv_of, const GSpinorBasis&lt; double, GTOShell &gt; &amp;spinor_basis_on, const GSpinorBasis&lt; double, GTOShell &gt; &amp;spinor_basis_of)</argsstring>
        <name>FromONVProjection</name>
        <qualifiedname>GQCP::LinearExpansion::FromONVProjection</qualifiedname>
        <param>
          <type>const SpinUnresolvedONV &amp;</type>
          <declname>onv_of</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>&lt; double, <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>spinor_basis_on</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>&lt; double, <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>spinor_basis_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create the linear expansion of the given spin-unresolved ONV that is expressed in the given <ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>, by projection onto the spin-resolved ONVs expressed with respect to another given <ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_of</parametername>
</parameternamelist>
<parameterdescription>
<para>A spin-unresolved ONV expressed with respect to a general spinor basis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spinor_basis_on</parametername>
</parameternamelist>
<parameterdescription>
<para>The general spinor basis that is used to define the resulting linear expansion of ONVs against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spinor_basis_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The general spinor basis against which the given ONV is expressed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A linear expansion inside a spin-unresolved ONV basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="342" column="26" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="342" bodyend="374"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A class that represents a linear expansion inside an ONV basis.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the expansion coefficients: real or complex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_ONVBasis</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of ONV basis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;</label>
        <link refid="class_g_q_c_p_1_1_linear_expansion"/>
      </node>
    </collaborationgraph>
    <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="59" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="59" bodyend="2156"/>
    <listofallmembers>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a237247a44a750b5f15ea962eab038687" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>basisTransform</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a942a9a34b540d95eb828b17879da1440" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ad6bb1642c2a6d06ad181599cf0c3ef44" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a9d885bd727a59ce487c944590ce92e3e" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a170c37f47dd80cc442014825d698d0c8" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1af8dd4e3377dbbfff5e07872f3ec1c413" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a96779d39bbd8962cb102f5b3d569cbc9" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a4c107c02909a635144faa00c12e0c73f" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a650b4b0ada44f4deefed6c87fb3fd357" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a539a721085724fa27889cc8f763655c5" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a4617b5d4195977a4e60226bc02cb0919" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateNDMElement</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a7db884d0fe88a76502fe3b02988b14ad" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateNDMElement</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a365a4727ec38d2c7ac615f043b31acbf" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateProbabilityOfFindingElectronPartition</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a365a4727ec38d2c7ac615f043b31acbf" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateProbabilityOfFindingElectronPartition</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a693a628e454b539ed6e19d2f1297d877" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateShannonEntropy</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1aaf5e9cb02507e80ea7cea70263102d8f" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSingleOrbitalEntropy</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1aa5c66b844be83e68142311ef4a0ec49f" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSingleOrbitalEntropy</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a97ff7a4e17511a28e658fab4b9e1478f" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a8d78a522f933890b0934a641c000f754" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1af5557aee6d74427e9ebffc73258782d9" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ab70860c64b91db4f2612984ca4d1f2f1" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a43c6bf67273c3ae4b2dc3b3431ec8a4c" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ae00cf6a87db408bbc89fe1c6a777e2ff" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a5b2c846a25a8462109048bc391a91ca9" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSystemOrbitalRDM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a2ac344dcc8138702f5d2845488024e13" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSystemOrbitalRDM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a60c63293906daaea5dcce4aea644c74d" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>coefficient</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a6b3479bc3007d2c71d5c9a42fc1e6ddd" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>coefficients</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ac5c87997a5811b71943be58100ea6278" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>Constant</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a9cdb7536bc7185c03b7f80b21844c517" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>forEach</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a251e9be48f5c32e3f0b7c3ed9082b5e3" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>forEach</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a5fd884556bf3aa178bf662e38a410351" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>FromGAMESSUS</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ae89e20b537f5f34bbdeb7d34c24162a1" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>FromONVProjection</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ad61703de894c7a6fa767ecc920dd7fa5" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>FromONVProjection</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1aad29eb362547ac6d2302fbf13111135d" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>HartreeFock</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1aee095ee9919d57753f68396b99da4370" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>isApprox</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1af7649247c802d4da39eb4516d85b8ffb" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>LinearExpansion</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a6902d1a87c3ea5c120819b7ff5c4a594" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>LinearExpansion</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1aca2691547f747fd79d5e27379ba6903a" prot="private" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>m_coefficients</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a0e633723ca75fcbe86dd81014a27bbe0" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>Normalized</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a6b3dfe51faf4e58e0dd6d038842c0942" prot="private" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>onv_basis</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1adfbfbb6330dd8c19099cb1927b8561fe" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>onvBasis</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>ONVBasis</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a771a6ed3dea04c7b2e37f39bf80ebc07" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>Random</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>Scalar</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a4fb15105e2f38a40d9ffc2e461cba52b" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>tensorizeCoefficients</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
