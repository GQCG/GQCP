<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_g_q_c_p_1_1_linear_expansion" kind="class" language="C++" prot="public">
    <compoundname>GQCP::LinearExpansion</compoundname>
    <includes refid="_linear_expansion_8hpp" local="no">LinearExpansion.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename _Scalar</type>
      </param>
      <param>
        <type>typename _ONVBasis</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" prot="public" static="no">
        <type>_Scalar</type>
        <definition>using GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::Scalar =  _Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="57" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" prot="public" static="no">
        <type>_ONVBasis</type>
        <definition>using GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::ONVBasis =  _ONVBasis</definition>
        <argsstring></argsstring>
        <name>ONVBasis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="60" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_g_q_c_p_1_1_linear_expansion_1a6b3dfe51faf4e58e0dd6d038842c0942" prot="private" static="no" mutable="no">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></type>
        <definition>ONVBasis GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::onv_basis</definition>
        <argsstring></argsstring>
        <name>onv_basis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="65" column="14" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_g_q_c_p_1_1_linear_expansion_1aca2691547f747fd79d5e27379ba6903a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt;</type>
        <definition>VectorX&lt;Scalar&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::m_coefficients</definition>
        <argsstring></argsstring>
        <name>m_coefficients</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="68" column="13" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1af7649247c802d4da39eb4516d85b8ffb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::LinearExpansion</definition>
        <argsstring>(const ONVBasis &amp;onv_basis, const VectorX&lt; Scalar &gt; &amp;coefficients)</argsstring>
        <name>LinearExpansion</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
          <declname>onv_basis</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>coefficients</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a linear expansion inside the given ONV basis, with corresponding expansion coefficients.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The ONV basis with respect to which the coefficients are defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>The expansion coefficients. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="82" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a6902d1a87c3ea5c120819b7ff5c4a594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::LinearExpansion</definition>
        <argsstring>()=default</argsstring>
        <name>LinearExpansion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="90" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a60c63293906daaea5dcce4aea644c74d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></type>
        <definition>Scalar GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::coefficient</definition>
        <argsstring>(const size_t i) const</argsstring>
        <name>coefficient</name>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access a coefficient of the linear expansion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (address) of the coefficient that should be obtained.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The i-th expansion coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="383" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="383" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a8cfae67734c46f6ed1bed2235444c158" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &amp;</type>
        <definition>const VectorX&lt;Scalar&gt;&amp; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::coefficients</definition>
        <argsstring>() const</argsstring>
        <name>coefficients</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The expansion coefficients of this linear expansion wave function model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="388" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="388" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1af99f45f0ff40fd21d773aa4c591fd4f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
        <definition>const ONVBasis&amp; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::onvBasis</definition>
        <argsstring>() const</argsstring>
        <name>onvBasis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The ONV basis that is related to this linear expansion wave function model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="393" column="20" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="393" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a5b75a7df26c9dae8da6262395690088f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedONVBasis&gt;::value&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::basisTransform</definition>
        <argsstring>(const RTransformation&lt; double &gt; &amp;T)</argsstring>
        <name>basisTransform</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_r_transformation" kindref="compound">RTransformation</ref>&lt; double &gt; &amp;</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the expansion coefficients of this linear expansion so that they correspond to the situation after a transformation of the underlying spinor basis with the given basis transformation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformation between the old and the new restricted spin-orbital basis.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This method is only available for the full spin-resolved ONV basis. </para>
</simplesect>
<simplesect kind="note"><para>This algorithm was implemented from a description in Helgaker2000. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>The transformation of the expansion coefficients is adapted from Helgaker2000, chapter 11.9. For every orbital, a set of correction coefficients will be calculated (Delta C in Helgaker), to update the current coefficients.</para>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="409" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="409" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a520a6768167ffe6816d16ba020203924" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinUnresolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_g1_d_m" kindref="compound">G1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinUnresolvedONVBasis&gt;::value, G1DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate1DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="590" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="590" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a68260d54ae9ed4e953c544c9fe6d9f35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z, SpinUnresolvedONVBasis&gt;::value, Scalar&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateNDMElement</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;bra_indices, const std::vector&lt; size_t &gt; &amp;ket_indices) const</argsstring>
        <name>calculateNDMElement</name>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>bra_indices</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>ket_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate an element of the N-electron density matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bra_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the orbitals that should be annihilated on the left (on the bra). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ket_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the orbitals that should be annihilated on the right (on the ket).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An element of the N-DM, as specified by the given bra and ket indices. <computeroutput>calculateNDMElement({0, 1}, {2, 1})</computeroutput> would calculate an element of the 2-NDM d^{(2)} (0, 1, 1, 2) corresponding the operator string: <computeroutput>a^\dagger_0 a^\dagger_1 a_2 a_1</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>This method is only enabled for linear expansions related to spin-unresolved ONV bases. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="664" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="664" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a681b9ee10933b17c0b3802630c69886f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z, SpinUnresolvedSelectedONVBasis&gt;::value, Scalar&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateNDMElement</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;bra_indices, const std::vector&lt; size_t &gt; &amp;ket_indices) const</argsstring>
        <name>calculateNDMElement</name>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>bra_indices</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>ket_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate an element of the N-electron density matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bra_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the orbitals that should be annihilated on the left (on the bra). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ket_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the orbitals that should be annihilated on the right (on the ket).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An element of the N-DM, as specified by the given bra and ket indices. <computeroutput>calculateNDMElement({0, 1}, {2, 1})</computeroutput> would calculate an element of the 2-NDM d^{(2)} (0, 1, 1, 2) corresponding the operator string: <computeroutput>a^\dagger_0 a^\dagger_1 a_2 a_1</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>This method is only enabled for linear expansions related to spin-unresolved selected ONV bases. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="752" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="752" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a26173a1862769598b24351d3458f45b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved1_d_m" kindref="compound">SpinResolved1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedONVBasis&gt;::value, SpinResolved1DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved1DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved one-electron density matrix for a full spin-resolved wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="838" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="838" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a9cedef33ec080b51617740a3684ef777" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved2_d_m" kindref="compound">SpinResolved2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedONVBasis&gt;::value, SpinResolved2DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved2DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved two-electron density matrix for a full spin-resolved wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="958" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="958" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a9c97256da0f7d643c385ffdc42758731" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital1_d_m" kindref="compound">Orbital1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedONVBasis&gt;::value, Orbital1DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate1DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the one-electron density matrix for a full spin-resolved wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 1-DM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1171" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1171" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a0bb9e25c8522c72b53de3cc218b86312" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital2_d_m" kindref="compound">Orbital2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedONVBasis&gt;::value, Orbital2DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate2DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the two-electron density matrix for a full spin-resolved wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1180" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1180" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a1253d917657e0280beda087214b49f6a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital1_d_m" kindref="compound">Orbital1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SeniorityZeroONVBasis&gt;::value, Orbital1DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate1DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the orbital one-electron density matrix for a seniority-zero wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1193" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1193" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a62221808d5ac5ebce97705e6e5c18420" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital2_d_m" kindref="compound">Orbital2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SeniorityZeroONVBasis&gt;::value, Orbital2DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate2DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the two-electron density matrix for a seniority-zero wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1227" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1227" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a355dea63151bc35974fcb4a733a3a020" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved1_d_m" kindref="compound">SpinResolved1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SeniorityZeroONVBasis&gt;::value, SpinResolved1DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved1DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved one-electron density matrix for a seniority-zero wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1235" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1235" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a73df44f6170ab3ac8989714d26406bfe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved2_d_m" kindref="compound">SpinResolved2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SeniorityZeroONVBasis&gt;::value, SpinResolved2DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved2DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved two-electron density matrix for a seniority-zero wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1244" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1244" bodyend="1301"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a67589ca63e3416c18a743755da18c737" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved1_d_m" kindref="compound">SpinResolved1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedSelectedONVBasis&gt;::value, SpinResolved1DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved1DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved one-electron density matrix for a spin-resolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1314" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1314" bodyend="1385"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ab703ef7bbf3af427842525656ea90018" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_spin_resolved2_d_m" kindref="compound">SpinResolved2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedSelectedONVBasis&gt;::value, SpinResolved2DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSpinResolved2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculateSpinResolved2DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the spin-resolved two-electron density matrix for a spin-resolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The spin-resolved 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1394" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1394" bodyend="1617"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a68715529f7cd2e9632658808447a2396" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital1_d_m" kindref="compound">Orbital1DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedSelectedONVBasis&gt;::value, Orbital1DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate1DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the one-electron density matrix for a spin-resolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1626" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1626" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ae3548e45e0d00792771c32ee090029ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_orbital2_d_m" kindref="compound">Orbital2DM</ref>&lt; double &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedSelectedONVBasis&gt;::value, Orbital2DM&lt;double&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate2DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the two-electron density matrix for a spin-resolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The orbital (total, spin-summed) 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1635" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1635" bodyend="1635"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a4f2112174b9ecd83b68ea3eb77394a7c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_g1_d_m" kindref="compound">G1DM</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z, SpinUnresolvedSelectedONVBasis&gt;::value, G1DM&lt;Scalar&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate1DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate1DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the generalized (G) one-electron density matrix for a spin-unresolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The generalized (G) 1-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1644" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1644" bodyend="1683"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1aba66ead5fd15d70424318070d3076adb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_g2_d_m" kindref="compound">G2DM</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z, SpinUnresolvedSelectedONVBasis&gt;::value, G2DM&lt;Scalar&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculate2DM</definition>
        <argsstring>() const</argsstring>
        <name>calculate2DM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the generalized (G) two-electron density matrix (1-DM) for a spin-unresolved selected wave function expansion.</para>
<para><simplesect kind="return"><para>The generalized (G) 2-DM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1692" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1692" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a81064fd72920efc4a24edd58a95b41a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinUnresolvedONVBasis &gt;::value|std::is_same&lt; Z, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_square_matrix" kindref="compound">GQCP::SquareMatrix</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z, SpinUnresolvedONVBasis&gt;::value | std::is_same&lt;Z, SpinResolvedONVBasis&gt;::value, GQCP::SquareMatrix&lt;Scalar&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateOrbitalRDM</definition>
        <argsstring>(const std::vector&lt; typename ONVBasis::ONV &gt; &amp;system_onvs, const std::vector&lt; typename ONVBasis::ONV &gt; &amp;environment_onvs) const</argsstring>
        <name>calculateOrbitalRDM</name>
        <param>
          <type>const std::vector&lt; typename ONVBasis::ONV &gt; &amp;</type>
          <declname>system_onvs</declname>
        </param>
        <param>
          <type>const std::vector&lt; typename ONVBasis::ONV &gt; &amp;</type>
          <declname>environment_onvs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MARK: Entropy Calculate the orbital reduced density matrix as defined in equation (3) of Rissler2005 (<ulink url="https://doi.org/10.1016/j.chemphys.2005.10.018">https://doi.org/10.1016/j.chemphys.2005.10.018</ulink>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>system_onvs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of all ONVs of the system that is obtained after splitting an ONV basis into two subsystems. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>environment_onvs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of all ONVs of the environment that is obtained after splitting an ONV basis into two subsystems. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>system_onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the unique ONVs of the system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>environment_onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the unique ONVs of the environment.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The orbital reduced density matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1799" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1799" bodyend="1858"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ac5d36496b690457a45bd56b8289a29ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, double &gt;::value, double &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z, double&gt;::value, double&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateShannonEntropy</definition>
        <argsstring>() const</argsstring>
        <name>calculateShannonEntropy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Shannon entropy (information content) of the wave function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1865" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1865" bodyend="1876"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a3c8b320ac4cbac4ec9630d66fbf43b25" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, double &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedONVBasis&gt;::value, double&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSingleOrbitalEntropy</definition>
        <argsstring>(const size_t orbital_index) const</argsstring>
        <name>calculateSingleOrbitalEntropy</name>
        <param>
          <type>const size_t</type>
          <declname>orbital_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the single orbital entropy of the orbital at the selected index, from the spin-resolved 1- and two-particle density matrix. The implementation is based on <ulink url="https://doi.org/10.1002/qua.24832">https://doi.org/10.1002/qua.24832</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orbital_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the orbital for which the single orbital entropy needs to be calculated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The single orbital entropy of the orbital at the specified index.</para>
</simplesect>
<simplesect kind="note"><para>This version of this method is used when the linear expansion is based on a spin-resolved ONV basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1889" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1889" bodyend="1925"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ae38a8e6814c2ea1e027b651bda168168" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt;::value &amp;&amp;std::is_same&lt; Z2, SeniorityZeroONVBasis &gt;::value, double &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z1, Scalar&gt;::value &amp;&amp; std::is_same&lt;Z2, SeniorityZeroONVBasis&gt;::value, double&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::calculateSingleOrbitalEntropy</definition>
        <argsstring>(const size_t orbital_index) const</argsstring>
        <name>calculateSingleOrbitalEntropy</name>
        <param>
          <type>const size_t</type>
          <declname>orbital_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the single orbital entropy of the orbital at the selected index, from the spin-resolved 1- and two-particle density matrix. The implementation is based on <ulink url="https://doi.org/10.1002/qua.24832">https://doi.org/10.1002/qua.24832</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orbital_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the orbital for which the single orbital entropy needs to be calculated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The single orbital entropy of the orbital at the specified index.</para>
</simplesect>
<simplesect kind="note"><para>This version of this method is used when the linear expansion is based on a seniority-zero ONV basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1938" column="19" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1938" bodyend="1970"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1adef9943597c3292868341ed108c18ac7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z, SpinResolvedONVBasis &gt;::value, void &gt;</type>
        <definition>enable_if_t&lt;std::is_same&lt;Z, SpinResolvedONVBasis&gt;::value, void&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::forEach</definition>
        <argsstring>(const std::function&lt; void(const Scalar, const SpinResolvedONV)&gt; &amp;callback) const</argsstring>
        <name>forEach</name>
        <param>
          <type>const std::function&lt; void(const <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, const SpinResolvedONV)&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over all expansion coefficients and corresponding ONVs, and apply the given callback function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be applied in every iteration. Its arguments are an expansion coefficient and the corresponding ONV. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="1983" column="18" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="1983" bodyend="1995"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1aee095ee9919d57753f68396b99da4370" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::isApprox</definition>
        <argsstring>(const LinearExpansion&lt; Scalar, ONVBasis &gt; &amp;other, double tolerance=1.0e-12) const</argsstring>
        <name>isApprox</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>1.0e-12</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other linear expansion for the comparison. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>The tolerance for the comparison of coefficients.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the two linear expansions are equal within a given tolerance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="2008" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="2008" bodyend="2015"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a57e038e1975f19c5e6933d36c7c8b504" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &gt;</type>
        <definition>static LinearExpansion&lt;Scalar, ONVBasis&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::Constant</definition>
        <argsstring>(const ONVBasis &amp;onv_basis)</argsstring>
        <name>Constant</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
          <declname>onv_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a linear expansion with a normalized coefficient vector (i.e. all the coefficients are equal).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The ONV basis with respect to which the coefficients are defined.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="104" column="28" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="104" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a73053c804e2222efb302aff74ad45801" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &gt;</type>
        <definition>static LinearExpansion&lt;Scalar, ONVBasis&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::HartreeFock</definition>
        <argsstring>(const ONVBasis &amp;onv_basis)</argsstring>
        <name>HartreeFock</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
          <declname>onv_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a linear expansion that represents the Hartree-Fock wave function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The ONV basis with respect to which the coefficients are defined.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="120" column="28" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="120" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a4cf29388d529c35b62a093b52f5d7a24" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &gt;</type>
        <definition>static LinearExpansion&lt;Scalar, ONVBasis&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::Normalized</definition>
        <argsstring>(const ONVBasis &amp;onv_basis, const VectorX&lt; Scalar &gt; &amp;coefficients)</argsstring>
        <name>Normalized</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
          <declname>onv_basis</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_g_q_c_p_1a48fd76814344f532956445188044b544" kindref="member">VectorX</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>coefficients</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a normalized linear expansion inside a given ONV basis with possibly non-normalized coefficients.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The ONV basis with respect to which the coefficients are defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>the expansion coefficients</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A normalized <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="136" column="28" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="136" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a4243e84f3b71c655cbbe3784f4665904" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; <ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref>, <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &gt;</type>
        <definition>static LinearExpansion&lt;Scalar, ONVBasis&gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::Random</definition>
        <argsstring>(const ONVBasis &amp;onv_basis)</argsstring>
        <name>Random</name>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref> &amp;</type>
          <declname>onv_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a linear expansion with a random, normalized coefficient vector, with coefficients uniformly distributed in [-1, +1] before any normalization.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>the ONV basis with respect to which the coefficients are defined</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A random <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="151" column="28" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="151" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1ab81ea18db61745ee5f364d7a0bd4478d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedSelectedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; double, SpinResolvedSelectedONVBasis &gt; &gt;</type>
        <definition>static enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedSelectedONVBasis&gt;::value, LinearExpansion&lt;double, SpinResolvedSelectedONVBasis&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::FromGAMESSUS</definition>
        <argsstring>(const std::string &amp;GAMESSUS_filename)</argsstring>
        <name>FromGAMESSUS</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>GAMESSUS_filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a linear expansion by reading in a GAMESS-US file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>GAMESSUS_filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the GAMESS-US file that contains the spin-resolved selected wave function expansion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding spin-resolved selected linear expansion from a given GAMESS-US file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="168" column="26" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="168" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a431d89c7f251e498024392ad02e12c30" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinResolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; double, SpinResolvedONVBasis &gt; &gt;</type>
        <definition>static enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinResolvedONVBasis&gt;::value, LinearExpansion&lt;double, SpinResolvedONVBasis&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::FromONVProjection</definition>
        <argsstring>(const SpinResolvedONV &amp;onv, const RSpinOrbitalBasis&lt; double, GTOShell &gt; &amp;r_spinor_basis, const USpinOrbitalBasis&lt; double, GTOShell &gt; &amp;u_spinor_basis)</argsstring>
        <name>FromONVProjection</name>
        <param>
          <type>const SpinResolvedONV &amp;</type>
          <declname>onv</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis" kindref="compound">RSpinOrbitalBasis</ref>&lt; double, <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>r_spinor_basis</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_u_spin_orbital_basis" kindref="compound">USpinOrbitalBasis</ref>&lt; double, <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>u_spinor_basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create the linear expansion of the given spin-resolved ONV that is expressed in the given <ref refid="class_g_q_c_p_1_1_u_spin_orbital_basis" kindref="compound">USpinOrbitalBasis</ref>, by projection onto the spin-resolved ONVs expressed with respect to the given <ref refid="class_g_q_c_p_1_1_r_spin_orbital_basis" kindref="compound">RSpinOrbitalBasis</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv</parametername>
</parameternamelist>
<parameterdescription>
<para>A spin-resolved ONV expressed with respect to an unrestricted spin-orbital basis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r_spinor_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The restricted spin-orbital basis that is used to define the resulting linear expansion of ONVs against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_spinor_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The unrestricted spin-orbital basis against which the given ONV is expressed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A linear expansion inside a spin-resolved ONV basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="284" column="26" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="284" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_linear_expansion_1a2cb9dfcdab0b36f17e1e0e448397c975" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Z1</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" kindref="member">Scalar</ref></defval>
          </param>
          <param>
            <type>typename Z2</type>
            <defval><ref refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" kindref="member">ONVBasis</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_g_q_c_p_1a006e5cafd5827d2685c9e0bb7e01cfa2" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; Z1, double &gt;::value &amp;&amp;std::is_same&lt; Z2, SpinUnresolvedONVBasis &gt;::value, <ref refid="class_g_q_c_p_1_1_linear_expansion" kindref="compound">LinearExpansion</ref>&lt; double, SpinUnresolvedONVBasis &gt; &gt;</type>
        <definition>static enable_if_t&lt;std::is_same&lt;Z1, double&gt;::value &amp;&amp; std::is_same&lt;Z2, SpinUnresolvedONVBasis&gt;::value, LinearExpansion&lt;double, SpinUnresolvedONVBasis&gt; &gt; GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;::FromONVProjection</definition>
        <argsstring>(const SpinUnresolvedONV &amp;onv_of, const GSpinorBasis&lt; double, GTOShell &gt; &amp;spinor_basis_on, const GSpinorBasis&lt; double, GTOShell &gt; &amp;spinor_basis_of)</argsstring>
        <name>FromONVProjection</name>
        <param>
          <type>const SpinUnresolvedONV &amp;</type>
          <declname>onv_of</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>&lt; double, <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>spinor_basis_on</declname>
        </param>
        <param>
          <type>const <ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>&lt; double, <ref refid="class_g_q_c_p_1_1_g_t_o_shell" kindref="compound">GTOShell</ref> &gt; &amp;</type>
          <declname>spinor_basis_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create the linear expansion of the given spin-unresolved ONV that is expressed in the given <ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>, by projection onto the spin-resolved ONVs expressed with respect to another given <ref refid="class_g_q_c_p_1_1_g_spinor_basis" kindref="compound">GSpinorBasis</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onv_of</parametername>
</parameternamelist>
<parameterdescription>
<para>A spin-unresolved ONV expressed with respect to a general spinor basis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spinor_basis_on</parametername>
</parameternamelist>
<parameterdescription>
<para>The general spinor basis that is used to define the resulting linear expansion of ONVs against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spinor_basis_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The general spinor basis against which the given ONV is expressed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A linear expansion inside a spin-unresolved ONV basis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="337" column="26" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="337" bodyend="369"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A class that represents a linear expansion inside an ONV basis.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the expansion coefficients: real or complex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_ONVBasis</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of ONV basis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>GQCP::LinearExpansion&lt; _Scalar, _ONVBasis &gt;</label>
        <link refid="class_g_q_c_p_1_1_linear_expansion"/>
      </node>
    </collaborationgraph>
    <location file="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" line="54" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/QCModel/CI/LinearExpansion.hpp" bodystart="54" bodyend="2016"/>
    <listofallmembers>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a5b75a7df26c9dae8da6262395690088f" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>basisTransform</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a520a6768167ffe6816d16ba020203924" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a9c97256da0f7d643c385ffdc42758731" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a1253d917657e0280beda087214b49f6a" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a68715529f7cd2e9632658808447a2396" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a4f2112174b9ecd83b68ea3eb77394a7c" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a0bb9e25c8522c72b53de3cc218b86312" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a62221808d5ac5ebce97705e6e5c18420" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ae3548e45e0d00792771c32ee090029ba" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1aba66ead5fd15d70424318070d3076adb" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculate2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a68260d54ae9ed4e953c544c9fe6d9f35" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateNDMElement</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a681b9ee10933b17c0b3802630c69886f" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateNDMElement</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a81064fd72920efc4a24edd58a95b41a6" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateOrbitalRDM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ac5d36496b690457a45bd56b8289a29ab" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateShannonEntropy</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a3c8b320ac4cbac4ec9630d66fbf43b25" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSingleOrbitalEntropy</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ae38a8e6814c2ea1e027b651bda168168" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSingleOrbitalEntropy</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a26173a1862769598b24351d3458f45b6" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a355dea63151bc35974fcb4a733a3a020" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a67589ca63e3416c18a743755da18c737" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved1DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a9cedef33ec080b51617740a3684ef777" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a73df44f6170ab3ac8989714d26406bfe" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ab703ef7bbf3af427842525656ea90018" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>calculateSpinResolved2DM</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a60c63293906daaea5dcce4aea644c74d" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>coefficient</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a8cfae67734c46f6ed1bed2235444c158" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>coefficients</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a57e038e1975f19c5e6933d36c7c8b504" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>Constant</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1adef9943597c3292868341ed108c18ac7" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>forEach</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ab81ea18db61745ee5f364d7a0bd4478d" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>FromGAMESSUS</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a431d89c7f251e498024392ad02e12c30" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>FromONVProjection</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a2cb9dfcdab0b36f17e1e0e448397c975" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>FromONVProjection</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a73053c804e2222efb302aff74ad45801" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>HartreeFock</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1aee095ee9919d57753f68396b99da4370" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>isApprox</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1af7649247c802d4da39eb4516d85b8ffb" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>LinearExpansion</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a6902d1a87c3ea5c120819b7ff5c4a594" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>LinearExpansion</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1aca2691547f747fd79d5e27379ba6903a" prot="private" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>m_coefficients</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a4cf29388d529c35b62a093b52f5d7a24" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>Normalized</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a6b3dfe51faf4e58e0dd6d038842c0942" prot="private" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>onv_basis</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1af99f45f0ff40fd21d773aa4c591fd4f5" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>onvBasis</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a42c9141e026bdfdb3fd13ae91f59d74f" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>ONVBasis</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1a4243e84f3b71c655cbbe3784f4665904" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>Random</name></member>
      <member refid="class_g_q_c_p_1_1_linear_expansion_1ab6283d757673aa83a7609e87a8b01ce9" prot="public" virt="non-virtual"><scope>GQCP::LinearExpansion</scope><name>Scalar</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
