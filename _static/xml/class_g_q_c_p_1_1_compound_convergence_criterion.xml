<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_g_q_c_p_1_1_compound_convergence_criterion" kind="class" language="C++" prot="public">
    <compoundname>GQCP::CompoundConvergenceCriterion</compoundname>
    <basecompoundref refid="class_g_q_c_p_1_1_convergence_criterion" prot="public" virt="non-virtual">GQCP::ConvergenceCriterion&lt; _Environment &gt;</basecompoundref>
    <includes refid="_compound_convergence_criterion_8hpp" local="no">CompoundConvergenceCriterion.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename _Environment</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_compound_convergence_criterion_1ae9036ef3b116abfbfd7a9193ab294070" prot="public" static="no">
        <type>_Environment</type>
        <definition>using GQCP::CompoundConvergenceCriterion&lt; _Environment &gt;::Environment =  _Environment</definition>
        <argsstring></argsstring>
        <name>Environment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" line="42" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_g_q_c_p_1_1_compound_convergence_criterion_1a25c055a3350caa9a0e56320989d32632" prot="public" static="no">
        <type><ref refid="class_g_q_c_p_1_1_compound_convergence_criterion" kindref="compound">CompoundConvergenceCriterion</ref>&lt; <ref refid="class_g_q_c_p_1_1_compound_convergence_criterion_1ae9036ef3b116abfbfd7a9193ab294070" kindref="member">Environment</ref> &gt;</type>
        <definition>using GQCP::CompoundConvergenceCriterion&lt; _Environment &gt;::Self =  CompoundConvergenceCriterion&lt;Environment&gt;</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" line="43" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_g_q_c_p_1_1_compound_convergence_criterion_1ad4e479b86ebe22197e6c581695a469a7" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="class_g_q_c_p_1_1_convergence_criterion" kindref="compound">ConvergenceCriterion</ref>&lt; <ref refid="class_g_q_c_p_1_1_compound_convergence_criterion_1ae9036ef3b116abfbfd7a9193ab294070" kindref="member">Environment</ref> &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;ConvergenceCriterion&lt;Environment&gt; &gt; &gt; GQCP::CompoundConvergenceCriterion&lt; _Environment &gt;::criteria</definition>
        <argsstring></argsstring>
        <name>criteria</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" line="47" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_g_q_c_p_1_1_compound_convergence_criterion_1aa76dec874e961298dc932604447156d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C1</type>
          </param>
          <param>
            <type>typename C2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>GQCP::CompoundConvergenceCriterion&lt; _Environment &gt;::CompoundConvergenceCriterion</definition>
        <argsstring>(const C1 &amp;criterion1, const C2 &amp;criterion2)</argsstring>
        <name>CompoundConvergenceCriterion</name>
        <param>
          <type>const C1 &amp;</type>
          <declname>criterion1</declname>
        </param>
        <param>
          <type>const C2 &amp;</type>
          <declname>criterion2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A basic constructor from two criteria that should be fulfilled at the same time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>criterion1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first convergence criterion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>criterion2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second convergence criterion </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" line="62" column="5" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" bodystart="62" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_compound_convergence_criterion_1a7915c59e6ba2fd2ac59aebf377b3b7b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string GQCP::CompoundConvergenceCriterion&lt; _Environment &gt;::description</definition>
        <argsstring>() const override</argsstring>
        <name>description</name>
        <reimplements refid="class_g_q_c_p_1_1_convergence_criterion_1a5d2993454005779f8a6376c63aec430c">description</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PUBLIC OVERRIDDEN METHODS <simplesect kind="return"><para>a textual description of this algorithmic step </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" line="73" column="17" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" bodystart="73" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_compound_convergence_criterion_1a86066355bcaf6aa79b6d0152bbf4fe8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool GQCP::CompoundConvergenceCriterion&lt; _Environment &gt;::isFulfilled</definition>
        <argsstring>(Environment &amp;environment) override</argsstring>
        <name>isFulfilled</name>
        <reimplements refid="class_g_q_c_p_1_1_convergence_criterion_1a84503e9b2b4bdd01188f21be512bc281">isFulfilled</reimplements>
        <param>
          <type><ref refid="class_g_q_c_p_1_1_compound_convergence_criterion_1ae9036ef3b116abfbfd7a9193ab294070" kindref="member">Environment</ref> &amp;</type>
          <declname>environment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>environment</parametername>
</parameternamelist>
<parameterdescription>
<para>the environment that this criterion can read from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if this criterion is fulfilled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" line="90" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" bodystart="90" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_compound_convergence_criterion_1a6eeec244ae1aab11dc5e6a9bce48c825" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_g_q_c_p_1_1_compound_convergence_criterion_1a25c055a3350caa9a0e56320989d32632" kindref="member">Self</ref></type>
        <definition>Self GQCP::CompoundConvergenceCriterion&lt; _Environment &gt;::add</definition>
        <argsstring>(const C &amp;criterion)</argsstring>
        <name>add</name>
        <param>
          <type>const C &amp;</type>
          <declname>criterion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add another convergence criterion that should be fulfilled in this compound convergence criterion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>criterion</parametername>
</parameternamelist>
<parameterdescription>
<para>the new convergence criterion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an updated version of *this, in order to allow chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" line="114" column="10" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_g_q_c_p_1_1_compound_convergence_criterion_1aa1d295b65dd9285e76d9815a5cb7e42e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GQCP::CompoundConvergenceCriterion&lt; _Environment &gt;::count</definition>
        <argsstring>() const</argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of simple convergence criteria that are compounded in this one </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" line="123" column="12" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" bodystart="123" bodyend="123"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A criterion that checks convergence by requiring that multiple convergence criteria are fulfilled simultaneously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_Environment</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the environment that this criterion can read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>GQCP::ConvergenceCriterion&lt; _Environment &gt;</label>
        <link refid="class_g_q_c_p_1_1_convergence_criterion"/>
      </node>
      <node id="1">
        <label>GQCP::CompoundConvergenceCriterion&lt; _Environment &gt;</label>
        <link refid="class_g_q_c_p_1_1_compound_convergence_criterion"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>GQCP::ConvergenceCriterion&lt; _Environment &gt;</label>
        <link refid="class_g_q_c_p_1_1_convergence_criterion"/>
      </node>
      <node id="1">
        <label>GQCP::CompoundConvergenceCriterion&lt; _Environment &gt;</label>
        <link refid="class_g_q_c_p_1_1_compound_convergence_criterion"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" line="38" column="1" bodyfile="/__w/GQCP/GQCP/gqcp/include/Mathematical/Algorithm/CompoundConvergenceCriterion.hpp" bodystart="39" bodyend="124"/>
    <listofallmembers>
      <member refid="class_g_q_c_p_1_1_compound_convergence_criterion_1a6eeec244ae1aab11dc5e6a9bce48c825" prot="public" virt="non-virtual"><scope>GQCP::CompoundConvergenceCriterion</scope><name>add</name></member>
      <member refid="class_g_q_c_p_1_1_compound_convergence_criterion_1aa76dec874e961298dc932604447156d6" prot="public" virt="non-virtual"><scope>GQCP::CompoundConvergenceCriterion</scope><name>CompoundConvergenceCriterion</name></member>
      <member refid="class_g_q_c_p_1_1_compound_convergence_criterion_1aa1d295b65dd9285e76d9815a5cb7e42e" prot="public" virt="non-virtual"><scope>GQCP::CompoundConvergenceCriterion</scope><name>count</name></member>
      <member refid="class_g_q_c_p_1_1_compound_convergence_criterion_1ad4e479b86ebe22197e6c581695a469a7" prot="private" virt="non-virtual"><scope>GQCP::CompoundConvergenceCriterion</scope><name>criteria</name></member>
      <member refid="class_g_q_c_p_1_1_compound_convergence_criterion_1a7915c59e6ba2fd2ac59aebf377b3b7b2" prot="public" virt="virtual"><scope>GQCP::CompoundConvergenceCriterion</scope><name>description</name></member>
      <member refid="class_g_q_c_p_1_1_compound_convergence_criterion_1ae9036ef3b116abfbfd7a9193ab294070" prot="public" virt="non-virtual"><scope>GQCP::CompoundConvergenceCriterion</scope><name>Environment</name></member>
      <member refid="class_g_q_c_p_1_1_compound_convergence_criterion_1a86066355bcaf6aa79b6d0152bbf4fe8f" prot="public" virt="virtual"><scope>GQCP::CompoundConvergenceCriterion</scope><name>isFulfilled</name></member>
      <member refid="class_g_q_c_p_1_1_compound_convergence_criterion_1a25c055a3350caa9a0e56320989d32632" prot="public" virt="non-virtual"><scope>GQCP::CompoundConvergenceCriterion</scope><name>Self</name></member>
      <member refid="class_g_q_c_p_1_1_convergence_criterion_1a4594ec2c922fcc9aafb6734e68fa158d" prot="public" virt="virtual"><scope>GQCP::CompoundConvergenceCriterion</scope><name>~ConvergenceCriterion</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
