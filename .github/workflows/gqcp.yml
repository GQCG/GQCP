name: GQCP
on: [push, pull_request]
env:
  slack_color: '#FF0000'
  slack_message: 'Build failed'
# Jobs are ran in parallel
jobs:

# BUILD
  build:
    runs-on: ubuntu-latest
    # Environment variables
    env:
      CONDA: /usr/share/miniconda
      LIBINT_DATA_PATH: $CONDA/share/libint/2.3.1/basis

# Various steps to perform the build
    steps:
    # Cmake & Python scripts
    - uses: snickerbockers/cmake-configure@prerel1
    - uses: actions/setup-python@v1
      with:
        python-version: '3.7' 
    - uses: actions/checkout@v1

# Set cache actions: links files at a path to a key to be stored
#    - name: Cache Conda
#      id: cache-conda  # cache id
#      uses: actions/cache@v1. # Marketplace script
      # Store all files in $CONDA, link with key "Linux-conda"
#      with:
#        path: $CONDA
#        key: ${{ runner.os }}-conda

    - name: Install Miniconda
#      if: steps.cache-conda.outputs.cache-hit != 'true'  # If cached skip
      run: |
        rm -rf $CONDA;
        mkdir -p $HOME/download;
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
        bash $HOME/download/miniconda.sh -b -p $CONDA;

    - name: Configure Conda
      run: |   
        source $CONDA/bin/activate
        hash -r
        conda config --set always_yes yes --set changeps1 no
        
    - name: Install Conda Modules
#       if: steps.cache-conda.outputs.cache-hit != 'true'  # If cached skip
      run: |   
        conda install -c conda-forge cmake=3.13 boost-cpp=1.69.0 eigen blas mkl pybind11 benchmark numpy;
        conda install -c gqcg libint spectra;
        conda install -c intel mkl-include mkl-static intel-openmp;

    - name: Install Libcint
#       if: steps.cache-conda.outputs.cache-hit != 'true'  # If cached skip
      # Note that we install Libcint in $CONDA
      run: |
        cd /tmp
        git clone -b develop https://github.com/GQCG/libcint.git
        cd libcint
        mkdir build && cd build
        $CONDA/bin/cmake .. -DUSE_MKL=TRUE -DCMAKE_INSTALL_PREFIX=$CONDA -DCMAKE_PREFIX_PATH=$CONDA
        make -j3 && sudo make install
# Build & test the library 
    - name: Build GQCP
      run: |
        mkdir build && cd build
        $CONDA/bin/cmake .. -DBUILD_TESTS=TRUE -DBUILD_BENCHMARKS=TRUE -DBUILD_PYTHON_BINDINGS=TRUE -DCMAKE_INSTALL_PREFIX=~/.local -DCMAKE_PREFIX_PATH=$CONDA
        make -j10 && sudo make install
        
# Run the benchmarks
    - name: Benchmarks
      run: |
        cd build
        cd benchmarks
        ./doci_case --benchmark_counters_tabular=true
        ./doci_matrix --benchmark_counters_tabular=true
        ./doci_matvec --benchmark_counters_tabular=true
        ./fci_matrix --benchmark_counters_tabular=true
        ./fci_matvec --benchmark_counters_tabular=true
        ./hubbard_diagonalization --benchmark_counters_tabular=true
        ./hubbard_matrix --benchmark_counters_tabular=true
        ./hubbard_matvec --benchmark_counters_tabular=true

# Test if installed library links properly to external driver
    - name: Link
      run: |
        cd /tmp
        git clone https://github.com/GQCG/gqcp-link.git
        cd gqcp-link
        mkdir build && cd build
        $CONDA/bin/cmake .. -DCMAKE_PREFIX_PATH=$CONDA -DGQCP_INSTALL_PREFIX=~/.local -Dgqcp_DIR=/home/runner/.local
        make -j3 && ./test_driver
        echo "::set-env name=slack_message::'Build successful'"
        echo "::set-env name=slack_color::'#00FF00'"
        
  slackNotification:
    needs: build
    name: Slack Notification
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: $slack_color
        SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
        SLACK_MESSAGE: $slack_message
        SLACK_TITLE: $GITHUB_REF
        SLACK_USERNAME: GitHub
